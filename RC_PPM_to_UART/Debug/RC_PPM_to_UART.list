
RC_PPM_to_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d60  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08003e6c  08003e6c  00013e6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003e98  08003e98  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003e98  08003e98  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003e98  08003e98  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003e98  08003e98  00013e98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003e9c  08003e9c  00013e9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003ea0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a1c  20000010  08003eac  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000a2c  08003eac  00020a2c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001571c  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002b37  00000000  00000000  00035751  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c98  00000000  00000000  00038288  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b60  00000000  00000000  00038f20  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000168c8  00000000  00000000  00039a80  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000bcfb  00000000  00000000  00050348  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00072785  00000000  00000000  0005c043  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ce7c8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003240  00000000  00000000  000ce844  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000010 	.word	0x20000010
 8000128:	00000000 	.word	0x00000000
 800012c:	08003e54 	.word	0x08003e54

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000014 	.word	0x20000014
 8000148:	08003e54 	.word	0x08003e54

0800014c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000150:	4b08      	ldr	r3, [pc, #32]	; (8000174 <HAL_Init+0x28>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	4a07      	ldr	r2, [pc, #28]	; (8000174 <HAL_Init+0x28>)
 8000156:	f043 0310 	orr.w	r3, r3, #16
 800015a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800015c:	2003      	movs	r0, #3
 800015e:	f000 f941 	bl	80003e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000162:	2000      	movs	r0, #0
 8000164:	f000 f808 	bl	8000178 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000168:	f003 f832 	bl	80031d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800016c:	2300      	movs	r3, #0
}
 800016e:	4618      	mov	r0, r3
 8000170:	bd80      	pop	{r7, pc}
 8000172:	bf00      	nop
 8000174:	40022000 	.word	0x40022000

08000178 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000178:	b580      	push	{r7, lr}
 800017a:	b082      	sub	sp, #8
 800017c:	af00      	add	r7, sp, #0
 800017e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000180:	4b12      	ldr	r3, [pc, #72]	; (80001cc <HAL_InitTick+0x54>)
 8000182:	681a      	ldr	r2, [r3, #0]
 8000184:	4b12      	ldr	r3, [pc, #72]	; (80001d0 <HAL_InitTick+0x58>)
 8000186:	781b      	ldrb	r3, [r3, #0]
 8000188:	4619      	mov	r1, r3
 800018a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800018e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000192:	fbb2 f3f3 	udiv	r3, r2, r3
 8000196:	4618      	mov	r0, r3
 8000198:	f000 f959 	bl	800044e <HAL_SYSTICK_Config>
 800019c:	4603      	mov	r3, r0
 800019e:	2b00      	cmp	r3, #0
 80001a0:	d001      	beq.n	80001a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80001a2:	2301      	movs	r3, #1
 80001a4:	e00e      	b.n	80001c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	2b0f      	cmp	r3, #15
 80001aa:	d80a      	bhi.n	80001c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80001ac:	2200      	movs	r2, #0
 80001ae:	6879      	ldr	r1, [r7, #4]
 80001b0:	f04f 30ff 	mov.w	r0, #4294967295
 80001b4:	f000 f921 	bl	80003fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80001b8:	4a06      	ldr	r2, [pc, #24]	; (80001d4 <HAL_InitTick+0x5c>)
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80001be:	2300      	movs	r3, #0
 80001c0:	e000      	b.n	80001c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80001c2:	2301      	movs	r3, #1
}
 80001c4:	4618      	mov	r0, r3
 80001c6:	3708      	adds	r7, #8
 80001c8:	46bd      	mov	sp, r7
 80001ca:	bd80      	pop	{r7, pc}
 80001cc:	20000008 	.word	0x20000008
 80001d0:	20000004 	.word	0x20000004
 80001d4:	20000000 	.word	0x20000000

080001d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80001d8:	b480      	push	{r7}
 80001da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80001dc:	4b05      	ldr	r3, [pc, #20]	; (80001f4 <HAL_IncTick+0x1c>)
 80001de:	781b      	ldrb	r3, [r3, #0]
 80001e0:	461a      	mov	r2, r3
 80001e2:	4b05      	ldr	r3, [pc, #20]	; (80001f8 <HAL_IncTick+0x20>)
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	4413      	add	r3, r2
 80001e8:	4a03      	ldr	r2, [pc, #12]	; (80001f8 <HAL_IncTick+0x20>)
 80001ea:	6013      	str	r3, [r2, #0]
}
 80001ec:	bf00      	nop
 80001ee:	46bd      	mov	sp, r7
 80001f0:	bc80      	pop	{r7}
 80001f2:	4770      	bx	lr
 80001f4:	20000004 	.word	0x20000004
 80001f8:	2000002c 	.word	0x2000002c

080001fc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80001fc:	b480      	push	{r7}
 80001fe:	af00      	add	r7, sp, #0
  return uwTick;
 8000200:	4b02      	ldr	r3, [pc, #8]	; (800020c <HAL_GetTick+0x10>)
 8000202:	681b      	ldr	r3, [r3, #0]
}
 8000204:	4618      	mov	r0, r3
 8000206:	46bd      	mov	sp, r7
 8000208:	bc80      	pop	{r7}
 800020a:	4770      	bx	lr
 800020c:	2000002c 	.word	0x2000002c

08000210 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	b084      	sub	sp, #16
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000218:	f7ff fff0 	bl	80001fc <HAL_GetTick>
 800021c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000222:	68fb      	ldr	r3, [r7, #12]
 8000224:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000228:	d005      	beq.n	8000236 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800022a:	4b09      	ldr	r3, [pc, #36]	; (8000250 <HAL_Delay+0x40>)
 800022c:	781b      	ldrb	r3, [r3, #0]
 800022e:	461a      	mov	r2, r3
 8000230:	68fb      	ldr	r3, [r7, #12]
 8000232:	4413      	add	r3, r2
 8000234:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000236:	bf00      	nop
 8000238:	f7ff ffe0 	bl	80001fc <HAL_GetTick>
 800023c:	4602      	mov	r2, r0
 800023e:	68bb      	ldr	r3, [r7, #8]
 8000240:	1ad3      	subs	r3, r2, r3
 8000242:	68fa      	ldr	r2, [r7, #12]
 8000244:	429a      	cmp	r2, r3
 8000246:	d8f7      	bhi.n	8000238 <HAL_Delay+0x28>
  {
  }
}
 8000248:	bf00      	nop
 800024a:	3710      	adds	r7, #16
 800024c:	46bd      	mov	sp, r7
 800024e:	bd80      	pop	{r7, pc}
 8000250:	20000004 	.word	0x20000004

08000254 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000254:	b480      	push	{r7}
 8000256:	b085      	sub	sp, #20
 8000258:	af00      	add	r7, sp, #0
 800025a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	f003 0307 	and.w	r3, r3, #7
 8000262:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000264:	4b0c      	ldr	r3, [pc, #48]	; (8000298 <NVIC_SetPriorityGrouping+0x44>)
 8000266:	68db      	ldr	r3, [r3, #12]
 8000268:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800026a:	68ba      	ldr	r2, [r7, #8]
 800026c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000270:	4013      	ands	r3, r2
 8000272:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000274:	68fb      	ldr	r3, [r7, #12]
 8000276:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000278:	68bb      	ldr	r3, [r7, #8]
 800027a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800027c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000280:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000284:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000286:	4a04      	ldr	r2, [pc, #16]	; (8000298 <NVIC_SetPriorityGrouping+0x44>)
 8000288:	68bb      	ldr	r3, [r7, #8]
 800028a:	60d3      	str	r3, [r2, #12]
}
 800028c:	bf00      	nop
 800028e:	3714      	adds	r7, #20
 8000290:	46bd      	mov	sp, r7
 8000292:	bc80      	pop	{r7}
 8000294:	4770      	bx	lr
 8000296:	bf00      	nop
 8000298:	e000ed00 	.word	0xe000ed00

0800029c <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 800029c:	b480      	push	{r7}
 800029e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <NVIC_GetPriorityGrouping+0x18>)
 80002a2:	68db      	ldr	r3, [r3, #12]
 80002a4:	0a1b      	lsrs	r3, r3, #8
 80002a6:	f003 0307 	and.w	r3, r3, #7
}
 80002aa:	4618      	mov	r0, r3
 80002ac:	46bd      	mov	sp, r7
 80002ae:	bc80      	pop	{r7}
 80002b0:	4770      	bx	lr
 80002b2:	bf00      	nop
 80002b4:	e000ed00 	.word	0xe000ed00

080002b8 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80002b8:	b480      	push	{r7}
 80002ba:	b083      	sub	sp, #12
 80002bc:	af00      	add	r7, sp, #0
 80002be:	4603      	mov	r3, r0
 80002c0:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80002c2:	79fb      	ldrb	r3, [r7, #7]
 80002c4:	f003 021f 	and.w	r2, r3, #31
 80002c8:	4906      	ldr	r1, [pc, #24]	; (80002e4 <NVIC_EnableIRQ+0x2c>)
 80002ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002ce:	095b      	lsrs	r3, r3, #5
 80002d0:	2001      	movs	r0, #1
 80002d2:	fa00 f202 	lsl.w	r2, r0, r2
 80002d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80002da:	bf00      	nop
 80002dc:	370c      	adds	r7, #12
 80002de:	46bd      	mov	sp, r7
 80002e0:	bc80      	pop	{r7}
 80002e2:	4770      	bx	lr
 80002e4:	e000e100 	.word	0xe000e100

080002e8 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002e8:	b480      	push	{r7}
 80002ea:	b083      	sub	sp, #12
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	4603      	mov	r3, r0
 80002f0:	6039      	str	r1, [r7, #0]
 80002f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 80002f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	da0b      	bge.n	8000314 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002fc:	683b      	ldr	r3, [r7, #0]
 80002fe:	b2da      	uxtb	r2, r3
 8000300:	490c      	ldr	r1, [pc, #48]	; (8000334 <NVIC_SetPriority+0x4c>)
 8000302:	79fb      	ldrb	r3, [r7, #7]
 8000304:	f003 030f 	and.w	r3, r3, #15
 8000308:	3b04      	subs	r3, #4
 800030a:	0112      	lsls	r2, r2, #4
 800030c:	b2d2      	uxtb	r2, r2
 800030e:	440b      	add	r3, r1
 8000310:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000312:	e009      	b.n	8000328 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000314:	683b      	ldr	r3, [r7, #0]
 8000316:	b2da      	uxtb	r2, r3
 8000318:	4907      	ldr	r1, [pc, #28]	; (8000338 <NVIC_SetPriority+0x50>)
 800031a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800031e:	0112      	lsls	r2, r2, #4
 8000320:	b2d2      	uxtb	r2, r2
 8000322:	440b      	add	r3, r1
 8000324:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000328:	bf00      	nop
 800032a:	370c      	adds	r7, #12
 800032c:	46bd      	mov	sp, r7
 800032e:	bc80      	pop	{r7}
 8000330:	4770      	bx	lr
 8000332:	bf00      	nop
 8000334:	e000ed00 	.word	0xe000ed00
 8000338:	e000e100 	.word	0xe000e100

0800033c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800033c:	b480      	push	{r7}
 800033e:	b089      	sub	sp, #36	; 0x24
 8000340:	af00      	add	r7, sp, #0
 8000342:	60f8      	str	r0, [r7, #12]
 8000344:	60b9      	str	r1, [r7, #8]
 8000346:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000348:	68fb      	ldr	r3, [r7, #12]
 800034a:	f003 0307 	and.w	r3, r3, #7
 800034e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000350:	69fb      	ldr	r3, [r7, #28]
 8000352:	f1c3 0307 	rsb	r3, r3, #7
 8000356:	2b04      	cmp	r3, #4
 8000358:	bf28      	it	cs
 800035a:	2304      	movcs	r3, #4
 800035c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800035e:	69fb      	ldr	r3, [r7, #28]
 8000360:	3304      	adds	r3, #4
 8000362:	2b06      	cmp	r3, #6
 8000364:	d902      	bls.n	800036c <NVIC_EncodePriority+0x30>
 8000366:	69fb      	ldr	r3, [r7, #28]
 8000368:	3b03      	subs	r3, #3
 800036a:	e000      	b.n	800036e <NVIC_EncodePriority+0x32>
 800036c:	2300      	movs	r3, #0
 800036e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000370:	f04f 32ff 	mov.w	r2, #4294967295
 8000374:	69bb      	ldr	r3, [r7, #24]
 8000376:	fa02 f303 	lsl.w	r3, r2, r3
 800037a:	43da      	mvns	r2, r3
 800037c:	68bb      	ldr	r3, [r7, #8]
 800037e:	401a      	ands	r2, r3
 8000380:	697b      	ldr	r3, [r7, #20]
 8000382:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000384:	f04f 31ff 	mov.w	r1, #4294967295
 8000388:	697b      	ldr	r3, [r7, #20]
 800038a:	fa01 f303 	lsl.w	r3, r1, r3
 800038e:	43d9      	mvns	r1, r3
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000394:	4313      	orrs	r3, r2
         );
}
 8000396:	4618      	mov	r0, r3
 8000398:	3724      	adds	r7, #36	; 0x24
 800039a:	46bd      	mov	sp, r7
 800039c:	bc80      	pop	{r7}
 800039e:	4770      	bx	lr

080003a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b082      	sub	sp, #8
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	3b01      	subs	r3, #1
 80003ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80003b0:	d301      	bcc.n	80003b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80003b2:	2301      	movs	r3, #1
 80003b4:	e00f      	b.n	80003d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80003b6:	4a0a      	ldr	r2, [pc, #40]	; (80003e0 <SysTick_Config+0x40>)
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	3b01      	subs	r3, #1
 80003bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80003be:	210f      	movs	r1, #15
 80003c0:	f04f 30ff 	mov.w	r0, #4294967295
 80003c4:	f7ff ff90 	bl	80002e8 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80003c8:	4b05      	ldr	r3, [pc, #20]	; (80003e0 <SysTick_Config+0x40>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80003ce:	4b04      	ldr	r3, [pc, #16]	; (80003e0 <SysTick_Config+0x40>)
 80003d0:	2207      	movs	r2, #7
 80003d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80003d4:	2300      	movs	r3, #0
}
 80003d6:	4618      	mov	r0, r3
 80003d8:	3708      	adds	r7, #8
 80003da:	46bd      	mov	sp, r7
 80003dc:	bd80      	pop	{r7, pc}
 80003de:	bf00      	nop
 80003e0:	e000e010 	.word	0xe000e010

080003e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b082      	sub	sp, #8
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80003ec:	6878      	ldr	r0, [r7, #4]
 80003ee:	f7ff ff31 	bl	8000254 <NVIC_SetPriorityGrouping>
}
 80003f2:	bf00      	nop
 80003f4:	3708      	adds	r7, #8
 80003f6:	46bd      	mov	sp, r7
 80003f8:	bd80      	pop	{r7, pc}

080003fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80003fa:	b580      	push	{r7, lr}
 80003fc:	b086      	sub	sp, #24
 80003fe:	af00      	add	r7, sp, #0
 8000400:	4603      	mov	r3, r0
 8000402:	60b9      	str	r1, [r7, #8]
 8000404:	607a      	str	r2, [r7, #4]
 8000406:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000408:	2300      	movs	r3, #0
 800040a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800040c:	f7ff ff46 	bl	800029c <NVIC_GetPriorityGrouping>
 8000410:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000412:	687a      	ldr	r2, [r7, #4]
 8000414:	68b9      	ldr	r1, [r7, #8]
 8000416:	6978      	ldr	r0, [r7, #20]
 8000418:	f7ff ff90 	bl	800033c <NVIC_EncodePriority>
 800041c:	4602      	mov	r2, r0
 800041e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000422:	4611      	mov	r1, r2
 8000424:	4618      	mov	r0, r3
 8000426:	f7ff ff5f 	bl	80002e8 <NVIC_SetPriority>
}
 800042a:	bf00      	nop
 800042c:	3718      	adds	r7, #24
 800042e:	46bd      	mov	sp, r7
 8000430:	bd80      	pop	{r7, pc}

08000432 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000432:	b580      	push	{r7, lr}
 8000434:	b082      	sub	sp, #8
 8000436:	af00      	add	r7, sp, #0
 8000438:	4603      	mov	r3, r0
 800043a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800043c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000440:	4618      	mov	r0, r3
 8000442:	f7ff ff39 	bl	80002b8 <NVIC_EnableIRQ>
}
 8000446:	bf00      	nop
 8000448:	3708      	adds	r7, #8
 800044a:	46bd      	mov	sp, r7
 800044c:	bd80      	pop	{r7, pc}

0800044e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800044e:	b580      	push	{r7, lr}
 8000450:	b082      	sub	sp, #8
 8000452:	af00      	add	r7, sp, #0
 8000454:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000456:	6878      	ldr	r0, [r7, #4]
 8000458:	f7ff ffa2 	bl	80003a0 <SysTick_Config>
 800045c:	4603      	mov	r3, r0
}
 800045e:	4618      	mov	r0, r3
 8000460:	3708      	adds	r7, #8
 8000462:	46bd      	mov	sp, r7
 8000464:	bd80      	pop	{r7, pc}
	...

08000468 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000468:	b480      	push	{r7}
 800046a:	b085      	sub	sp, #20
 800046c:	af00      	add	r7, sp, #0
 800046e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000470:	2300      	movs	r3, #0
 8000472:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	2b00      	cmp	r3, #0
 8000478:	d101      	bne.n	800047e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800047a:	2301      	movs	r3, #1
 800047c:	e043      	b.n	8000506 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	681b      	ldr	r3, [r3, #0]
 8000482:	461a      	mov	r2, r3
 8000484:	4b22      	ldr	r3, [pc, #136]	; (8000510 <HAL_DMA_Init+0xa8>)
 8000486:	4413      	add	r3, r2
 8000488:	4a22      	ldr	r2, [pc, #136]	; (8000514 <HAL_DMA_Init+0xac>)
 800048a:	fba2 2303 	umull	r2, r3, r2, r3
 800048e:	091b      	lsrs	r3, r3, #4
 8000490:	009a      	lsls	r2, r3, #2
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	4a1f      	ldr	r2, [pc, #124]	; (8000518 <HAL_DMA_Init+0xb0>)
 800049a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* STM32F101xE || STM32F101xG || STM32F103xE || STM32F103xG || STM32F100xE || STM32F105xC || STM32F107xC */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	2202      	movs	r2, #2
 80004a0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80004ac:	68fb      	ldr	r3, [r7, #12]
 80004ae:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80004b2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80004b6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80004c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	68db      	ldr	r3, [r3, #12]
 80004c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80004cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	695b      	ldr	r3, [r3, #20]
 80004d2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80004d8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	69db      	ldr	r3, [r3, #28]
 80004de:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80004e0:	68fa      	ldr	r2, [r7, #12]
 80004e2:	4313      	orrs	r3, r2
 80004e4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	68fa      	ldr	r2, [r7, #12]
 80004ec:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	2200      	movs	r2, #0
 80004f2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	2201      	movs	r2, #1
 80004f8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	2200      	movs	r2, #0
 8000500:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000504:	2300      	movs	r3, #0
}
 8000506:	4618      	mov	r0, r3
 8000508:	3714      	adds	r7, #20
 800050a:	46bd      	mov	sp, r7
 800050c:	bc80      	pop	{r7}
 800050e:	4770      	bx	lr
 8000510:	bffdfff8 	.word	0xbffdfff8
 8000514:	cccccccd 	.word	0xcccccccd
 8000518:	40020000 	.word	0x40020000

0800051c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b086      	sub	sp, #24
 8000520:	af00      	add	r7, sp, #0
 8000522:	60f8      	str	r0, [r7, #12]
 8000524:	60b9      	str	r1, [r7, #8]
 8000526:	607a      	str	r2, [r7, #4]
 8000528:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800052a:	2300      	movs	r3, #0
 800052c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800052e:	68fb      	ldr	r3, [r7, #12]
 8000530:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000534:	2b01      	cmp	r3, #1
 8000536:	d101      	bne.n	800053c <HAL_DMA_Start_IT+0x20>
 8000538:	2302      	movs	r3, #2
 800053a:	e04a      	b.n	80005d2 <HAL_DMA_Start_IT+0xb6>
 800053c:	68fb      	ldr	r3, [r7, #12]
 800053e:	2201      	movs	r2, #1
 8000540:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000544:	68fb      	ldr	r3, [r7, #12]
 8000546:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800054a:	2b01      	cmp	r3, #1
 800054c:	d13a      	bne.n	80005c4 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800054e:	68fb      	ldr	r3, [r7, #12]
 8000550:	2202      	movs	r2, #2
 8000552:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000556:	68fb      	ldr	r3, [r7, #12]
 8000558:	2200      	movs	r2, #0
 800055a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800055c:	68fb      	ldr	r3, [r7, #12]
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	681a      	ldr	r2, [r3, #0]
 8000562:	68fb      	ldr	r3, [r7, #12]
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	f022 0201 	bic.w	r2, r2, #1
 800056a:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800056c:	683b      	ldr	r3, [r7, #0]
 800056e:	687a      	ldr	r2, [r7, #4]
 8000570:	68b9      	ldr	r1, [r7, #8]
 8000572:	68f8      	ldr	r0, [r7, #12]
 8000574:	f000 f9ae 	bl	80008d4 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8000578:	68fb      	ldr	r3, [r7, #12]
 800057a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800057c:	2b00      	cmp	r3, #0
 800057e:	d008      	beq.n	8000592 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000580:	68fb      	ldr	r3, [r7, #12]
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	681a      	ldr	r2, [r3, #0]
 8000586:	68fb      	ldr	r3, [r7, #12]
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	f042 020e 	orr.w	r2, r2, #14
 800058e:	601a      	str	r2, [r3, #0]
 8000590:	e00f      	b.n	80005b2 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000592:	68fb      	ldr	r3, [r7, #12]
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	681a      	ldr	r2, [r3, #0]
 8000598:	68fb      	ldr	r3, [r7, #12]
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	f022 0204 	bic.w	r2, r2, #4
 80005a0:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80005a2:	68fb      	ldr	r3, [r7, #12]
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	681a      	ldr	r2, [r3, #0]
 80005a8:	68fb      	ldr	r3, [r7, #12]
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	f042 020a 	orr.w	r2, r2, #10
 80005b0:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80005b2:	68fb      	ldr	r3, [r7, #12]
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	681a      	ldr	r2, [r3, #0]
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	f042 0201 	orr.w	r2, r2, #1
 80005c0:	601a      	str	r2, [r3, #0]
 80005c2:	e005      	b.n	80005d0 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80005c4:	68fb      	ldr	r3, [r7, #12]
 80005c6:	2200      	movs	r2, #0
 80005c8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80005cc:	2302      	movs	r3, #2
 80005ce:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80005d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80005d2:	4618      	mov	r0, r3
 80005d4:	3718      	adds	r7, #24
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}
	...

080005dc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80005dc:	b580      	push	{r7, lr}
 80005de:	b084      	sub	sp, #16
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80005e4:	2300      	movs	r3, #0
 80005e6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80005ee:	2b02      	cmp	r3, #2
 80005f0:	d005      	beq.n	80005fe <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	2204      	movs	r2, #4
 80005f6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80005f8:	2301      	movs	r3, #1
 80005fa:	73fb      	strb	r3, [r7, #15]
 80005fc:	e051      	b.n	80006a2 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	681a      	ldr	r2, [r3, #0]
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	f022 020e 	bic.w	r2, r2, #14
 800060c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	681a      	ldr	r2, [r3, #0]
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	f022 0201 	bic.w	r2, r2, #1
 800061c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	4a22      	ldr	r2, [pc, #136]	; (80006ac <HAL_DMA_Abort_IT+0xd0>)
 8000624:	4293      	cmp	r3, r2
 8000626:	d029      	beq.n	800067c <HAL_DMA_Abort_IT+0xa0>
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	4a20      	ldr	r2, [pc, #128]	; (80006b0 <HAL_DMA_Abort_IT+0xd4>)
 800062e:	4293      	cmp	r3, r2
 8000630:	d022      	beq.n	8000678 <HAL_DMA_Abort_IT+0x9c>
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	4a1f      	ldr	r2, [pc, #124]	; (80006b4 <HAL_DMA_Abort_IT+0xd8>)
 8000638:	4293      	cmp	r3, r2
 800063a:	d01a      	beq.n	8000672 <HAL_DMA_Abort_IT+0x96>
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	4a1d      	ldr	r2, [pc, #116]	; (80006b8 <HAL_DMA_Abort_IT+0xdc>)
 8000642:	4293      	cmp	r3, r2
 8000644:	d012      	beq.n	800066c <HAL_DMA_Abort_IT+0x90>
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	4a1c      	ldr	r2, [pc, #112]	; (80006bc <HAL_DMA_Abort_IT+0xe0>)
 800064c:	4293      	cmp	r3, r2
 800064e:	d00a      	beq.n	8000666 <HAL_DMA_Abort_IT+0x8a>
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	4a1a      	ldr	r2, [pc, #104]	; (80006c0 <HAL_DMA_Abort_IT+0xe4>)
 8000656:	4293      	cmp	r3, r2
 8000658:	d102      	bne.n	8000660 <HAL_DMA_Abort_IT+0x84>
 800065a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800065e:	e00e      	b.n	800067e <HAL_DMA_Abort_IT+0xa2>
 8000660:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000664:	e00b      	b.n	800067e <HAL_DMA_Abort_IT+0xa2>
 8000666:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800066a:	e008      	b.n	800067e <HAL_DMA_Abort_IT+0xa2>
 800066c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000670:	e005      	b.n	800067e <HAL_DMA_Abort_IT+0xa2>
 8000672:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000676:	e002      	b.n	800067e <HAL_DMA_Abort_IT+0xa2>
 8000678:	2310      	movs	r3, #16
 800067a:	e000      	b.n	800067e <HAL_DMA_Abort_IT+0xa2>
 800067c:	2301      	movs	r3, #1
 800067e:	4a11      	ldr	r2, [pc, #68]	; (80006c4 <HAL_DMA_Abort_IT+0xe8>)
 8000680:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	2201      	movs	r2, #1
 8000686:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	2200      	movs	r2, #0
 800068e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000696:	2b00      	cmp	r3, #0
 8000698:	d003      	beq.n	80006a2 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800069e:	6878      	ldr	r0, [r7, #4]
 80006a0:	4798      	blx	r3
    } 
  }
  return status;
 80006a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80006a4:	4618      	mov	r0, r3
 80006a6:	3710      	adds	r7, #16
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	40020008 	.word	0x40020008
 80006b0:	4002001c 	.word	0x4002001c
 80006b4:	40020030 	.word	0x40020030
 80006b8:	40020044 	.word	0x40020044
 80006bc:	40020058 	.word	0x40020058
 80006c0:	4002006c 	.word	0x4002006c
 80006c4:	40020000 	.word	0x40020000

080006c8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b084      	sub	sp, #16
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e4:	2204      	movs	r2, #4
 80006e6:	409a      	lsls	r2, r3
 80006e8:	68fb      	ldr	r3, [r7, #12]
 80006ea:	4013      	ands	r3, r2
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d04f      	beq.n	8000790 <HAL_DMA_IRQHandler+0xc8>
 80006f0:	68bb      	ldr	r3, [r7, #8]
 80006f2:	f003 0304 	and.w	r3, r3, #4
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d04a      	beq.n	8000790 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	f003 0320 	and.w	r3, r3, #32
 8000704:	2b00      	cmp	r3, #0
 8000706:	d107      	bne.n	8000718 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	681a      	ldr	r2, [r3, #0]
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	f022 0204 	bic.w	r2, r2, #4
 8000716:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	4a66      	ldr	r2, [pc, #408]	; (80008b8 <HAL_DMA_IRQHandler+0x1f0>)
 800071e:	4293      	cmp	r3, r2
 8000720:	d029      	beq.n	8000776 <HAL_DMA_IRQHandler+0xae>
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	4a65      	ldr	r2, [pc, #404]	; (80008bc <HAL_DMA_IRQHandler+0x1f4>)
 8000728:	4293      	cmp	r3, r2
 800072a:	d022      	beq.n	8000772 <HAL_DMA_IRQHandler+0xaa>
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	4a63      	ldr	r2, [pc, #396]	; (80008c0 <HAL_DMA_IRQHandler+0x1f8>)
 8000732:	4293      	cmp	r3, r2
 8000734:	d01a      	beq.n	800076c <HAL_DMA_IRQHandler+0xa4>
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	4a62      	ldr	r2, [pc, #392]	; (80008c4 <HAL_DMA_IRQHandler+0x1fc>)
 800073c:	4293      	cmp	r3, r2
 800073e:	d012      	beq.n	8000766 <HAL_DMA_IRQHandler+0x9e>
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	4a60      	ldr	r2, [pc, #384]	; (80008c8 <HAL_DMA_IRQHandler+0x200>)
 8000746:	4293      	cmp	r3, r2
 8000748:	d00a      	beq.n	8000760 <HAL_DMA_IRQHandler+0x98>
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	4a5f      	ldr	r2, [pc, #380]	; (80008cc <HAL_DMA_IRQHandler+0x204>)
 8000750:	4293      	cmp	r3, r2
 8000752:	d102      	bne.n	800075a <HAL_DMA_IRQHandler+0x92>
 8000754:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000758:	e00e      	b.n	8000778 <HAL_DMA_IRQHandler+0xb0>
 800075a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800075e:	e00b      	b.n	8000778 <HAL_DMA_IRQHandler+0xb0>
 8000760:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000764:	e008      	b.n	8000778 <HAL_DMA_IRQHandler+0xb0>
 8000766:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800076a:	e005      	b.n	8000778 <HAL_DMA_IRQHandler+0xb0>
 800076c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000770:	e002      	b.n	8000778 <HAL_DMA_IRQHandler+0xb0>
 8000772:	2340      	movs	r3, #64	; 0x40
 8000774:	e000      	b.n	8000778 <HAL_DMA_IRQHandler+0xb0>
 8000776:	2304      	movs	r3, #4
 8000778:	4a55      	ldr	r2, [pc, #340]	; (80008d0 <HAL_DMA_IRQHandler+0x208>)
 800077a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000780:	2b00      	cmp	r3, #0
 8000782:	f000 8094 	beq.w	80008ae <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800078a:	6878      	ldr	r0, [r7, #4]
 800078c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800078e:	e08e      	b.n	80008ae <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000794:	2202      	movs	r2, #2
 8000796:	409a      	lsls	r2, r3
 8000798:	68fb      	ldr	r3, [r7, #12]
 800079a:	4013      	ands	r3, r2
 800079c:	2b00      	cmp	r3, #0
 800079e:	d056      	beq.n	800084e <HAL_DMA_IRQHandler+0x186>
 80007a0:	68bb      	ldr	r3, [r7, #8]
 80007a2:	f003 0302 	and.w	r3, r3, #2
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d051      	beq.n	800084e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	f003 0320 	and.w	r3, r3, #32
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d10b      	bne.n	80007d0 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	681a      	ldr	r2, [r3, #0]
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	f022 020a 	bic.w	r2, r2, #10
 80007c6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	2201      	movs	r2, #1
 80007cc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	4a38      	ldr	r2, [pc, #224]	; (80008b8 <HAL_DMA_IRQHandler+0x1f0>)
 80007d6:	4293      	cmp	r3, r2
 80007d8:	d029      	beq.n	800082e <HAL_DMA_IRQHandler+0x166>
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	4a37      	ldr	r2, [pc, #220]	; (80008bc <HAL_DMA_IRQHandler+0x1f4>)
 80007e0:	4293      	cmp	r3, r2
 80007e2:	d022      	beq.n	800082a <HAL_DMA_IRQHandler+0x162>
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	4a35      	ldr	r2, [pc, #212]	; (80008c0 <HAL_DMA_IRQHandler+0x1f8>)
 80007ea:	4293      	cmp	r3, r2
 80007ec:	d01a      	beq.n	8000824 <HAL_DMA_IRQHandler+0x15c>
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	4a34      	ldr	r2, [pc, #208]	; (80008c4 <HAL_DMA_IRQHandler+0x1fc>)
 80007f4:	4293      	cmp	r3, r2
 80007f6:	d012      	beq.n	800081e <HAL_DMA_IRQHandler+0x156>
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	4a32      	ldr	r2, [pc, #200]	; (80008c8 <HAL_DMA_IRQHandler+0x200>)
 80007fe:	4293      	cmp	r3, r2
 8000800:	d00a      	beq.n	8000818 <HAL_DMA_IRQHandler+0x150>
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	4a31      	ldr	r2, [pc, #196]	; (80008cc <HAL_DMA_IRQHandler+0x204>)
 8000808:	4293      	cmp	r3, r2
 800080a:	d102      	bne.n	8000812 <HAL_DMA_IRQHandler+0x14a>
 800080c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000810:	e00e      	b.n	8000830 <HAL_DMA_IRQHandler+0x168>
 8000812:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000816:	e00b      	b.n	8000830 <HAL_DMA_IRQHandler+0x168>
 8000818:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800081c:	e008      	b.n	8000830 <HAL_DMA_IRQHandler+0x168>
 800081e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000822:	e005      	b.n	8000830 <HAL_DMA_IRQHandler+0x168>
 8000824:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000828:	e002      	b.n	8000830 <HAL_DMA_IRQHandler+0x168>
 800082a:	2320      	movs	r3, #32
 800082c:	e000      	b.n	8000830 <HAL_DMA_IRQHandler+0x168>
 800082e:	2302      	movs	r3, #2
 8000830:	4a27      	ldr	r2, [pc, #156]	; (80008d0 <HAL_DMA_IRQHandler+0x208>)
 8000832:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	2200      	movs	r2, #0
 8000838:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000840:	2b00      	cmp	r3, #0
 8000842:	d034      	beq.n	80008ae <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000848:	6878      	ldr	r0, [r7, #4]
 800084a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800084c:	e02f      	b.n	80008ae <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000852:	2208      	movs	r2, #8
 8000854:	409a      	lsls	r2, r3
 8000856:	68fb      	ldr	r3, [r7, #12]
 8000858:	4013      	ands	r3, r2
 800085a:	2b00      	cmp	r3, #0
 800085c:	d028      	beq.n	80008b0 <HAL_DMA_IRQHandler+0x1e8>
 800085e:	68bb      	ldr	r3, [r7, #8]
 8000860:	f003 0308 	and.w	r3, r3, #8
 8000864:	2b00      	cmp	r3, #0
 8000866:	d023      	beq.n	80008b0 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	681a      	ldr	r2, [r3, #0]
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	f022 020e 	bic.w	r2, r2, #14
 8000876:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000880:	2101      	movs	r1, #1
 8000882:	fa01 f202 	lsl.w	r2, r1, r2
 8000886:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	2201      	movs	r2, #1
 800088c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	2201      	movs	r2, #1
 8000892:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	2200      	movs	r2, #0
 800089a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d004      	beq.n	80008b0 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008aa:	6878      	ldr	r0, [r7, #4]
 80008ac:	4798      	blx	r3
    }
  }
  return;
 80008ae:	bf00      	nop
 80008b0:	bf00      	nop
}
 80008b2:	3710      	adds	r7, #16
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	40020008 	.word	0x40020008
 80008bc:	4002001c 	.word	0x4002001c
 80008c0:	40020030 	.word	0x40020030
 80008c4:	40020044 	.word	0x40020044
 80008c8:	40020058 	.word	0x40020058
 80008cc:	4002006c 	.word	0x4002006c
 80008d0:	40020000 	.word	0x40020000

080008d4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80008d4:	b480      	push	{r7}
 80008d6:	b085      	sub	sp, #20
 80008d8:	af00      	add	r7, sp, #0
 80008da:	60f8      	str	r0, [r7, #12]
 80008dc:	60b9      	str	r1, [r7, #8]
 80008de:	607a      	str	r2, [r7, #4]
 80008e0:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80008e2:	68fb      	ldr	r3, [r7, #12]
 80008e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80008e6:	68fb      	ldr	r3, [r7, #12]
 80008e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80008ea:	2101      	movs	r1, #1
 80008ec:	fa01 f202 	lsl.w	r2, r1, r2
 80008f0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80008f2:	68fb      	ldr	r3, [r7, #12]
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	683a      	ldr	r2, [r7, #0]
 80008f8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80008fa:	68fb      	ldr	r3, [r7, #12]
 80008fc:	685b      	ldr	r3, [r3, #4]
 80008fe:	2b10      	cmp	r3, #16
 8000900:	d108      	bne.n	8000914 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000902:	68fb      	ldr	r3, [r7, #12]
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	687a      	ldr	r2, [r7, #4]
 8000908:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800090a:	68fb      	ldr	r3, [r7, #12]
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	68ba      	ldr	r2, [r7, #8]
 8000910:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8000912:	e007      	b.n	8000924 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8000914:	68fb      	ldr	r3, [r7, #12]
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	68ba      	ldr	r2, [r7, #8]
 800091a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800091c:	68fb      	ldr	r3, [r7, #12]
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	687a      	ldr	r2, [r7, #4]
 8000922:	60da      	str	r2, [r3, #12]
}
 8000924:	bf00      	nop
 8000926:	3714      	adds	r7, #20
 8000928:	46bd      	mov	sp, r7
 800092a:	bc80      	pop	{r7}
 800092c:	4770      	bx	lr
	...

08000930 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000930:	b480      	push	{r7}
 8000932:	b08b      	sub	sp, #44	; 0x2c
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
 8000938:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800093a:	2300      	movs	r3, #0
 800093c:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent = 0x00U;
 800093e:	2300      	movs	r3, #0
 8000940:	61bb      	str	r3, [r7, #24]
  uint32_t temp = 0x00U;
 8000942:	2300      	movs	r3, #0
 8000944:	617b      	str	r3, [r7, #20]
  uint32_t config = 0x00U;
 8000946:	2300      	movs	r3, #0
 8000948:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset = 0U; /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */
 800094a:	2300      	movs	r3, #0
 800094c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 800094e:	2300      	movs	r3, #0
 8000950:	627b      	str	r3, [r7, #36]	; 0x24
 8000952:	e127      	b.n	8000ba4 <HAL_GPIO_Init+0x274>
  {
    /* Get the IO position */
    ioposition = (0x01U << position);
 8000954:	2201      	movs	r2, #1
 8000956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000958:	fa02 f303 	lsl.w	r3, r2, r3
 800095c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800095e:	683b      	ldr	r3, [r7, #0]
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	69fa      	ldr	r2, [r7, #28]
 8000964:	4013      	ands	r3, r2
 8000966:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000968:	69ba      	ldr	r2, [r7, #24]
 800096a:	69fb      	ldr	r3, [r7, #28]
 800096c:	429a      	cmp	r2, r3
 800096e:	f040 8116 	bne.w	8000b9e <HAL_GPIO_Init+0x26e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000972:	683b      	ldr	r3, [r7, #0]
 8000974:	685b      	ldr	r3, [r3, #4]
 8000976:	2b12      	cmp	r3, #18
 8000978:	d034      	beq.n	80009e4 <HAL_GPIO_Init+0xb4>
 800097a:	2b12      	cmp	r3, #18
 800097c:	d80d      	bhi.n	800099a <HAL_GPIO_Init+0x6a>
 800097e:	2b02      	cmp	r3, #2
 8000980:	d02b      	beq.n	80009da <HAL_GPIO_Init+0xaa>
 8000982:	2b02      	cmp	r3, #2
 8000984:	d804      	bhi.n	8000990 <HAL_GPIO_Init+0x60>
 8000986:	2b00      	cmp	r3, #0
 8000988:	d031      	beq.n	80009ee <HAL_GPIO_Init+0xbe>
 800098a:	2b01      	cmp	r3, #1
 800098c:	d01c      	beq.n	80009c8 <HAL_GPIO_Init+0x98>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800098e:	e048      	b.n	8000a22 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8000990:	2b03      	cmp	r3, #3
 8000992:	d043      	beq.n	8000a1c <HAL_GPIO_Init+0xec>
 8000994:	2b11      	cmp	r3, #17
 8000996:	d01b      	beq.n	80009d0 <HAL_GPIO_Init+0xa0>
          break;
 8000998:	e043      	b.n	8000a22 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 800099a:	4a87      	ldr	r2, [pc, #540]	; (8000bb8 <HAL_GPIO_Init+0x288>)
 800099c:	4293      	cmp	r3, r2
 800099e:	d026      	beq.n	80009ee <HAL_GPIO_Init+0xbe>
 80009a0:	4a85      	ldr	r2, [pc, #532]	; (8000bb8 <HAL_GPIO_Init+0x288>)
 80009a2:	4293      	cmp	r3, r2
 80009a4:	d806      	bhi.n	80009b4 <HAL_GPIO_Init+0x84>
 80009a6:	4a85      	ldr	r2, [pc, #532]	; (8000bbc <HAL_GPIO_Init+0x28c>)
 80009a8:	4293      	cmp	r3, r2
 80009aa:	d020      	beq.n	80009ee <HAL_GPIO_Init+0xbe>
 80009ac:	4a84      	ldr	r2, [pc, #528]	; (8000bc0 <HAL_GPIO_Init+0x290>)
 80009ae:	4293      	cmp	r3, r2
 80009b0:	d01d      	beq.n	80009ee <HAL_GPIO_Init+0xbe>
          break;
 80009b2:	e036      	b.n	8000a22 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 80009b4:	4a83      	ldr	r2, [pc, #524]	; (8000bc4 <HAL_GPIO_Init+0x294>)
 80009b6:	4293      	cmp	r3, r2
 80009b8:	d019      	beq.n	80009ee <HAL_GPIO_Init+0xbe>
 80009ba:	4a83      	ldr	r2, [pc, #524]	; (8000bc8 <HAL_GPIO_Init+0x298>)
 80009bc:	4293      	cmp	r3, r2
 80009be:	d016      	beq.n	80009ee <HAL_GPIO_Init+0xbe>
 80009c0:	4a82      	ldr	r2, [pc, #520]	; (8000bcc <HAL_GPIO_Init+0x29c>)
 80009c2:	4293      	cmp	r3, r2
 80009c4:	d013      	beq.n	80009ee <HAL_GPIO_Init+0xbe>
          break;
 80009c6:	e02c      	b.n	8000a22 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80009c8:	683b      	ldr	r3, [r7, #0]
 80009ca:	68db      	ldr	r3, [r3, #12]
 80009cc:	623b      	str	r3, [r7, #32]
          break;
 80009ce:	e028      	b.n	8000a22 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80009d0:	683b      	ldr	r3, [r7, #0]
 80009d2:	68db      	ldr	r3, [r3, #12]
 80009d4:	3304      	adds	r3, #4
 80009d6:	623b      	str	r3, [r7, #32]
          break;
 80009d8:	e023      	b.n	8000a22 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80009da:	683b      	ldr	r3, [r7, #0]
 80009dc:	68db      	ldr	r3, [r3, #12]
 80009de:	3308      	adds	r3, #8
 80009e0:	623b      	str	r3, [r7, #32]
          break;
 80009e2:	e01e      	b.n	8000a22 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80009e4:	683b      	ldr	r3, [r7, #0]
 80009e6:	68db      	ldr	r3, [r3, #12]
 80009e8:	330c      	adds	r3, #12
 80009ea:	623b      	str	r3, [r7, #32]
          break;
 80009ec:	e019      	b.n	8000a22 <HAL_GPIO_Init+0xf2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80009ee:	683b      	ldr	r3, [r7, #0]
 80009f0:	689b      	ldr	r3, [r3, #8]
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d102      	bne.n	80009fc <HAL_GPIO_Init+0xcc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80009f6:	2304      	movs	r3, #4
 80009f8:	623b      	str	r3, [r7, #32]
          break;
 80009fa:	e012      	b.n	8000a22 <HAL_GPIO_Init+0xf2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80009fc:	683b      	ldr	r3, [r7, #0]
 80009fe:	689b      	ldr	r3, [r3, #8]
 8000a00:	2b01      	cmp	r3, #1
 8000a02:	d105      	bne.n	8000a10 <HAL_GPIO_Init+0xe0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a04:	2308      	movs	r3, #8
 8000a06:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	69fa      	ldr	r2, [r7, #28]
 8000a0c:	611a      	str	r2, [r3, #16]
          break;
 8000a0e:	e008      	b.n	8000a22 <HAL_GPIO_Init+0xf2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a10:	2308      	movs	r3, #8
 8000a12:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	69fa      	ldr	r2, [r7, #28]
 8000a18:	615a      	str	r2, [r3, #20]
          break;
 8000a1a:	e002      	b.n	8000a22 <HAL_GPIO_Init+0xf2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	623b      	str	r3, [r7, #32]
          break;
 8000a20:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000a22:	69bb      	ldr	r3, [r7, #24]
 8000a24:	2bff      	cmp	r3, #255	; 0xff
 8000a26:	d801      	bhi.n	8000a2c <HAL_GPIO_Init+0xfc>
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	e001      	b.n	8000a30 <HAL_GPIO_Init+0x100>
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	3304      	adds	r3, #4
 8000a30:	60fb      	str	r3, [r7, #12]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 8000a32:	69bb      	ldr	r3, [r7, #24]
 8000a34:	2bff      	cmp	r3, #255	; 0xff
 8000a36:	d802      	bhi.n	8000a3e <HAL_GPIO_Init+0x10e>
 8000a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a3a:	009b      	lsls	r3, r3, #2
 8000a3c:	e002      	b.n	8000a44 <HAL_GPIO_Init+0x114>
 8000a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a40:	3b08      	subs	r3, #8
 8000a42:	009b      	lsls	r3, r3, #2
 8000a44:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	681a      	ldr	r2, [r3, #0]
 8000a4a:	210f      	movs	r1, #15
 8000a4c:	693b      	ldr	r3, [r7, #16]
 8000a4e:	fa01 f303 	lsl.w	r3, r1, r3
 8000a52:	43db      	mvns	r3, r3
 8000a54:	401a      	ands	r2, r3
 8000a56:	6a39      	ldr	r1, [r7, #32]
 8000a58:	693b      	ldr	r3, [r7, #16]
 8000a5a:	fa01 f303 	lsl.w	r3, r1, r3
 8000a5e:	431a      	orrs	r2, r3
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a64:	683b      	ldr	r3, [r7, #0]
 8000a66:	685b      	ldr	r3, [r3, #4]
 8000a68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	f000 8096 	beq.w	8000b9e <HAL_GPIO_Init+0x26e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000a72:	4b57      	ldr	r3, [pc, #348]	; (8000bd0 <HAL_GPIO_Init+0x2a0>)
 8000a74:	699b      	ldr	r3, [r3, #24]
 8000a76:	4a56      	ldr	r2, [pc, #344]	; (8000bd0 <HAL_GPIO_Init+0x2a0>)
 8000a78:	f043 0301 	orr.w	r3, r3, #1
 8000a7c:	6193      	str	r3, [r2, #24]
 8000a7e:	4b54      	ldr	r3, [pc, #336]	; (8000bd0 <HAL_GPIO_Init+0x2a0>)
 8000a80:	699b      	ldr	r3, [r3, #24]
 8000a82:	f003 0301 	and.w	r3, r3, #1
 8000a86:	60bb      	str	r3, [r7, #8]
 8000a88:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2U];
 8000a8a:	4a52      	ldr	r2, [pc, #328]	; (8000bd4 <HAL_GPIO_Init+0x2a4>)
 8000a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a8e:	089b      	lsrs	r3, r3, #2
 8000a90:	3302      	adds	r3, #2
 8000a92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a96:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a9a:	f003 0303 	and.w	r3, r3, #3
 8000a9e:	009b      	lsls	r3, r3, #2
 8000aa0:	220f      	movs	r2, #15
 8000aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa6:	43db      	mvns	r3, r3
 8000aa8:	697a      	ldr	r2, [r7, #20]
 8000aaa:	4013      	ands	r3, r2
 8000aac:	617b      	str	r3, [r7, #20]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	4a49      	ldr	r2, [pc, #292]	; (8000bd8 <HAL_GPIO_Init+0x2a8>)
 8000ab2:	4293      	cmp	r3, r2
 8000ab4:	d013      	beq.n	8000ade <HAL_GPIO_Init+0x1ae>
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	4a48      	ldr	r2, [pc, #288]	; (8000bdc <HAL_GPIO_Init+0x2ac>)
 8000aba:	4293      	cmp	r3, r2
 8000abc:	d00d      	beq.n	8000ada <HAL_GPIO_Init+0x1aa>
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	4a47      	ldr	r2, [pc, #284]	; (8000be0 <HAL_GPIO_Init+0x2b0>)
 8000ac2:	4293      	cmp	r3, r2
 8000ac4:	d007      	beq.n	8000ad6 <HAL_GPIO_Init+0x1a6>
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	4a46      	ldr	r2, [pc, #280]	; (8000be4 <HAL_GPIO_Init+0x2b4>)
 8000aca:	4293      	cmp	r3, r2
 8000acc:	d101      	bne.n	8000ad2 <HAL_GPIO_Init+0x1a2>
 8000ace:	2303      	movs	r3, #3
 8000ad0:	e006      	b.n	8000ae0 <HAL_GPIO_Init+0x1b0>
 8000ad2:	2304      	movs	r3, #4
 8000ad4:	e004      	b.n	8000ae0 <HAL_GPIO_Init+0x1b0>
 8000ad6:	2302      	movs	r3, #2
 8000ad8:	e002      	b.n	8000ae0 <HAL_GPIO_Init+0x1b0>
 8000ada:	2301      	movs	r3, #1
 8000adc:	e000      	b.n	8000ae0 <HAL_GPIO_Init+0x1b0>
 8000ade:	2300      	movs	r3, #0
 8000ae0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ae2:	f002 0203 	and.w	r2, r2, #3
 8000ae6:	0092      	lsls	r2, r2, #2
 8000ae8:	4093      	lsls	r3, r2
 8000aea:	697a      	ldr	r2, [r7, #20]
 8000aec:	4313      	orrs	r3, r2
 8000aee:	617b      	str	r3, [r7, #20]
        AFIO->EXTICR[position >> 2U] = temp;
 8000af0:	4938      	ldr	r1, [pc, #224]	; (8000bd4 <HAL_GPIO_Init+0x2a4>)
 8000af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000af4:	089b      	lsrs	r3, r3, #2
 8000af6:	3302      	adds	r3, #2
 8000af8:	697a      	ldr	r2, [r7, #20]
 8000afa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000afe:	683b      	ldr	r3, [r7, #0]
 8000b00:	685b      	ldr	r3, [r3, #4]
 8000b02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d006      	beq.n	8000b18 <HAL_GPIO_Init+0x1e8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000b0a:	4b37      	ldr	r3, [pc, #220]	; (8000be8 <HAL_GPIO_Init+0x2b8>)
 8000b0c:	681a      	ldr	r2, [r3, #0]
 8000b0e:	4936      	ldr	r1, [pc, #216]	; (8000be8 <HAL_GPIO_Init+0x2b8>)
 8000b10:	69bb      	ldr	r3, [r7, #24]
 8000b12:	4313      	orrs	r3, r2
 8000b14:	600b      	str	r3, [r1, #0]
 8000b16:	e006      	b.n	8000b26 <HAL_GPIO_Init+0x1f6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000b18:	4b33      	ldr	r3, [pc, #204]	; (8000be8 <HAL_GPIO_Init+0x2b8>)
 8000b1a:	681a      	ldr	r2, [r3, #0]
 8000b1c:	69bb      	ldr	r3, [r7, #24]
 8000b1e:	43db      	mvns	r3, r3
 8000b20:	4931      	ldr	r1, [pc, #196]	; (8000be8 <HAL_GPIO_Init+0x2b8>)
 8000b22:	4013      	ands	r3, r2
 8000b24:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b26:	683b      	ldr	r3, [r7, #0]
 8000b28:	685b      	ldr	r3, [r3, #4]
 8000b2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d006      	beq.n	8000b40 <HAL_GPIO_Init+0x210>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000b32:	4b2d      	ldr	r3, [pc, #180]	; (8000be8 <HAL_GPIO_Init+0x2b8>)
 8000b34:	685a      	ldr	r2, [r3, #4]
 8000b36:	492c      	ldr	r1, [pc, #176]	; (8000be8 <HAL_GPIO_Init+0x2b8>)
 8000b38:	69bb      	ldr	r3, [r7, #24]
 8000b3a:	4313      	orrs	r3, r2
 8000b3c:	604b      	str	r3, [r1, #4]
 8000b3e:	e006      	b.n	8000b4e <HAL_GPIO_Init+0x21e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000b40:	4b29      	ldr	r3, [pc, #164]	; (8000be8 <HAL_GPIO_Init+0x2b8>)
 8000b42:	685a      	ldr	r2, [r3, #4]
 8000b44:	69bb      	ldr	r3, [r7, #24]
 8000b46:	43db      	mvns	r3, r3
 8000b48:	4927      	ldr	r1, [pc, #156]	; (8000be8 <HAL_GPIO_Init+0x2b8>)
 8000b4a:	4013      	ands	r3, r2
 8000b4c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b4e:	683b      	ldr	r3, [r7, #0]
 8000b50:	685b      	ldr	r3, [r3, #4]
 8000b52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d006      	beq.n	8000b68 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000b5a:	4b23      	ldr	r3, [pc, #140]	; (8000be8 <HAL_GPIO_Init+0x2b8>)
 8000b5c:	689a      	ldr	r2, [r3, #8]
 8000b5e:	4922      	ldr	r1, [pc, #136]	; (8000be8 <HAL_GPIO_Init+0x2b8>)
 8000b60:	69bb      	ldr	r3, [r7, #24]
 8000b62:	4313      	orrs	r3, r2
 8000b64:	608b      	str	r3, [r1, #8]
 8000b66:	e006      	b.n	8000b76 <HAL_GPIO_Init+0x246>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000b68:	4b1f      	ldr	r3, [pc, #124]	; (8000be8 <HAL_GPIO_Init+0x2b8>)
 8000b6a:	689a      	ldr	r2, [r3, #8]
 8000b6c:	69bb      	ldr	r3, [r7, #24]
 8000b6e:	43db      	mvns	r3, r3
 8000b70:	491d      	ldr	r1, [pc, #116]	; (8000be8 <HAL_GPIO_Init+0x2b8>)
 8000b72:	4013      	ands	r3, r2
 8000b74:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b76:	683b      	ldr	r3, [r7, #0]
 8000b78:	685b      	ldr	r3, [r3, #4]
 8000b7a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d006      	beq.n	8000b90 <HAL_GPIO_Init+0x260>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000b82:	4b19      	ldr	r3, [pc, #100]	; (8000be8 <HAL_GPIO_Init+0x2b8>)
 8000b84:	68da      	ldr	r2, [r3, #12]
 8000b86:	4918      	ldr	r1, [pc, #96]	; (8000be8 <HAL_GPIO_Init+0x2b8>)
 8000b88:	69bb      	ldr	r3, [r7, #24]
 8000b8a:	4313      	orrs	r3, r2
 8000b8c:	60cb      	str	r3, [r1, #12]
 8000b8e:	e006      	b.n	8000b9e <HAL_GPIO_Init+0x26e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000b90:	4b15      	ldr	r3, [pc, #84]	; (8000be8 <HAL_GPIO_Init+0x2b8>)
 8000b92:	68da      	ldr	r2, [r3, #12]
 8000b94:	69bb      	ldr	r3, [r7, #24]
 8000b96:	43db      	mvns	r3, r3
 8000b98:	4913      	ldr	r1, [pc, #76]	; (8000be8 <HAL_GPIO_Init+0x2b8>)
 8000b9a:	4013      	ands	r3, r2
 8000b9c:	60cb      	str	r3, [r1, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ba0:	3301      	adds	r3, #1
 8000ba2:	627b      	str	r3, [r7, #36]	; 0x24
 8000ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ba6:	2b0f      	cmp	r3, #15
 8000ba8:	f67f aed4 	bls.w	8000954 <HAL_GPIO_Init+0x24>
        }
      }
    }
  }
}
 8000bac:	bf00      	nop
 8000bae:	372c      	adds	r7, #44	; 0x2c
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bc80      	pop	{r7}
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop
 8000bb8:	10210000 	.word	0x10210000
 8000bbc:	10110000 	.word	0x10110000
 8000bc0:	10120000 	.word	0x10120000
 8000bc4:	10310000 	.word	0x10310000
 8000bc8:	10320000 	.word	0x10320000
 8000bcc:	10220000 	.word	0x10220000
 8000bd0:	40021000 	.word	0x40021000
 8000bd4:	40010000 	.word	0x40010000
 8000bd8:	40010800 	.word	0x40010800
 8000bdc:	40010c00 	.word	0x40010c00
 8000be0:	40011000 	.word	0x40011000
 8000be4:	40011400 	.word	0x40011400
 8000be8:	40010400 	.word	0x40010400

08000bec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b085      	sub	sp, #20
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
 8000bf4:	460b      	mov	r3, r1
 8000bf6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	689a      	ldr	r2, [r3, #8]
 8000bfc:	887b      	ldrh	r3, [r7, #2]
 8000bfe:	4013      	ands	r3, r2
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d002      	beq.n	8000c0a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000c04:	2301      	movs	r3, #1
 8000c06:	73fb      	strb	r3, [r7, #15]
 8000c08:	e001      	b.n	8000c0e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000c0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c10:	4618      	mov	r0, r3
 8000c12:	3714      	adds	r7, #20
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bc80      	pop	{r7}
 8000c18:	4770      	bx	lr

08000c1a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c1a:	b480      	push	{r7}
 8000c1c:	b083      	sub	sp, #12
 8000c1e:	af00      	add	r7, sp, #0
 8000c20:	6078      	str	r0, [r7, #4]
 8000c22:	460b      	mov	r3, r1
 8000c24:	807b      	strh	r3, [r7, #2]
 8000c26:	4613      	mov	r3, r2
 8000c28:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000c2a:	787b      	ldrb	r3, [r7, #1]
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d003      	beq.n	8000c38 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000c30:	887a      	ldrh	r2, [r7, #2]
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000c36:	e003      	b.n	8000c40 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000c38:	887b      	ldrh	r3, [r7, #2]
 8000c3a:	041a      	lsls	r2, r3, #16
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	611a      	str	r2, [r3, #16]
}
 8000c40:	bf00      	nop
 8000c42:	370c      	adds	r7, #12
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bc80      	pop	{r7}
 8000c48:	4770      	bx	lr
	...

08000c4c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b082      	sub	sp, #8
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	4603      	mov	r3, r0
 8000c54:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8000c56:	4b08      	ldr	r3, [pc, #32]	; (8000c78 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000c58:	695a      	ldr	r2, [r3, #20]
 8000c5a:	88fb      	ldrh	r3, [r7, #6]
 8000c5c:	4013      	ands	r3, r2
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d006      	beq.n	8000c70 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000c62:	4a05      	ldr	r2, [pc, #20]	; (8000c78 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000c64:	88fb      	ldrh	r3, [r7, #6]
 8000c66:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000c68:	88fb      	ldrh	r3, [r7, #6]
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f002 fa49 	bl	8003102 <HAL_GPIO_EXTI_Callback>
  }
}
 8000c70:	bf00      	nop
 8000c72:	3708      	adds	r7, #8
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	40010400 	.word	0x40010400

08000c7c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b086      	sub	sp, #24
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 8000c84:	2300      	movs	r3, #0
 8000c86:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	f003 0301 	and.w	r3, r3, #1
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	f000 8087 	beq.w	8000da4 <HAL_RCC_OscConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000c96:	4b92      	ldr	r3, [pc, #584]	; (8000ee0 <HAL_RCC_OscConfig+0x264>)
 8000c98:	685b      	ldr	r3, [r3, #4]
 8000c9a:	f003 030c 	and.w	r3, r3, #12
 8000c9e:	2b04      	cmp	r3, #4
 8000ca0:	d00c      	beq.n	8000cbc <HAL_RCC_OscConfig+0x40>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000ca2:	4b8f      	ldr	r3, [pc, #572]	; (8000ee0 <HAL_RCC_OscConfig+0x264>)
 8000ca4:	685b      	ldr	r3, [r3, #4]
 8000ca6:	f003 030c 	and.w	r3, r3, #12
 8000caa:	2b08      	cmp	r3, #8
 8000cac:	d112      	bne.n	8000cd4 <HAL_RCC_OscConfig+0x58>
 8000cae:	4b8c      	ldr	r3, [pc, #560]	; (8000ee0 <HAL_RCC_OscConfig+0x264>)
 8000cb0:	685b      	ldr	r3, [r3, #4]
 8000cb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000cba:	d10b      	bne.n	8000cd4 <HAL_RCC_OscConfig+0x58>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cbc:	4b88      	ldr	r3, [pc, #544]	; (8000ee0 <HAL_RCC_OscConfig+0x264>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d06c      	beq.n	8000da2 <HAL_RCC_OscConfig+0x126>
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	685b      	ldr	r3, [r3, #4]
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d168      	bne.n	8000da2 <HAL_RCC_OscConfig+0x126>
      {
        return HAL_ERROR;
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	e22d      	b.n	8001130 <HAL_RCC_OscConfig+0x4b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	685b      	ldr	r3, [r3, #4]
 8000cd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000cdc:	d106      	bne.n	8000cec <HAL_RCC_OscConfig+0x70>
 8000cde:	4b80      	ldr	r3, [pc, #512]	; (8000ee0 <HAL_RCC_OscConfig+0x264>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	4a7f      	ldr	r2, [pc, #508]	; (8000ee0 <HAL_RCC_OscConfig+0x264>)
 8000ce4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ce8:	6013      	str	r3, [r2, #0]
 8000cea:	e02e      	b.n	8000d4a <HAL_RCC_OscConfig+0xce>
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	685b      	ldr	r3, [r3, #4]
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d10c      	bne.n	8000d0e <HAL_RCC_OscConfig+0x92>
 8000cf4:	4b7a      	ldr	r3, [pc, #488]	; (8000ee0 <HAL_RCC_OscConfig+0x264>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4a79      	ldr	r2, [pc, #484]	; (8000ee0 <HAL_RCC_OscConfig+0x264>)
 8000cfa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000cfe:	6013      	str	r3, [r2, #0]
 8000d00:	4b77      	ldr	r3, [pc, #476]	; (8000ee0 <HAL_RCC_OscConfig+0x264>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4a76      	ldr	r2, [pc, #472]	; (8000ee0 <HAL_RCC_OscConfig+0x264>)
 8000d06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d0a:	6013      	str	r3, [r2, #0]
 8000d0c:	e01d      	b.n	8000d4a <HAL_RCC_OscConfig+0xce>
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	685b      	ldr	r3, [r3, #4]
 8000d12:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000d16:	d10c      	bne.n	8000d32 <HAL_RCC_OscConfig+0xb6>
 8000d18:	4b71      	ldr	r3, [pc, #452]	; (8000ee0 <HAL_RCC_OscConfig+0x264>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4a70      	ldr	r2, [pc, #448]	; (8000ee0 <HAL_RCC_OscConfig+0x264>)
 8000d1e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d22:	6013      	str	r3, [r2, #0]
 8000d24:	4b6e      	ldr	r3, [pc, #440]	; (8000ee0 <HAL_RCC_OscConfig+0x264>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	4a6d      	ldr	r2, [pc, #436]	; (8000ee0 <HAL_RCC_OscConfig+0x264>)
 8000d2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d2e:	6013      	str	r3, [r2, #0]
 8000d30:	e00b      	b.n	8000d4a <HAL_RCC_OscConfig+0xce>
 8000d32:	4b6b      	ldr	r3, [pc, #428]	; (8000ee0 <HAL_RCC_OscConfig+0x264>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	4a6a      	ldr	r2, [pc, #424]	; (8000ee0 <HAL_RCC_OscConfig+0x264>)
 8000d38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d3c:	6013      	str	r3, [r2, #0]
 8000d3e:	4b68      	ldr	r3, [pc, #416]	; (8000ee0 <HAL_RCC_OscConfig+0x264>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	4a67      	ldr	r2, [pc, #412]	; (8000ee0 <HAL_RCC_OscConfig+0x264>)
 8000d44:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d48:	6013      	str	r3, [r2, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	685b      	ldr	r3, [r3, #4]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d013      	beq.n	8000d7a <HAL_RCC_OscConfig+0xfe>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d52:	f7ff fa53 	bl	80001fc <HAL_GetTick>
 8000d56:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d58:	e008      	b.n	8000d6c <HAL_RCC_OscConfig+0xf0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d5a:	f7ff fa4f 	bl	80001fc <HAL_GetTick>
 8000d5e:	4602      	mov	r2, r0
 8000d60:	693b      	ldr	r3, [r7, #16]
 8000d62:	1ad3      	subs	r3, r2, r3
 8000d64:	2b64      	cmp	r3, #100	; 0x64
 8000d66:	d901      	bls.n	8000d6c <HAL_RCC_OscConfig+0xf0>
          {
            return HAL_TIMEOUT;
 8000d68:	2303      	movs	r3, #3
 8000d6a:	e1e1      	b.n	8001130 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d6c:	4b5c      	ldr	r3, [pc, #368]	; (8000ee0 <HAL_RCC_OscConfig+0x264>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d0f0      	beq.n	8000d5a <HAL_RCC_OscConfig+0xde>
 8000d78:	e014      	b.n	8000da4 <HAL_RCC_OscConfig+0x128>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d7a:	f7ff fa3f 	bl	80001fc <HAL_GetTick>
 8000d7e:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d80:	e008      	b.n	8000d94 <HAL_RCC_OscConfig+0x118>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d82:	f7ff fa3b 	bl	80001fc <HAL_GetTick>
 8000d86:	4602      	mov	r2, r0
 8000d88:	693b      	ldr	r3, [r7, #16]
 8000d8a:	1ad3      	subs	r3, r2, r3
 8000d8c:	2b64      	cmp	r3, #100	; 0x64
 8000d8e:	d901      	bls.n	8000d94 <HAL_RCC_OscConfig+0x118>
          {
            return HAL_TIMEOUT;
 8000d90:	2303      	movs	r3, #3
 8000d92:	e1cd      	b.n	8001130 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d94:	4b52      	ldr	r3, [pc, #328]	; (8000ee0 <HAL_RCC_OscConfig+0x264>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d1f0      	bne.n	8000d82 <HAL_RCC_OscConfig+0x106>
 8000da0:	e000      	b.n	8000da4 <HAL_RCC_OscConfig+0x128>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000da2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	f003 0302 	and.w	r3, r3, #2
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d063      	beq.n	8000e78 <HAL_RCC_OscConfig+0x1fc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000db0:	4b4b      	ldr	r3, [pc, #300]	; (8000ee0 <HAL_RCC_OscConfig+0x264>)
 8000db2:	685b      	ldr	r3, [r3, #4]
 8000db4:	f003 030c 	and.w	r3, r3, #12
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d00b      	beq.n	8000dd4 <HAL_RCC_OscConfig+0x158>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000dbc:	4b48      	ldr	r3, [pc, #288]	; (8000ee0 <HAL_RCC_OscConfig+0x264>)
 8000dbe:	685b      	ldr	r3, [r3, #4]
 8000dc0:	f003 030c 	and.w	r3, r3, #12
 8000dc4:	2b08      	cmp	r3, #8
 8000dc6:	d11c      	bne.n	8000e02 <HAL_RCC_OscConfig+0x186>
 8000dc8:	4b45      	ldr	r3, [pc, #276]	; (8000ee0 <HAL_RCC_OscConfig+0x264>)
 8000dca:	685b      	ldr	r3, [r3, #4]
 8000dcc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d116      	bne.n	8000e02 <HAL_RCC_OscConfig+0x186>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000dd4:	4b42      	ldr	r3, [pc, #264]	; (8000ee0 <HAL_RCC_OscConfig+0x264>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	f003 0302 	and.w	r3, r3, #2
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d005      	beq.n	8000dec <HAL_RCC_OscConfig+0x170>
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	691b      	ldr	r3, [r3, #16]
 8000de4:	2b01      	cmp	r3, #1
 8000de6:	d001      	beq.n	8000dec <HAL_RCC_OscConfig+0x170>
      {
        return HAL_ERROR;
 8000de8:	2301      	movs	r3, #1
 8000dea:	e1a1      	b.n	8001130 <HAL_RCC_OscConfig+0x4b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000dec:	4b3c      	ldr	r3, [pc, #240]	; (8000ee0 <HAL_RCC_OscConfig+0x264>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	695b      	ldr	r3, [r3, #20]
 8000df8:	00db      	lsls	r3, r3, #3
 8000dfa:	4939      	ldr	r1, [pc, #228]	; (8000ee0 <HAL_RCC_OscConfig+0x264>)
 8000dfc:	4313      	orrs	r3, r2
 8000dfe:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e00:	e03a      	b.n	8000e78 <HAL_RCC_OscConfig+0x1fc>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	691b      	ldr	r3, [r3, #16]
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d020      	beq.n	8000e4c <HAL_RCC_OscConfig+0x1d0>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e0a:	4b36      	ldr	r3, [pc, #216]	; (8000ee4 <HAL_RCC_OscConfig+0x268>)
 8000e0c:	2201      	movs	r2, #1
 8000e0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e10:	f7ff f9f4 	bl	80001fc <HAL_GetTick>
 8000e14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e16:	e008      	b.n	8000e2a <HAL_RCC_OscConfig+0x1ae>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e18:	f7ff f9f0 	bl	80001fc <HAL_GetTick>
 8000e1c:	4602      	mov	r2, r0
 8000e1e:	693b      	ldr	r3, [r7, #16]
 8000e20:	1ad3      	subs	r3, r2, r3
 8000e22:	2b02      	cmp	r3, #2
 8000e24:	d901      	bls.n	8000e2a <HAL_RCC_OscConfig+0x1ae>
          {
            return HAL_TIMEOUT;
 8000e26:	2303      	movs	r3, #3
 8000e28:	e182      	b.n	8001130 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e2a:	4b2d      	ldr	r3, [pc, #180]	; (8000ee0 <HAL_RCC_OscConfig+0x264>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	f003 0302 	and.w	r3, r3, #2
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d0f0      	beq.n	8000e18 <HAL_RCC_OscConfig+0x19c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e36:	4b2a      	ldr	r3, [pc, #168]	; (8000ee0 <HAL_RCC_OscConfig+0x264>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	695b      	ldr	r3, [r3, #20]
 8000e42:	00db      	lsls	r3, r3, #3
 8000e44:	4926      	ldr	r1, [pc, #152]	; (8000ee0 <HAL_RCC_OscConfig+0x264>)
 8000e46:	4313      	orrs	r3, r2
 8000e48:	600b      	str	r3, [r1, #0]
 8000e4a:	e015      	b.n	8000e78 <HAL_RCC_OscConfig+0x1fc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000e4c:	4b25      	ldr	r3, [pc, #148]	; (8000ee4 <HAL_RCC_OscConfig+0x268>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e52:	f7ff f9d3 	bl	80001fc <HAL_GetTick>
 8000e56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e58:	e008      	b.n	8000e6c <HAL_RCC_OscConfig+0x1f0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e5a:	f7ff f9cf 	bl	80001fc <HAL_GetTick>
 8000e5e:	4602      	mov	r2, r0
 8000e60:	693b      	ldr	r3, [r7, #16]
 8000e62:	1ad3      	subs	r3, r2, r3
 8000e64:	2b02      	cmp	r3, #2
 8000e66:	d901      	bls.n	8000e6c <HAL_RCC_OscConfig+0x1f0>
          {
            return HAL_TIMEOUT;
 8000e68:	2303      	movs	r3, #3
 8000e6a:	e161      	b.n	8001130 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e6c:	4b1c      	ldr	r3, [pc, #112]	; (8000ee0 <HAL_RCC_OscConfig+0x264>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	f003 0302 	and.w	r3, r3, #2
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d1f0      	bne.n	8000e5a <HAL_RCC_OscConfig+0x1de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	f003 0308 	and.w	r3, r3, #8
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d039      	beq.n	8000ef8 <HAL_RCC_OscConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	699b      	ldr	r3, [r3, #24]
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d019      	beq.n	8000ec0 <HAL_RCC_OscConfig+0x244>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000e8c:	4b16      	ldr	r3, [pc, #88]	; (8000ee8 <HAL_RCC_OscConfig+0x26c>)
 8000e8e:	2201      	movs	r2, #1
 8000e90:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e92:	f7ff f9b3 	bl	80001fc <HAL_GetTick>
 8000e96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e98:	e008      	b.n	8000eac <HAL_RCC_OscConfig+0x230>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e9a:	f7ff f9af 	bl	80001fc <HAL_GetTick>
 8000e9e:	4602      	mov	r2, r0
 8000ea0:	693b      	ldr	r3, [r7, #16]
 8000ea2:	1ad3      	subs	r3, r2, r3
 8000ea4:	2b02      	cmp	r3, #2
 8000ea6:	d901      	bls.n	8000eac <HAL_RCC_OscConfig+0x230>
        {
          return HAL_TIMEOUT;
 8000ea8:	2303      	movs	r3, #3
 8000eaa:	e141      	b.n	8001130 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000eac:	4b0c      	ldr	r3, [pc, #48]	; (8000ee0 <HAL_RCC_OscConfig+0x264>)
 8000eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eb0:	f003 0302 	and.w	r3, r3, #2
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d0f0      	beq.n	8000e9a <HAL_RCC_OscConfig+0x21e>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
          should be added.*/
      RCC_Delay(1);
 8000eb8:	2001      	movs	r0, #1
 8000eba:	f000 fae3 	bl	8001484 <RCC_Delay>
 8000ebe:	e01b      	b.n	8000ef8 <HAL_RCC_OscConfig+0x27c>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000ec0:	4b09      	ldr	r3, [pc, #36]	; (8000ee8 <HAL_RCC_OscConfig+0x26c>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ec6:	f7ff f999 	bl	80001fc <HAL_GetTick>
 8000eca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ecc:	e00e      	b.n	8000eec <HAL_RCC_OscConfig+0x270>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000ece:	f7ff f995 	bl	80001fc <HAL_GetTick>
 8000ed2:	4602      	mov	r2, r0
 8000ed4:	693b      	ldr	r3, [r7, #16]
 8000ed6:	1ad3      	subs	r3, r2, r3
 8000ed8:	2b02      	cmp	r3, #2
 8000eda:	d907      	bls.n	8000eec <HAL_RCC_OscConfig+0x270>
        {
          return HAL_TIMEOUT;
 8000edc:	2303      	movs	r3, #3
 8000ede:	e127      	b.n	8001130 <HAL_RCC_OscConfig+0x4b4>
 8000ee0:	40021000 	.word	0x40021000
 8000ee4:	42420000 	.word	0x42420000
 8000ee8:	42420480 	.word	0x42420480
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000eec:	4b92      	ldr	r3, [pc, #584]	; (8001138 <HAL_RCC_OscConfig+0x4bc>)
 8000eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ef0:	f003 0302 	and.w	r3, r3, #2
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d1ea      	bne.n	8000ece <HAL_RCC_OscConfig+0x252>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	f003 0304 	and.w	r3, r3, #4
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	f000 80a6 	beq.w	8001052 <HAL_RCC_OscConfig+0x3d6>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000f06:	2300      	movs	r3, #0
 8000f08:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f0a:	4b8b      	ldr	r3, [pc, #556]	; (8001138 <HAL_RCC_OscConfig+0x4bc>)
 8000f0c:	69db      	ldr	r3, [r3, #28]
 8000f0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d10d      	bne.n	8000f32 <HAL_RCC_OscConfig+0x2b6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f16:	4b88      	ldr	r3, [pc, #544]	; (8001138 <HAL_RCC_OscConfig+0x4bc>)
 8000f18:	69db      	ldr	r3, [r3, #28]
 8000f1a:	4a87      	ldr	r2, [pc, #540]	; (8001138 <HAL_RCC_OscConfig+0x4bc>)
 8000f1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f20:	61d3      	str	r3, [r2, #28]
 8000f22:	4b85      	ldr	r3, [pc, #532]	; (8001138 <HAL_RCC_OscConfig+0x4bc>)
 8000f24:	69db      	ldr	r3, [r3, #28]
 8000f26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f2a:	60fb      	str	r3, [r7, #12]
 8000f2c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f32:	4b82      	ldr	r3, [pc, #520]	; (800113c <HAL_RCC_OscConfig+0x4c0>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d118      	bne.n	8000f70 <HAL_RCC_OscConfig+0x2f4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f3e:	4b7f      	ldr	r3, [pc, #508]	; (800113c <HAL_RCC_OscConfig+0x4c0>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	4a7e      	ldr	r2, [pc, #504]	; (800113c <HAL_RCC_OscConfig+0x4c0>)
 8000f44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000f4a:	f7ff f957 	bl	80001fc <HAL_GetTick>
 8000f4e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f50:	e008      	b.n	8000f64 <HAL_RCC_OscConfig+0x2e8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f52:	f7ff f953 	bl	80001fc <HAL_GetTick>
 8000f56:	4602      	mov	r2, r0
 8000f58:	693b      	ldr	r3, [r7, #16]
 8000f5a:	1ad3      	subs	r3, r2, r3
 8000f5c:	2b64      	cmp	r3, #100	; 0x64
 8000f5e:	d901      	bls.n	8000f64 <HAL_RCC_OscConfig+0x2e8>
        {
          return HAL_TIMEOUT;
 8000f60:	2303      	movs	r3, #3
 8000f62:	e0e5      	b.n	8001130 <HAL_RCC_OscConfig+0x4b4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f64:	4b75      	ldr	r3, [pc, #468]	; (800113c <HAL_RCC_OscConfig+0x4c0>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d0f0      	beq.n	8000f52 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	68db      	ldr	r3, [r3, #12]
 8000f74:	2b01      	cmp	r3, #1
 8000f76:	d106      	bne.n	8000f86 <HAL_RCC_OscConfig+0x30a>
 8000f78:	4b6f      	ldr	r3, [pc, #444]	; (8001138 <HAL_RCC_OscConfig+0x4bc>)
 8000f7a:	6a1b      	ldr	r3, [r3, #32]
 8000f7c:	4a6e      	ldr	r2, [pc, #440]	; (8001138 <HAL_RCC_OscConfig+0x4bc>)
 8000f7e:	f043 0301 	orr.w	r3, r3, #1
 8000f82:	6213      	str	r3, [r2, #32]
 8000f84:	e02d      	b.n	8000fe2 <HAL_RCC_OscConfig+0x366>
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	68db      	ldr	r3, [r3, #12]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d10c      	bne.n	8000fa8 <HAL_RCC_OscConfig+0x32c>
 8000f8e:	4b6a      	ldr	r3, [pc, #424]	; (8001138 <HAL_RCC_OscConfig+0x4bc>)
 8000f90:	6a1b      	ldr	r3, [r3, #32]
 8000f92:	4a69      	ldr	r2, [pc, #420]	; (8001138 <HAL_RCC_OscConfig+0x4bc>)
 8000f94:	f023 0301 	bic.w	r3, r3, #1
 8000f98:	6213      	str	r3, [r2, #32]
 8000f9a:	4b67      	ldr	r3, [pc, #412]	; (8001138 <HAL_RCC_OscConfig+0x4bc>)
 8000f9c:	6a1b      	ldr	r3, [r3, #32]
 8000f9e:	4a66      	ldr	r2, [pc, #408]	; (8001138 <HAL_RCC_OscConfig+0x4bc>)
 8000fa0:	f023 0304 	bic.w	r3, r3, #4
 8000fa4:	6213      	str	r3, [r2, #32]
 8000fa6:	e01c      	b.n	8000fe2 <HAL_RCC_OscConfig+0x366>
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	68db      	ldr	r3, [r3, #12]
 8000fac:	2b05      	cmp	r3, #5
 8000fae:	d10c      	bne.n	8000fca <HAL_RCC_OscConfig+0x34e>
 8000fb0:	4b61      	ldr	r3, [pc, #388]	; (8001138 <HAL_RCC_OscConfig+0x4bc>)
 8000fb2:	6a1b      	ldr	r3, [r3, #32]
 8000fb4:	4a60      	ldr	r2, [pc, #384]	; (8001138 <HAL_RCC_OscConfig+0x4bc>)
 8000fb6:	f043 0304 	orr.w	r3, r3, #4
 8000fba:	6213      	str	r3, [r2, #32]
 8000fbc:	4b5e      	ldr	r3, [pc, #376]	; (8001138 <HAL_RCC_OscConfig+0x4bc>)
 8000fbe:	6a1b      	ldr	r3, [r3, #32]
 8000fc0:	4a5d      	ldr	r2, [pc, #372]	; (8001138 <HAL_RCC_OscConfig+0x4bc>)
 8000fc2:	f043 0301 	orr.w	r3, r3, #1
 8000fc6:	6213      	str	r3, [r2, #32]
 8000fc8:	e00b      	b.n	8000fe2 <HAL_RCC_OscConfig+0x366>
 8000fca:	4b5b      	ldr	r3, [pc, #364]	; (8001138 <HAL_RCC_OscConfig+0x4bc>)
 8000fcc:	6a1b      	ldr	r3, [r3, #32]
 8000fce:	4a5a      	ldr	r2, [pc, #360]	; (8001138 <HAL_RCC_OscConfig+0x4bc>)
 8000fd0:	f023 0301 	bic.w	r3, r3, #1
 8000fd4:	6213      	str	r3, [r2, #32]
 8000fd6:	4b58      	ldr	r3, [pc, #352]	; (8001138 <HAL_RCC_OscConfig+0x4bc>)
 8000fd8:	6a1b      	ldr	r3, [r3, #32]
 8000fda:	4a57      	ldr	r2, [pc, #348]	; (8001138 <HAL_RCC_OscConfig+0x4bc>)
 8000fdc:	f023 0304 	bic.w	r3, r3, #4
 8000fe0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	68db      	ldr	r3, [r3, #12]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d015      	beq.n	8001016 <HAL_RCC_OscConfig+0x39a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fea:	f7ff f907 	bl	80001fc <HAL_GetTick>
 8000fee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ff0:	e00a      	b.n	8001008 <HAL_RCC_OscConfig+0x38c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ff2:	f7ff f903 	bl	80001fc <HAL_GetTick>
 8000ff6:	4602      	mov	r2, r0
 8000ff8:	693b      	ldr	r3, [r7, #16]
 8000ffa:	1ad3      	subs	r3, r2, r3
 8000ffc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001000:	4293      	cmp	r3, r2
 8001002:	d901      	bls.n	8001008 <HAL_RCC_OscConfig+0x38c>
        {
          return HAL_TIMEOUT;
 8001004:	2303      	movs	r3, #3
 8001006:	e093      	b.n	8001130 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001008:	4b4b      	ldr	r3, [pc, #300]	; (8001138 <HAL_RCC_OscConfig+0x4bc>)
 800100a:	6a1b      	ldr	r3, [r3, #32]
 800100c:	f003 0302 	and.w	r3, r3, #2
 8001010:	2b00      	cmp	r3, #0
 8001012:	d0ee      	beq.n	8000ff2 <HAL_RCC_OscConfig+0x376>
 8001014:	e014      	b.n	8001040 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001016:	f7ff f8f1 	bl	80001fc <HAL_GetTick>
 800101a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800101c:	e00a      	b.n	8001034 <HAL_RCC_OscConfig+0x3b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800101e:	f7ff f8ed 	bl	80001fc <HAL_GetTick>
 8001022:	4602      	mov	r2, r0
 8001024:	693b      	ldr	r3, [r7, #16]
 8001026:	1ad3      	subs	r3, r2, r3
 8001028:	f241 3288 	movw	r2, #5000	; 0x1388
 800102c:	4293      	cmp	r3, r2
 800102e:	d901      	bls.n	8001034 <HAL_RCC_OscConfig+0x3b8>
        {
          return HAL_TIMEOUT;
 8001030:	2303      	movs	r3, #3
 8001032:	e07d      	b.n	8001130 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001034:	4b40      	ldr	r3, [pc, #256]	; (8001138 <HAL_RCC_OscConfig+0x4bc>)
 8001036:	6a1b      	ldr	r3, [r3, #32]
 8001038:	f003 0302 	and.w	r3, r3, #2
 800103c:	2b00      	cmp	r3, #0
 800103e:	d1ee      	bne.n	800101e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001040:	7dfb      	ldrb	r3, [r7, #23]
 8001042:	2b01      	cmp	r3, #1
 8001044:	d105      	bne.n	8001052 <HAL_RCC_OscConfig+0x3d6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001046:	4b3c      	ldr	r3, [pc, #240]	; (8001138 <HAL_RCC_OscConfig+0x4bc>)
 8001048:	69db      	ldr	r3, [r3, #28]
 800104a:	4a3b      	ldr	r2, [pc, #236]	; (8001138 <HAL_RCC_OscConfig+0x4bc>)
 800104c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001050:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	69db      	ldr	r3, [r3, #28]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d069      	beq.n	800112e <HAL_RCC_OscConfig+0x4b2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800105a:	4b37      	ldr	r3, [pc, #220]	; (8001138 <HAL_RCC_OscConfig+0x4bc>)
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	f003 030c 	and.w	r3, r3, #12
 8001062:	2b08      	cmp	r3, #8
 8001064:	d061      	beq.n	800112a <HAL_RCC_OscConfig+0x4ae>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	69db      	ldr	r3, [r3, #28]
 800106a:	2b02      	cmp	r3, #2
 800106c:	d146      	bne.n	80010fc <HAL_RCC_OscConfig+0x480>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800106e:	4b34      	ldr	r3, [pc, #208]	; (8001140 <HAL_RCC_OscConfig+0x4c4>)
 8001070:	2200      	movs	r2, #0
 8001072:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001074:	f7ff f8c2 	bl	80001fc <HAL_GetTick>
 8001078:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800107a:	e008      	b.n	800108e <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800107c:	f7ff f8be 	bl	80001fc <HAL_GetTick>
 8001080:	4602      	mov	r2, r0
 8001082:	693b      	ldr	r3, [r7, #16]
 8001084:	1ad3      	subs	r3, r2, r3
 8001086:	2b02      	cmp	r3, #2
 8001088:	d901      	bls.n	800108e <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 800108a:	2303      	movs	r3, #3
 800108c:	e050      	b.n	8001130 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800108e:	4b2a      	ldr	r3, [pc, #168]	; (8001138 <HAL_RCC_OscConfig+0x4bc>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001096:	2b00      	cmp	r3, #0
 8001098:	d1f0      	bne.n	800107c <HAL_RCC_OscConfig+0x400>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	6a1b      	ldr	r3, [r3, #32]
 800109e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010a2:	d108      	bne.n	80010b6 <HAL_RCC_OscConfig+0x43a>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80010a4:	4b24      	ldr	r3, [pc, #144]	; (8001138 <HAL_RCC_OscConfig+0x4bc>)
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	689b      	ldr	r3, [r3, #8]
 80010b0:	4921      	ldr	r1, [pc, #132]	; (8001138 <HAL_RCC_OscConfig+0x4bc>)
 80010b2:	4313      	orrs	r3, r2
 80010b4:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80010b6:	4b20      	ldr	r3, [pc, #128]	; (8001138 <HAL_RCC_OscConfig+0x4bc>)
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	6a19      	ldr	r1, [r3, #32]
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010c6:	430b      	orrs	r3, r1
 80010c8:	491b      	ldr	r1, [pc, #108]	; (8001138 <HAL_RCC_OscConfig+0x4bc>)
 80010ca:	4313      	orrs	r3, r2
 80010cc:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80010ce:	4b1c      	ldr	r3, [pc, #112]	; (8001140 <HAL_RCC_OscConfig+0x4c4>)
 80010d0:	2201      	movs	r2, #1
 80010d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010d4:	f7ff f892 	bl	80001fc <HAL_GetTick>
 80010d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80010da:	e008      	b.n	80010ee <HAL_RCC_OscConfig+0x472>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80010dc:	f7ff f88e 	bl	80001fc <HAL_GetTick>
 80010e0:	4602      	mov	r2, r0
 80010e2:	693b      	ldr	r3, [r7, #16]
 80010e4:	1ad3      	subs	r3, r2, r3
 80010e6:	2b02      	cmp	r3, #2
 80010e8:	d901      	bls.n	80010ee <HAL_RCC_OscConfig+0x472>
          {
            return HAL_TIMEOUT;
 80010ea:	2303      	movs	r3, #3
 80010ec:	e020      	b.n	8001130 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80010ee:	4b12      	ldr	r3, [pc, #72]	; (8001138 <HAL_RCC_OscConfig+0x4bc>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d0f0      	beq.n	80010dc <HAL_RCC_OscConfig+0x460>
 80010fa:	e018      	b.n	800112e <HAL_RCC_OscConfig+0x4b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80010fc:	4b10      	ldr	r3, [pc, #64]	; (8001140 <HAL_RCC_OscConfig+0x4c4>)
 80010fe:	2200      	movs	r2, #0
 8001100:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001102:	f7ff f87b 	bl	80001fc <HAL_GetTick>
 8001106:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001108:	e008      	b.n	800111c <HAL_RCC_OscConfig+0x4a0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800110a:	f7ff f877 	bl	80001fc <HAL_GetTick>
 800110e:	4602      	mov	r2, r0
 8001110:	693b      	ldr	r3, [r7, #16]
 8001112:	1ad3      	subs	r3, r2, r3
 8001114:	2b02      	cmp	r3, #2
 8001116:	d901      	bls.n	800111c <HAL_RCC_OscConfig+0x4a0>
          {
            return HAL_TIMEOUT;
 8001118:	2303      	movs	r3, #3
 800111a:	e009      	b.n	8001130 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800111c:	4b06      	ldr	r3, [pc, #24]	; (8001138 <HAL_RCC_OscConfig+0x4bc>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001124:	2b00      	cmp	r3, #0
 8001126:	d1f0      	bne.n	800110a <HAL_RCC_OscConfig+0x48e>
 8001128:	e001      	b.n	800112e <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800112a:	2301      	movs	r3, #1
 800112c:	e000      	b.n	8001130 <HAL_RCC_OscConfig+0x4b4>
    }
  }
  
  return HAL_OK;
 800112e:	2300      	movs	r3, #0
}
 8001130:	4618      	mov	r0, r3
 8001132:	3718      	adds	r7, #24
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	40021000 	.word	0x40021000
 800113c:	40007000 	.word	0x40007000
 8001140:	42420060 	.word	0x42420060

08001144 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b084      	sub	sp, #16
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
 800114c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800114e:	2300      	movs	r3, #0
 8001150:	60fb      	str	r3, [r7, #12]
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001152:	4b7e      	ldr	r3, [pc, #504]	; (800134c <HAL_RCC_ClockConfig+0x208>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f003 0307 	and.w	r3, r3, #7
 800115a:	683a      	ldr	r2, [r7, #0]
 800115c:	429a      	cmp	r2, r3
 800115e:	d910      	bls.n	8001182 <HAL_RCC_ClockConfig+0x3e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001160:	4b7a      	ldr	r3, [pc, #488]	; (800134c <HAL_RCC_ClockConfig+0x208>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f023 0207 	bic.w	r2, r3, #7
 8001168:	4978      	ldr	r1, [pc, #480]	; (800134c <HAL_RCC_ClockConfig+0x208>)
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	4313      	orrs	r3, r2
 800116e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001170:	4b76      	ldr	r3, [pc, #472]	; (800134c <HAL_RCC_ClockConfig+0x208>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f003 0307 	and.w	r3, r3, #7
 8001178:	683a      	ldr	r2, [r7, #0]
 800117a:	429a      	cmp	r2, r3
 800117c:	d001      	beq.n	8001182 <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 800117e:	2301      	movs	r3, #1
 8001180:	e0e0      	b.n	8001344 <HAL_RCC_ClockConfig+0x200>
    }
  }

#endif /* FLASH_ACR_LATENCY */
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f003 0302 	and.w	r3, r3, #2
 800118a:	2b00      	cmp	r3, #0
 800118c:	d020      	beq.n	80011d0 <HAL_RCC_ClockConfig+0x8c>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f003 0304 	and.w	r3, r3, #4
 8001196:	2b00      	cmp	r3, #0
 8001198:	d005      	beq.n	80011a6 <HAL_RCC_ClockConfig+0x62>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800119a:	4b6d      	ldr	r3, [pc, #436]	; (8001350 <HAL_RCC_ClockConfig+0x20c>)
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	4a6c      	ldr	r2, [pc, #432]	; (8001350 <HAL_RCC_ClockConfig+0x20c>)
 80011a0:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80011a4:	6053      	str	r3, [r2, #4]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f003 0308 	and.w	r3, r3, #8
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d005      	beq.n	80011be <HAL_RCC_ClockConfig+0x7a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80011b2:	4b67      	ldr	r3, [pc, #412]	; (8001350 <HAL_RCC_ClockConfig+0x20c>)
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	4a66      	ldr	r2, [pc, #408]	; (8001350 <HAL_RCC_ClockConfig+0x20c>)
 80011b8:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80011bc:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80011be:	4b64      	ldr	r3, [pc, #400]	; (8001350 <HAL_RCC_ClockConfig+0x20c>)
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	689b      	ldr	r3, [r3, #8]
 80011ca:	4961      	ldr	r1, [pc, #388]	; (8001350 <HAL_RCC_ClockConfig+0x20c>)
 80011cc:	4313      	orrs	r3, r2
 80011ce:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f003 0301 	and.w	r3, r3, #1
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d06a      	beq.n	80012b2 <HAL_RCC_ClockConfig+0x16e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	2b01      	cmp	r3, #1
 80011e2:	d107      	bne.n	80011f4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011e4:	4b5a      	ldr	r3, [pc, #360]	; (8001350 <HAL_RCC_ClockConfig+0x20c>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d115      	bne.n	800121c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 80011f0:	2301      	movs	r3, #1
 80011f2:	e0a7      	b.n	8001344 <HAL_RCC_ClockConfig+0x200>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	2b02      	cmp	r3, #2
 80011fa:	d107      	bne.n	800120c <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80011fc:	4b54      	ldr	r3, [pc, #336]	; (8001350 <HAL_RCC_ClockConfig+0x20c>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001204:	2b00      	cmp	r3, #0
 8001206:	d109      	bne.n	800121c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8001208:	2301      	movs	r3, #1
 800120a:	e09b      	b.n	8001344 <HAL_RCC_ClockConfig+0x200>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800120c:	4b50      	ldr	r3, [pc, #320]	; (8001350 <HAL_RCC_ClockConfig+0x20c>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f003 0302 	and.w	r3, r3, #2
 8001214:	2b00      	cmp	r3, #0
 8001216:	d101      	bne.n	800121c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8001218:	2301      	movs	r3, #1
 800121a:	e093      	b.n	8001344 <HAL_RCC_ClockConfig+0x200>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800121c:	4b4c      	ldr	r3, [pc, #304]	; (8001350 <HAL_RCC_ClockConfig+0x20c>)
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	f023 0203 	bic.w	r2, r3, #3
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	4949      	ldr	r1, [pc, #292]	; (8001350 <HAL_RCC_ClockConfig+0x20c>)
 800122a:	4313      	orrs	r3, r2
 800122c:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800122e:	f7fe ffe5 	bl	80001fc <HAL_GetTick>
 8001232:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	2b01      	cmp	r3, #1
 800123a:	d112      	bne.n	8001262 <HAL_RCC_ClockConfig+0x11e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800123c:	e00a      	b.n	8001254 <HAL_RCC_ClockConfig+0x110>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800123e:	f7fe ffdd 	bl	80001fc <HAL_GetTick>
 8001242:	4602      	mov	r2, r0
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	1ad3      	subs	r3, r2, r3
 8001248:	f241 3288 	movw	r2, #5000	; 0x1388
 800124c:	4293      	cmp	r3, r2
 800124e:	d901      	bls.n	8001254 <HAL_RCC_ClockConfig+0x110>
        {
          return HAL_TIMEOUT;
 8001250:	2303      	movs	r3, #3
 8001252:	e077      	b.n	8001344 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001254:	4b3e      	ldr	r3, [pc, #248]	; (8001350 <HAL_RCC_ClockConfig+0x20c>)
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	f003 030c 	and.w	r3, r3, #12
 800125c:	2b04      	cmp	r3, #4
 800125e:	d1ee      	bne.n	800123e <HAL_RCC_ClockConfig+0xfa>
 8001260:	e027      	b.n	80012b2 <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	2b02      	cmp	r3, #2
 8001268:	d11d      	bne.n	80012a6 <HAL_RCC_ClockConfig+0x162>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800126a:	e00a      	b.n	8001282 <HAL_RCC_ClockConfig+0x13e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800126c:	f7fe ffc6 	bl	80001fc <HAL_GetTick>
 8001270:	4602      	mov	r2, r0
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	1ad3      	subs	r3, r2, r3
 8001276:	f241 3288 	movw	r2, #5000	; 0x1388
 800127a:	4293      	cmp	r3, r2
 800127c:	d901      	bls.n	8001282 <HAL_RCC_ClockConfig+0x13e>
        {
          return HAL_TIMEOUT;
 800127e:	2303      	movs	r3, #3
 8001280:	e060      	b.n	8001344 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001282:	4b33      	ldr	r3, [pc, #204]	; (8001350 <HAL_RCC_ClockConfig+0x20c>)
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	f003 030c 	and.w	r3, r3, #12
 800128a:	2b08      	cmp	r3, #8
 800128c:	d1ee      	bne.n	800126c <HAL_RCC_ClockConfig+0x128>
 800128e:	e010      	b.n	80012b2 <HAL_RCC_ClockConfig+0x16e>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001290:	f7fe ffb4 	bl	80001fc <HAL_GetTick>
 8001294:	4602      	mov	r2, r0
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	1ad3      	subs	r3, r2, r3
 800129a:	f241 3288 	movw	r2, #5000	; 0x1388
 800129e:	4293      	cmp	r3, r2
 80012a0:	d901      	bls.n	80012a6 <HAL_RCC_ClockConfig+0x162>
        {
          return HAL_TIMEOUT;
 80012a2:	2303      	movs	r3, #3
 80012a4:	e04e      	b.n	8001344 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80012a6:	4b2a      	ldr	r3, [pc, #168]	; (8001350 <HAL_RCC_ClockConfig+0x20c>)
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	f003 030c 	and.w	r3, r3, #12
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d1ee      	bne.n	8001290 <HAL_RCC_ClockConfig+0x14c>
      }
    }      
  }    
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80012b2:	4b26      	ldr	r3, [pc, #152]	; (800134c <HAL_RCC_ClockConfig+0x208>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f003 0307 	and.w	r3, r3, #7
 80012ba:	683a      	ldr	r2, [r7, #0]
 80012bc:	429a      	cmp	r2, r3
 80012be:	d210      	bcs.n	80012e2 <HAL_RCC_ClockConfig+0x19e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012c0:	4b22      	ldr	r3, [pc, #136]	; (800134c <HAL_RCC_ClockConfig+0x208>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f023 0207 	bic.w	r2, r3, #7
 80012c8:	4920      	ldr	r1, [pc, #128]	; (800134c <HAL_RCC_ClockConfig+0x208>)
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	4313      	orrs	r3, r2
 80012ce:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80012d0:	4b1e      	ldr	r3, [pc, #120]	; (800134c <HAL_RCC_ClockConfig+0x208>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f003 0307 	and.w	r3, r3, #7
 80012d8:	683a      	ldr	r2, [r7, #0]
 80012da:	429a      	cmp	r2, r3
 80012dc:	d001      	beq.n	80012e2 <HAL_RCC_ClockConfig+0x19e>
    {
      return HAL_ERROR;
 80012de:	2301      	movs	r3, #1
 80012e0:	e030      	b.n	8001344 <HAL_RCC_ClockConfig+0x200>
    }
  }    
#endif /* FLASH_ACR_LATENCY */

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f003 0304 	and.w	r3, r3, #4
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d008      	beq.n	8001300 <HAL_RCC_ClockConfig+0x1bc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80012ee:	4b18      	ldr	r3, [pc, #96]	; (8001350 <HAL_RCC_ClockConfig+0x20c>)
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	68db      	ldr	r3, [r3, #12]
 80012fa:	4915      	ldr	r1, [pc, #84]	; (8001350 <HAL_RCC_ClockConfig+0x20c>)
 80012fc:	4313      	orrs	r3, r2
 80012fe:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f003 0308 	and.w	r3, r3, #8
 8001308:	2b00      	cmp	r3, #0
 800130a:	d009      	beq.n	8001320 <HAL_RCC_ClockConfig+0x1dc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800130c:	4b10      	ldr	r3, [pc, #64]	; (8001350 <HAL_RCC_ClockConfig+0x20c>)
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	691b      	ldr	r3, [r3, #16]
 8001318:	00db      	lsls	r3, r3, #3
 800131a:	490d      	ldr	r1, [pc, #52]	; (8001350 <HAL_RCC_ClockConfig+0x20c>)
 800131c:	4313      	orrs	r3, r2
 800131e:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001320:	f000 f81c 	bl	800135c <HAL_RCC_GetSysClockFreq>
 8001324:	4601      	mov	r1, r0
 8001326:	4b0a      	ldr	r3, [pc, #40]	; (8001350 <HAL_RCC_ClockConfig+0x20c>)
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	091b      	lsrs	r3, r3, #4
 800132c:	f003 030f 	and.w	r3, r3, #15
 8001330:	4a08      	ldr	r2, [pc, #32]	; (8001354 <HAL_RCC_ClockConfig+0x210>)
 8001332:	5cd3      	ldrb	r3, [r2, r3]
 8001334:	fa21 f303 	lsr.w	r3, r1, r3
 8001338:	4a07      	ldr	r2, [pc, #28]	; (8001358 <HAL_RCC_ClockConfig+0x214>)
 800133a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800133c:	2000      	movs	r0, #0
 800133e:	f7fe ff1b 	bl	8000178 <HAL_InitTick>
  
  return HAL_OK;
 8001342:	2300      	movs	r3, #0
}
 8001344:	4618      	mov	r0, r3
 8001346:	3710      	adds	r7, #16
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}
 800134c:	40022000 	.word	0x40022000
 8001350:	40021000 	.word	0x40021000
 8001354:	08003e80 	.word	0x08003e80
 8001358:	20000008 	.word	0x20000008

0800135c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800135c:	b490      	push	{r4, r7}
 800135e:	b08a      	sub	sp, #40	; 0x28
 8001360:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001362:	4b2a      	ldr	r3, [pc, #168]	; (800140c <HAL_RCC_GetSysClockFreq+0xb0>)
 8001364:	1d3c      	adds	r4, r7, #4
 8001366:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001368:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800136c:	4b28      	ldr	r3, [pc, #160]	; (8001410 <HAL_RCC_GetSysClockFreq+0xb4>)
 800136e:	881b      	ldrh	r3, [r3, #0]
 8001370:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001372:	2300      	movs	r3, #0
 8001374:	61fb      	str	r3, [r7, #28]
 8001376:	2300      	movs	r3, #0
 8001378:	61bb      	str	r3, [r7, #24]
 800137a:	2300      	movs	r3, #0
 800137c:	627b      	str	r3, [r7, #36]	; 0x24
 800137e:	2300      	movs	r3, #0
 8001380:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001382:	2300      	movs	r3, #0
 8001384:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001386:	4b23      	ldr	r3, [pc, #140]	; (8001414 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800138c:	69fb      	ldr	r3, [r7, #28]
 800138e:	f003 030c 	and.w	r3, r3, #12
 8001392:	2b04      	cmp	r3, #4
 8001394:	d002      	beq.n	800139c <HAL_RCC_GetSysClockFreq+0x40>
 8001396:	2b08      	cmp	r3, #8
 8001398:	d003      	beq.n	80013a2 <HAL_RCC_GetSysClockFreq+0x46>
 800139a:	e02d      	b.n	80013f8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800139c:	4b1e      	ldr	r3, [pc, #120]	; (8001418 <HAL_RCC_GetSysClockFreq+0xbc>)
 800139e:	623b      	str	r3, [r7, #32]
      break;
 80013a0:	e02d      	b.n	80013fe <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80013a2:	69fb      	ldr	r3, [r7, #28]
 80013a4:	0c9b      	lsrs	r3, r3, #18
 80013a6:	f003 030f 	and.w	r3, r3, #15
 80013aa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80013ae:	4413      	add	r3, r2
 80013b0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80013b4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80013b6:	69fb      	ldr	r3, [r7, #28]
 80013b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d013      	beq.n	80013e8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80013c0:	4b14      	ldr	r3, [pc, #80]	; (8001414 <HAL_RCC_GetSysClockFreq+0xb8>)
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	0c5b      	lsrs	r3, r3, #17
 80013c6:	f003 0301 	and.w	r3, r3, #1
 80013ca:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80013ce:	4413      	add	r3, r2
 80013d0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80013d4:	61bb      	str	r3, [r7, #24]
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80013d6:	697b      	ldr	r3, [r7, #20]
 80013d8:	4a0f      	ldr	r2, [pc, #60]	; (8001418 <HAL_RCC_GetSysClockFreq+0xbc>)
 80013da:	fb02 f203 	mul.w	r2, r2, r3
 80013de:	69bb      	ldr	r3, [r7, #24]
 80013e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80013e4:	627b      	str	r3, [r7, #36]	; 0x24
 80013e6:	e004      	b.n	80013f2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	4a0c      	ldr	r2, [pc, #48]	; (800141c <HAL_RCC_GetSysClockFreq+0xc0>)
 80013ec:	fb02 f303 	mul.w	r3, r2, r3
 80013f0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80013f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013f4:	623b      	str	r3, [r7, #32]
      break;
 80013f6:	e002      	b.n	80013fe <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80013f8:	4b07      	ldr	r3, [pc, #28]	; (8001418 <HAL_RCC_GetSysClockFreq+0xbc>)
 80013fa:	623b      	str	r3, [r7, #32]
      break;
 80013fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80013fe:	6a3b      	ldr	r3, [r7, #32]
}
 8001400:	4618      	mov	r0, r3
 8001402:	3728      	adds	r7, #40	; 0x28
 8001404:	46bd      	mov	sp, r7
 8001406:	bc90      	pop	{r4, r7}
 8001408:	4770      	bx	lr
 800140a:	bf00      	nop
 800140c:	08003e6c 	.word	0x08003e6c
 8001410:	08003e7c 	.word	0x08003e7c
 8001414:	40021000 	.word	0x40021000
 8001418:	007a1200 	.word	0x007a1200
 800141c:	003d0900 	.word	0x003d0900

08001420 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001424:	4b02      	ldr	r3, [pc, #8]	; (8001430 <HAL_RCC_GetHCLKFreq+0x10>)
 8001426:	681b      	ldr	r3, [r3, #0]
}
 8001428:	4618      	mov	r0, r3
 800142a:	46bd      	mov	sp, r7
 800142c:	bc80      	pop	{r7}
 800142e:	4770      	bx	lr
 8001430:	20000008 	.word	0x20000008

08001434 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001438:	f7ff fff2 	bl	8001420 <HAL_RCC_GetHCLKFreq>
 800143c:	4601      	mov	r1, r0
 800143e:	4b05      	ldr	r3, [pc, #20]	; (8001454 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	0a1b      	lsrs	r3, r3, #8
 8001444:	f003 0307 	and.w	r3, r3, #7
 8001448:	4a03      	ldr	r2, [pc, #12]	; (8001458 <HAL_RCC_GetPCLK1Freq+0x24>)
 800144a:	5cd3      	ldrb	r3, [r2, r3]
 800144c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8001450:	4618      	mov	r0, r3
 8001452:	bd80      	pop	{r7, pc}
 8001454:	40021000 	.word	0x40021000
 8001458:	08003e90 	.word	0x08003e90

0800145c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001460:	f7ff ffde 	bl	8001420 <HAL_RCC_GetHCLKFreq>
 8001464:	4601      	mov	r1, r0
 8001466:	4b05      	ldr	r3, [pc, #20]	; (800147c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	0adb      	lsrs	r3, r3, #11
 800146c:	f003 0307 	and.w	r3, r3, #7
 8001470:	4a03      	ldr	r2, [pc, #12]	; (8001480 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001472:	5cd3      	ldrb	r3, [r2, r3]
 8001474:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8001478:	4618      	mov	r0, r3
 800147a:	bd80      	pop	{r7, pc}
 800147c:	40021000 	.word	0x40021000
 8001480:	08003e90 	.word	0x08003e90

08001484 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001484:	b480      	push	{r7}
 8001486:	b085      	sub	sp, #20
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800148c:	4b0a      	ldr	r3, [pc, #40]	; (80014b8 <RCC_Delay+0x34>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a0a      	ldr	r2, [pc, #40]	; (80014bc <RCC_Delay+0x38>)
 8001492:	fba2 2303 	umull	r2, r3, r2, r3
 8001496:	0a5b      	lsrs	r3, r3, #9
 8001498:	687a      	ldr	r2, [r7, #4]
 800149a:	fb02 f303 	mul.w	r3, r2, r3
 800149e:	60fb      	str	r3, [r7, #12]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 80014a0:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	1e5a      	subs	r2, r3, #1
 80014a6:	60fa      	str	r2, [r7, #12]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d1f9      	bne.n	80014a0 <RCC_Delay+0x1c>
}
 80014ac:	bf00      	nop
 80014ae:	3714      	adds	r7, #20
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bc80      	pop	{r7}
 80014b4:	4770      	bx	lr
 80014b6:	bf00      	nop
 80014b8:	20000008 	.word	0x20000008
 80014bc:	10624dd3 	.word	0x10624dd3

080014c0 <HAL_TIM_Base_Init>:
  *       Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim : TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d101      	bne.n	80014d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80014ce:	2301      	movs	r3, #1
 80014d0:	e01d      	b.n	800150e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80014d8:	b2db      	uxtb	r3, r3
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d106      	bne.n	80014ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	2200      	movs	r2, #0
 80014e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80014e6:	6878      	ldr	r0, [r7, #4]
 80014e8:	f001 fea4 	bl	8003234 <HAL_TIM_Base_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2202      	movs	r2, #2
 80014f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681a      	ldr	r2, [r3, #0]
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	3304      	adds	r3, #4
 80014fc:	4619      	mov	r1, r3
 80014fe:	4610      	mov	r0, r2
 8001500:	f000 fb52 	bl	8001ba8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2201      	movs	r2, #1
 8001508:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800150c:	2300      	movs	r3, #0
}
 800150e:	4618      	mov	r0, r3
 8001510:	3708      	adds	r7, #8
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}

08001516 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim : TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001516:	b480      	push	{r7}
 8001518:	b083      	sub	sp, #12
 800151a:	af00      	add	r7, sp, #0
 800151c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	68da      	ldr	r2, [r3, #12]
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f042 0201 	orr.w	r2, r2, #1
 800152c:	60da      	str	r2, [r3, #12]

   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	681a      	ldr	r2, [r3, #0]
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f042 0201 	orr.w	r2, r2, #1
 800153c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800153e:	2300      	movs	r3, #0
}
 8001540:	4618      	mov	r0, r3
 8001542:	370c      	adds	r7, #12
 8001544:	46bd      	mov	sp, r7
 8001546:	bc80      	pop	{r7}
 8001548:	4770      	bx	lr

0800154a <HAL_TIM_IC_Init>:
  *       Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim : TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800154a:	b580      	push	{r7, lr}
 800154c:	b082      	sub	sp, #8
 800154e:	af00      	add	r7, sp, #0
 8001550:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d101      	bne.n	800155c <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8001558:	2301      	movs	r3, #1
 800155a:	e01d      	b.n	8001598 <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001562:	b2db      	uxtb	r3, r3
 8001564:	2b00      	cmp	r3, #0
 8001566:	d106      	bne.n	8001576 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2200      	movs	r2, #0
 800156c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8001570:	6878      	ldr	r0, [r7, #4]
 8001572:	f000 f815 	bl	80015a0 <HAL_TIM_IC_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2202      	movs	r2, #2
 800157a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681a      	ldr	r2, [r3, #0]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	3304      	adds	r3, #4
 8001586:	4619      	mov	r1, r3
 8001588:	4610      	mov	r0, r2
 800158a:	f000 fb0d 	bl	8001ba8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2201      	movs	r2, #1
 8001592:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001596:	2300      	movs	r3, #0
}
 8001598:	4618      	mov	r0, r3
 800159a:	3708      	adds	r7, #8
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}

080015a0 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b083      	sub	sp, #12
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80015a8:	bf00      	nop
 80015aa:	370c      	adds	r7, #12
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bc80      	pop	{r7}
 80015b0:	4770      	bx	lr
	...

080015b4 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_IC_Start_IT (TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
 80015bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	2b0c      	cmp	r3, #12
 80015c2:	d841      	bhi.n	8001648 <HAL_TIM_IC_Start_IT+0x94>
 80015c4:	a201      	add	r2, pc, #4	; (adr r2, 80015cc <HAL_TIM_IC_Start_IT+0x18>)
 80015c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015ca:	bf00      	nop
 80015cc:	08001601 	.word	0x08001601
 80015d0:	08001649 	.word	0x08001649
 80015d4:	08001649 	.word	0x08001649
 80015d8:	08001649 	.word	0x08001649
 80015dc:	08001613 	.word	0x08001613
 80015e0:	08001649 	.word	0x08001649
 80015e4:	08001649 	.word	0x08001649
 80015e8:	08001649 	.word	0x08001649
 80015ec:	08001625 	.word	0x08001625
 80015f0:	08001649 	.word	0x08001649
 80015f4:	08001649 	.word	0x08001649
 80015f8:	08001649 	.word	0x08001649
 80015fc:	08001637 	.word	0x08001637
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	68da      	ldr	r2, [r3, #12]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f042 0202 	orr.w	r2, r2, #2
 800160e:	60da      	str	r2, [r3, #12]
    }
    break;
 8001610:	e01b      	b.n	800164a <HAL_TIM_IC_Start_IT+0x96>

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	68da      	ldr	r2, [r3, #12]
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f042 0204 	orr.w	r2, r2, #4
 8001620:	60da      	str	r2, [r3, #12]
    }
    break;
 8001622:	e012      	b.n	800164a <HAL_TIM_IC_Start_IT+0x96>

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	68da      	ldr	r2, [r3, #12]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f042 0208 	orr.w	r2, r2, #8
 8001632:	60da      	str	r2, [r3, #12]
    }
    break;
 8001634:	e009      	b.n	800164a <HAL_TIM_IC_Start_IT+0x96>

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	68da      	ldr	r2, [r3, #12]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f042 0210 	orr.w	r2, r2, #16
 8001644:	60da      	str	r2, [r3, #12]
    }
    break;
 8001646:	e000      	b.n	800164a <HAL_TIM_IC_Start_IT+0x96>

    default:
    break;
 8001648:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	2201      	movs	r2, #1
 8001650:	6839      	ldr	r1, [r7, #0]
 8001652:	4618      	mov	r0, r3
 8001654:	f000 fcd0 	bl	8001ff8 <TIM_CCxChannelCmd>

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	681a      	ldr	r2, [r3, #0]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f042 0201 	orr.w	r2, r2, #1
 8001666:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8001668:	2300      	movs	r3, #0
}
 800166a:	4618      	mov	r0, r3
 800166c:	3708      	adds	r7, #8
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop

08001674 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim : TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b082      	sub	sp, #8
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	691b      	ldr	r3, [r3, #16]
 8001682:	f003 0302 	and.w	r3, r3, #2
 8001686:	2b02      	cmp	r3, #2
 8001688:	d122      	bne.n	80016d0 <HAL_TIM_IRQHandler+0x5c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	68db      	ldr	r3, [r3, #12]
 8001690:	f003 0302 	and.w	r3, r3, #2
 8001694:	2b02      	cmp	r3, #2
 8001696:	d11b      	bne.n	80016d0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f06f 0202 	mvn.w	r2, #2
 80016a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2201      	movs	r2, #1
 80016a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	699b      	ldr	r3, [r3, #24]
 80016ae:	f003 0303 	and.w	r3, r3, #3
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d003      	beq.n	80016be <HAL_TIM_IRQHandler+0x4a>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 80016b6:	6878      	ldr	r0, [r7, #4]
 80016b8:	f001 fd0a 	bl	80030d0 <HAL_TIM_IC_CaptureCallback>
 80016bc:	e005      	b.n	80016ca <HAL_TIM_IRQHandler+0x56>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80016be:	6878      	ldr	r0, [r7, #4]
 80016c0:	f000 fa57 	bl	8001b72 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80016c4:	6878      	ldr	r0, [r7, #4]
 80016c6:	f000 fa5d 	bl	8001b84 <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2200      	movs	r2, #0
 80016ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	691b      	ldr	r3, [r3, #16]
 80016d6:	f003 0304 	and.w	r3, r3, #4
 80016da:	2b04      	cmp	r3, #4
 80016dc:	d122      	bne.n	8001724 <HAL_TIM_IRQHandler+0xb0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	68db      	ldr	r3, [r3, #12]
 80016e4:	f003 0304 	and.w	r3, r3, #4
 80016e8:	2b04      	cmp	r3, #4
 80016ea:	d11b      	bne.n	8001724 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f06f 0204 	mvn.w	r2, #4
 80016f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2202      	movs	r2, #2
 80016fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	699b      	ldr	r3, [r3, #24]
 8001702:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001706:	2b00      	cmp	r3, #0
 8001708:	d003      	beq.n	8001712 <HAL_TIM_IRQHandler+0x9e>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 800170a:	6878      	ldr	r0, [r7, #4]
 800170c:	f001 fce0 	bl	80030d0 <HAL_TIM_IC_CaptureCallback>
 8001710:	e005      	b.n	800171e <HAL_TIM_IRQHandler+0xaa>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001712:	6878      	ldr	r0, [r7, #4]
 8001714:	f000 fa2d 	bl	8001b72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001718:	6878      	ldr	r0, [r7, #4]
 800171a:	f000 fa33 	bl	8001b84 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2200      	movs	r2, #0
 8001722:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	691b      	ldr	r3, [r3, #16]
 800172a:	f003 0308 	and.w	r3, r3, #8
 800172e:	2b08      	cmp	r3, #8
 8001730:	d122      	bne.n	8001778 <HAL_TIM_IRQHandler+0x104>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	68db      	ldr	r3, [r3, #12]
 8001738:	f003 0308 	and.w	r3, r3, #8
 800173c:	2b08      	cmp	r3, #8
 800173e:	d11b      	bne.n	8001778 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f06f 0208 	mvn.w	r2, #8
 8001748:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2204      	movs	r2, #4
 800174e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	69db      	ldr	r3, [r3, #28]
 8001756:	f003 0303 	and.w	r3, r3, #3
 800175a:	2b00      	cmp	r3, #0
 800175c:	d003      	beq.n	8001766 <HAL_TIM_IRQHandler+0xf2>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 800175e:	6878      	ldr	r0, [r7, #4]
 8001760:	f001 fcb6 	bl	80030d0 <HAL_TIM_IC_CaptureCallback>
 8001764:	e005      	b.n	8001772 <HAL_TIM_IRQHandler+0xfe>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001766:	6878      	ldr	r0, [r7, #4]
 8001768:	f000 fa03 	bl	8001b72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800176c:	6878      	ldr	r0, [r7, #4]
 800176e:	f000 fa09 	bl	8001b84 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	2200      	movs	r2, #0
 8001776:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	691b      	ldr	r3, [r3, #16]
 800177e:	f003 0310 	and.w	r3, r3, #16
 8001782:	2b10      	cmp	r3, #16
 8001784:	d122      	bne.n	80017cc <HAL_TIM_IRQHandler+0x158>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	68db      	ldr	r3, [r3, #12]
 800178c:	f003 0310 	and.w	r3, r3, #16
 8001790:	2b10      	cmp	r3, #16
 8001792:	d11b      	bne.n	80017cc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f06f 0210 	mvn.w	r2, #16
 800179c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2208      	movs	r2, #8
 80017a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	69db      	ldr	r3, [r3, #28]
 80017aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d003      	beq.n	80017ba <HAL_TIM_IRQHandler+0x146>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 80017b2:	6878      	ldr	r0, [r7, #4]
 80017b4:	f001 fc8c 	bl	80030d0 <HAL_TIM_IC_CaptureCallback>
 80017b8:	e005      	b.n	80017c6 <HAL_TIM_IRQHandler+0x152>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80017ba:	6878      	ldr	r0, [r7, #4]
 80017bc:	f000 f9d9 	bl	8001b72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80017c0:	6878      	ldr	r0, [r7, #4]
 80017c2:	f000 f9df 	bl	8001b84 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2200      	movs	r2, #0
 80017ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	691b      	ldr	r3, [r3, #16]
 80017d2:	f003 0301 	and.w	r3, r3, #1
 80017d6:	2b01      	cmp	r3, #1
 80017d8:	d10e      	bne.n	80017f8 <HAL_TIM_IRQHandler+0x184>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	68db      	ldr	r3, [r3, #12]
 80017e0:	f003 0301 	and.w	r3, r3, #1
 80017e4:	2b01      	cmp	r3, #1
 80017e6:	d107      	bne.n	80017f8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f06f 0201 	mvn.w	r2, #1
 80017f0:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80017f2:	6878      	ldr	r0, [r7, #4]
 80017f4:	f001 fc7a 	bl	80030ec <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	691b      	ldr	r3, [r3, #16]
 80017fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001802:	2b80      	cmp	r3, #128	; 0x80
 8001804:	d10e      	bne.n	8001824 <HAL_TIM_IRQHandler+0x1b0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	68db      	ldr	r3, [r3, #12]
 800180c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001810:	2b80      	cmp	r3, #128	; 0x80
 8001812:	d107      	bne.n	8001824 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800181c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800181e:	6878      	ldr	r0, [r7, #4]
 8001820:	f000 fc59 	bl	80020d6 <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	691b      	ldr	r3, [r3, #16]
 800182a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800182e:	2b40      	cmp	r3, #64	; 0x40
 8001830:	d10e      	bne.n	8001850 <HAL_TIM_IRQHandler+0x1dc>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	68db      	ldr	r3, [r3, #12]
 8001838:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800183c:	2b40      	cmp	r3, #64	; 0x40
 800183e:	d107      	bne.n	8001850 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001848:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800184a:	6878      	ldr	r0, [r7, #4]
 800184c:	f000 f9a3 	bl	8001b96 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	691b      	ldr	r3, [r3, #16]
 8001856:	f003 0320 	and.w	r3, r3, #32
 800185a:	2b20      	cmp	r3, #32
 800185c:	d10e      	bne.n	800187c <HAL_TIM_IRQHandler+0x208>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	68db      	ldr	r3, [r3, #12]
 8001864:	f003 0320 	and.w	r3, r3, #32
 8001868:	2b20      	cmp	r3, #32
 800186a:	d107      	bne.n	800187c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f06f 0220 	mvn.w	r2, #32
 8001874:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8001876:	6878      	ldr	r0, [r7, #4]
 8001878:	f000 fc24 	bl	80020c4 <HAL_TIMEx_CommutationCallback>
    }
  }
}
 800187c:	bf00      	nop
 800187e:	3708      	adds	r7, #8
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}

08001884 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef* sConfig, uint32_t Channel)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b084      	sub	sp, #16
 8001888:	af00      	add	r7, sp, #0
 800188a:	60f8      	str	r0, [r7, #12]
 800188c:	60b9      	str	r1, [r7, #8]
 800188e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_POLARITY(sConfig->ICPolarity));
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  __HAL_LOCK(htim);
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001896:	2b01      	cmp	r3, #1
 8001898:	d101      	bne.n	800189e <HAL_TIM_IC_ConfigChannel+0x1a>
 800189a:	2302      	movs	r3, #2
 800189c:	e08a      	b.n	80019b4 <HAL_TIM_IC_ConfigChannel+0x130>
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	2201      	movs	r2, #1
 80018a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	2202      	movs	r2, #2
 80018aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d11b      	bne.n	80018ec <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	6818      	ldr	r0, [r3, #0]
 80018b8:	68bb      	ldr	r3, [r7, #8]
 80018ba:	6819      	ldr	r1, [r3, #0]
 80018bc:	68bb      	ldr	r3, [r7, #8]
 80018be:	685a      	ldr	r2, [r3, #4]
 80018c0:	68bb      	ldr	r3, [r7, #8]
 80018c2:	68db      	ldr	r3, [r3, #12]
 80018c4:	f000 f9d6 	bl	8001c74 <TIM_TI1_SetConfig>
               sConfig->ICPolarity,
               sConfig->ICSelection,
               sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	699a      	ldr	r2, [r3, #24]
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f022 020c 	bic.w	r2, r2, #12
 80018d6:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	6999      	ldr	r1, [r3, #24]
 80018de:	68bb      	ldr	r3, [r7, #8]
 80018e0:	689a      	ldr	r2, [r3, #8]
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	430a      	orrs	r2, r1
 80018e8:	619a      	str	r2, [r3, #24]
 80018ea:	e05a      	b.n	80019a2 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2b04      	cmp	r3, #4
 80018f0:	d11c      	bne.n	800192c <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	6818      	ldr	r0, [r3, #0]
 80018f6:	68bb      	ldr	r3, [r7, #8]
 80018f8:	6819      	ldr	r1, [r3, #0]
 80018fa:	68bb      	ldr	r3, [r7, #8]
 80018fc:	685a      	ldr	r2, [r3, #4]
 80018fe:	68bb      	ldr	r3, [r7, #8]
 8001900:	68db      	ldr	r3, [r3, #12]
 8001902:	f000 fa47 	bl	8001d94 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	699a      	ldr	r2, [r3, #24]
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8001914:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	6999      	ldr	r1, [r3, #24]
 800191c:	68bb      	ldr	r3, [r7, #8]
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	021a      	lsls	r2, r3, #8
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	430a      	orrs	r2, r1
 8001928:	619a      	str	r2, [r3, #24]
 800192a:	e03a      	b.n	80019a2 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2b08      	cmp	r3, #8
 8001930:	d11b      	bne.n	800196a <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	6818      	ldr	r0, [r3, #0]
 8001936:	68bb      	ldr	r3, [r7, #8]
 8001938:	6819      	ldr	r1, [r3, #0]
 800193a:	68bb      	ldr	r3, [r7, #8]
 800193c:	685a      	ldr	r2, [r3, #4]
 800193e:	68bb      	ldr	r3, [r7, #8]
 8001940:	68db      	ldr	r3, [r3, #12]
 8001942:	f000 fa9a 	bl	8001e7a <TIM_TI3_SetConfig>
               sConfig->ICPolarity,
               sConfig->ICSelection,
               sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	69da      	ldr	r2, [r3, #28]
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f022 020c 	bic.w	r2, r2, #12
 8001954:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	69d9      	ldr	r1, [r3, #28]
 800195c:	68bb      	ldr	r3, [r7, #8]
 800195e:	689a      	ldr	r2, [r3, #8]
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	430a      	orrs	r2, r1
 8001966:	61da      	str	r2, [r3, #28]
 8001968:	e01b      	b.n	80019a2 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	6818      	ldr	r0, [r3, #0]
 800196e:	68bb      	ldr	r3, [r7, #8]
 8001970:	6819      	ldr	r1, [r3, #0]
 8001972:	68bb      	ldr	r3, [r7, #8]
 8001974:	685a      	ldr	r2, [r3, #4]
 8001976:	68bb      	ldr	r3, [r7, #8]
 8001978:	68db      	ldr	r3, [r3, #12]
 800197a:	f000 fabd 	bl	8001ef8 <TIM_TI4_SetConfig>
               sConfig->ICPolarity,
               sConfig->ICSelection,
               sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	69da      	ldr	r2, [r3, #28]
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800198c:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	69d9      	ldr	r1, [r3, #28]
 8001994:	68bb      	ldr	r3, [r7, #8]
 8001996:	689b      	ldr	r3, [r3, #8]
 8001998:	021a      	lsls	r2, r3, #8
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	430a      	orrs	r2, r1
 80019a0:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	2201      	movs	r2, #1
 80019a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	2200      	movs	r2, #0
 80019ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80019b2:	2300      	movs	r3, #0
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	3710      	adds	r7, #16
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}

080019bc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig : pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */ 
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b084      	sub	sp, #16
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
 80019c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr = 0U;
 80019c6:	2300      	movs	r3, #0
 80019c8:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(htim);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80019d0:	2b01      	cmp	r3, #1
 80019d2:	d101      	bne.n	80019d8 <HAL_TIM_ConfigClockSource+0x1c>
 80019d4:	2302      	movs	r3, #2
 80019d6:	e0c8      	b.n	8001b6a <HAL_TIM_ConfigClockSource+0x1ae>
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2201      	movs	r2, #1
 80019dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2202      	movs	r2, #2
 80019e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	689b      	ldr	r3, [r3, #8]
 80019ee:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80019f6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80019fe:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	68fa      	ldr	r2, [r7, #12]
 8001a06:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	2b40      	cmp	r3, #64	; 0x40
 8001a0e:	d077      	beq.n	8001b00 <HAL_TIM_ConfigClockSource+0x144>
 8001a10:	2b40      	cmp	r3, #64	; 0x40
 8001a12:	d80e      	bhi.n	8001a32 <HAL_TIM_ConfigClockSource+0x76>
 8001a14:	2b10      	cmp	r3, #16
 8001a16:	f000 808a 	beq.w	8001b2e <HAL_TIM_ConfigClockSource+0x172>
 8001a1a:	2b10      	cmp	r3, #16
 8001a1c:	d802      	bhi.n	8001a24 <HAL_TIM_ConfigClockSource+0x68>
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d07e      	beq.n	8001b20 <HAL_TIM_ConfigClockSource+0x164>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
    }
    break;

  default:
    break;
 8001a22:	e099      	b.n	8001b58 <HAL_TIM_ConfigClockSource+0x19c>
  switch (sClockSourceConfig->ClockSource)
 8001a24:	2b20      	cmp	r3, #32
 8001a26:	f000 8089 	beq.w	8001b3c <HAL_TIM_ConfigClockSource+0x180>
 8001a2a:	2b30      	cmp	r3, #48	; 0x30
 8001a2c:	f000 808d 	beq.w	8001b4a <HAL_TIM_ConfigClockSource+0x18e>
    break;
 8001a30:	e092      	b.n	8001b58 <HAL_TIM_ConfigClockSource+0x19c>
  switch (sClockSourceConfig->ClockSource)
 8001a32:	2b70      	cmp	r3, #112	; 0x70
 8001a34:	d016      	beq.n	8001a64 <HAL_TIM_ConfigClockSource+0xa8>
 8001a36:	2b70      	cmp	r3, #112	; 0x70
 8001a38:	d804      	bhi.n	8001a44 <HAL_TIM_ConfigClockSource+0x88>
 8001a3a:	2b50      	cmp	r3, #80	; 0x50
 8001a3c:	d040      	beq.n	8001ac0 <HAL_TIM_ConfigClockSource+0x104>
 8001a3e:	2b60      	cmp	r3, #96	; 0x60
 8001a40:	d04e      	beq.n	8001ae0 <HAL_TIM_ConfigClockSource+0x124>
    break;
 8001a42:	e089      	b.n	8001b58 <HAL_TIM_ConfigClockSource+0x19c>
  switch (sClockSourceConfig->ClockSource)
 8001a44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a48:	d003      	beq.n	8001a52 <HAL_TIM_ConfigClockSource+0x96>
 8001a4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a4e:	d024      	beq.n	8001a9a <HAL_TIM_ConfigClockSource+0xde>
    break;
 8001a50:	e082      	b.n	8001b58 <HAL_TIM_ConfigClockSource+0x19c>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	689a      	ldr	r2, [r3, #8]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f022 0207 	bic.w	r2, r2, #7
 8001a60:	609a      	str	r2, [r3, #8]
    break;
 8001a62:	e079      	b.n	8001b58 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ETR_SetConfig(htim->Instance,
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6818      	ldr	r0, [r3, #0]
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	6899      	ldr	r1, [r3, #8]
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	685a      	ldr	r2, [r3, #4]
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	68db      	ldr	r3, [r3, #12]
 8001a74:	f000 fa9f 	bl	8001fb6 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	689b      	ldr	r3, [r3, #8]
 8001a7e:	60fb      	str	r3, [r7, #12]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001a86:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001a8e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	68fa      	ldr	r2, [r7, #12]
 8001a96:	609a      	str	r2, [r3, #8]
    break;
 8001a98:	e05e      	b.n	8001b58 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ETR_SetConfig(htim->Instance,
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6818      	ldr	r0, [r3, #0]
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	6899      	ldr	r1, [r3, #8]
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	685a      	ldr	r2, [r3, #4]
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	68db      	ldr	r3, [r3, #12]
 8001aaa:	f000 fa84 	bl	8001fb6 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	689a      	ldr	r2, [r3, #8]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001abc:	609a      	str	r2, [r3, #8]
    break;
 8001abe:	e04b      	b.n	8001b58 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6818      	ldr	r0, [r3, #0]
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	6859      	ldr	r1, [r3, #4]
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	68db      	ldr	r3, [r3, #12]
 8001acc:	461a      	mov	r2, r3
 8001ace:	f000 f92f 	bl	8001d30 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	2150      	movs	r1, #80	; 0x50
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f000 fa4d 	bl	8001f78 <TIM_ITRx_SetConfig>
    break;
 8001ade:	e03b      	b.n	8001b58 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6818      	ldr	r0, [r3, #0]
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	6859      	ldr	r1, [r3, #4]
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	68db      	ldr	r3, [r3, #12]
 8001aec:	461a      	mov	r2, r3
 8001aee:	f000 f991 	bl	8001e14 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	2160      	movs	r1, #96	; 0x60
 8001af8:	4618      	mov	r0, r3
 8001afa:	f000 fa3d 	bl	8001f78 <TIM_ITRx_SetConfig>
    break;
 8001afe:	e02b      	b.n	8001b58 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6818      	ldr	r0, [r3, #0]
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	6859      	ldr	r1, [r3, #4]
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	68db      	ldr	r3, [r3, #12]
 8001b0c:	461a      	mov	r2, r3
 8001b0e:	f000 f90f 	bl	8001d30 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	2140      	movs	r1, #64	; 0x40
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f000 fa2d 	bl	8001f78 <TIM_ITRx_SetConfig>
    break;
 8001b1e:	e01b      	b.n	8001b58 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	2100      	movs	r1, #0
 8001b26:	4618      	mov	r0, r3
 8001b28:	f000 fa26 	bl	8001f78 <TIM_ITRx_SetConfig>
    break;
 8001b2c:	e014      	b.n	8001b58 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	2110      	movs	r1, #16
 8001b34:	4618      	mov	r0, r3
 8001b36:	f000 fa1f 	bl	8001f78 <TIM_ITRx_SetConfig>
    break;
 8001b3a:	e00d      	b.n	8001b58 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	2120      	movs	r1, #32
 8001b42:	4618      	mov	r0, r3
 8001b44:	f000 fa18 	bl	8001f78 <TIM_ITRx_SetConfig>
    break;
 8001b48:	e006      	b.n	8001b58 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	2130      	movs	r1, #48	; 0x30
 8001b50:	4618      	mov	r0, r3
 8001b52:	f000 fa11 	bl	8001f78 <TIM_ITRx_SetConfig>
    break;
 8001b56:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2200      	movs	r2, #0
 8001b64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001b68:	2300      	movs	r3, #0
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	3710      	adds	r7, #16
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}

08001b72 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non blocking mode 
  * @param  htim : TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b72:	b480      	push	{r7}
 8001b74:	b083      	sub	sp, #12
 8001b76:	af00      	add	r7, sp, #0
 8001b78:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001b7a:	bf00      	nop
 8001b7c:	370c      	adds	r7, #12
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bc80      	pop	{r7}
 8001b82:	4770      	bx	lr

08001b84 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b083      	sub	sp, #12
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001b8c:	bf00      	nop
 8001b8e:	370c      	adds	r7, #12
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bc80      	pop	{r7}
 8001b94:	4770      	bx	lr

08001b96 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001b96:	b480      	push	{r7}
 8001b98:	b083      	sub	sp, #12
 8001b9a:	af00      	add	r7, sp, #0
 8001b9c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001b9e:	bf00      	nop
 8001ba0:	370c      	adds	r7, #12
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bc80      	pop	{r7}
 8001ba6:	4770      	bx	lr

08001ba8 <TIM_Base_SetConfig>:
  * @param  TIMx : TIM periheral
  * @param  Structure : TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b085      	sub	sp, #20
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
 8001bb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	4a2a      	ldr	r2, [pc, #168]	; (8001c68 <TIM_Base_SetConfig+0xc0>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d00b      	beq.n	8001bdc <TIM_Base_SetConfig+0x34>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bca:	d007      	beq.n	8001bdc <TIM_Base_SetConfig+0x34>
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	4a27      	ldr	r2, [pc, #156]	; (8001c6c <TIM_Base_SetConfig+0xc4>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d003      	beq.n	8001bdc <TIM_Base_SetConfig+0x34>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	4a26      	ldr	r2, [pc, #152]	; (8001c70 <TIM_Base_SetConfig+0xc8>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d108      	bne.n	8001bee <TIM_Base_SetConfig+0x46>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001be2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	68fa      	ldr	r2, [r7, #12]
 8001bea:	4313      	orrs	r3, r2
 8001bec:	60fb      	str	r3, [r7, #12]
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	4a1d      	ldr	r2, [pc, #116]	; (8001c68 <TIM_Base_SetConfig+0xc0>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d00b      	beq.n	8001c0e <TIM_Base_SetConfig+0x66>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bfc:	d007      	beq.n	8001c0e <TIM_Base_SetConfig+0x66>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	4a1a      	ldr	r2, [pc, #104]	; (8001c6c <TIM_Base_SetConfig+0xc4>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d003      	beq.n	8001c0e <TIM_Base_SetConfig+0x66>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	4a19      	ldr	r2, [pc, #100]	; (8001c70 <TIM_Base_SetConfig+0xc8>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d108      	bne.n	8001c20 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	68db      	ldr	r3, [r3, #12]
 8001c1a:	68fa      	ldr	r2, [r7, #12]
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  tmpcr1 &= ~TIM_CR1_ARPE;
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001c26:	60fb      	str	r3, [r7, #12]
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	695b      	ldr	r3, [r3, #20]
 8001c2c:	68fa      	ldr	r2, [r7, #12]
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	68fa      	ldr	r2, [r7, #12]
 8001c36:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	689a      	ldr	r2, [r3, #8]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	681a      	ldr	r2, [r3, #0]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	4a07      	ldr	r2, [pc, #28]	; (8001c68 <TIM_Base_SetConfig+0xc0>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d103      	bne.n	8001c58 <TIM_Base_SetConfig+0xb0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	691a      	ldr	r2, [r3, #16]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	615a      	str	r2, [r3, #20]
}
 8001c5e:	bf00      	nop
 8001c60:	3714      	adds	r7, #20
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bc80      	pop	{r7}
 8001c66:	4770      	bx	lr
 8001c68:	40012c00 	.word	0x40012c00
 8001c6c:	40000400 	.word	0x40000400
 8001c70:	40000800 	.word	0x40000800

08001c74 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be 
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b087      	sub	sp, #28
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	60f8      	str	r0, [r7, #12]
 8001c7c:	60b9      	str	r1, [r7, #8]
 8001c7e:	607a      	str	r2, [r7, #4]
 8001c80:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1 = 0U;
 8001c82:	2300      	movs	r3, #0
 8001c84:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 8001c86:	2300      	movs	r3, #0
 8001c88:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	6a1b      	ldr	r3, [r3, #32]
 8001c8e:	f023 0201 	bic.w	r2, r3, #1
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	699b      	ldr	r3, [r3, #24]
 8001c9a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	6a1b      	ldr	r3, [r3, #32]
 8001ca0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	4a1f      	ldr	r2, [pc, #124]	; (8001d24 <TIM_TI1_SetConfig+0xb0>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d00b      	beq.n	8001cc2 <TIM_TI1_SetConfig+0x4e>
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cb0:	d007      	beq.n	8001cc2 <TIM_TI1_SetConfig+0x4e>
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	4a1c      	ldr	r2, [pc, #112]	; (8001d28 <TIM_TI1_SetConfig+0xb4>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d003      	beq.n	8001cc2 <TIM_TI1_SetConfig+0x4e>
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	4a1b      	ldr	r2, [pc, #108]	; (8001d2c <TIM_TI1_SetConfig+0xb8>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d101      	bne.n	8001cc6 <TIM_TI1_SetConfig+0x52>
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e000      	b.n	8001cc8 <TIM_TI1_SetConfig+0x54>
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d008      	beq.n	8001cde <TIM_TI1_SetConfig+0x6a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	f023 0303 	bic.w	r3, r3, #3
 8001cd2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8001cd4:	697a      	ldr	r2, [r7, #20]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	617b      	str	r3, [r7, #20]
 8001cdc:	e003      	b.n	8001ce6 <TIM_TI1_SetConfig+0x72>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8001cde:	697b      	ldr	r3, [r7, #20]
 8001ce0:	f043 0301 	orr.w	r3, r3, #1
 8001ce4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001cec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	011b      	lsls	r3, r3, #4
 8001cf2:	b2db      	uxtb	r3, r3
 8001cf4:	697a      	ldr	r2, [r7, #20]
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	f023 030a 	bic.w	r3, r3, #10
 8001d00:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8001d02:	68bb      	ldr	r3, [r7, #8]
 8001d04:	f003 030a 	and.w	r3, r3, #10
 8001d08:	693a      	ldr	r2, [r7, #16]
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	697a      	ldr	r2, [r7, #20]
 8001d12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	693a      	ldr	r2, [r7, #16]
 8001d18:	621a      	str	r2, [r3, #32]
}
 8001d1a:	bf00      	nop
 8001d1c:	371c      	adds	r7, #28
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bc80      	pop	{r7}
 8001d22:	4770      	bx	lr
 8001d24:	40012c00 	.word	0x40012c00
 8001d28:	40000400 	.word	0x40000400
 8001d2c:	40000800 	.word	0x40000800

08001d30 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter : Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b087      	sub	sp, #28
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	60f8      	str	r0, [r7, #12]
 8001d38:	60b9      	str	r1, [r7, #8]
 8001d3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 8001d40:	2300      	movs	r3, #0
 8001d42:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	6a1b      	ldr	r3, [r3, #32]
 8001d48:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	6a1b      	ldr	r3, [r3, #32]
 8001d4e:	f023 0201 	bic.w	r2, r3, #1
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	699b      	ldr	r3, [r3, #24]
 8001d5a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001d62:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	011b      	lsls	r3, r3, #4
 8001d68:	697a      	ldr	r2, [r7, #20]
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	f023 030a 	bic.w	r3, r3, #10
 8001d74:	613b      	str	r3, [r7, #16]
  tmpccer |= TIM_ICPolarity;
 8001d76:	693a      	ldr	r2, [r7, #16]
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	697a      	ldr	r2, [r7, #20]
 8001d82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	693a      	ldr	r2, [r7, #16]
 8001d88:	621a      	str	r2, [r3, #32]
}
 8001d8a:	bf00      	nop
 8001d8c:	371c      	adds	r7, #28
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bc80      	pop	{r7}
 8001d92:	4770      	bx	lr

08001d94 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be 
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b087      	sub	sp, #28
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	60f8      	str	r0, [r7, #12]
 8001d9c:	60b9      	str	r1, [r7, #8]
 8001d9e:	607a      	str	r2, [r7, #4]
 8001da0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1 = 0U;
 8001da2:	2300      	movs	r3, #0
 8001da4:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 8001da6:	2300      	movs	r3, #0
 8001da8:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	6a1b      	ldr	r3, [r3, #32]
 8001dae:	f023 0210 	bic.w	r2, r3, #16
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	699b      	ldr	r3, [r3, #24]
 8001dba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	6a1b      	ldr	r3, [r3, #32]
 8001dc0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8001dc2:	697b      	ldr	r3, [r7, #20]
 8001dc4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001dc8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	021b      	lsls	r3, r3, #8
 8001dce:	697a      	ldr	r2, [r7, #20]
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001dda:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	031b      	lsls	r3, r3, #12
 8001de0:	b29b      	uxth	r3, r3
 8001de2:	697a      	ldr	r2, [r7, #20]
 8001de4:	4313      	orrs	r3, r2
 8001de6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001de8:	693b      	ldr	r3, [r7, #16]
 8001dea:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001dee:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8001df0:	68bb      	ldr	r3, [r7, #8]
 8001df2:	011b      	lsls	r3, r3, #4
 8001df4:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8001df8:	693a      	ldr	r2, [r7, #16]
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	697a      	ldr	r2, [r7, #20]
 8001e02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	693a      	ldr	r2, [r7, #16]
 8001e08:	621a      	str	r2, [r3, #32]
}
 8001e0a:	bf00      	nop
 8001e0c:	371c      	adds	r7, #28
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bc80      	pop	{r7}
 8001e12:	4770      	bx	lr

08001e14 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter : Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b087      	sub	sp, #28
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	60f8      	str	r0, [r7, #12]
 8001e1c:	60b9      	str	r1, [r7, #8]
 8001e1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 8001e20:	2300      	movs	r3, #0
 8001e22:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 8001e24:	2300      	movs	r3, #0
 8001e26:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	6a1b      	ldr	r3, [r3, #32]
 8001e2c:	f023 0210 	bic.w	r2, r3, #16
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	699b      	ldr	r3, [r3, #24]
 8001e38:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	6a1b      	ldr	r3, [r3, #32]
 8001e3e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001e46:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	031b      	lsls	r3, r3, #12
 8001e4c:	697a      	ldr	r2, [r7, #20]
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001e58:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001e5a:	68bb      	ldr	r3, [r7, #8]
 8001e5c:	011b      	lsls	r3, r3, #4
 8001e5e:	693a      	ldr	r2, [r7, #16]
 8001e60:	4313      	orrs	r3, r2
 8001e62:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	697a      	ldr	r2, [r7, #20]
 8001e68:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	693a      	ldr	r2, [r7, #16]
 8001e6e:	621a      	str	r2, [r3, #32]
}
 8001e70:	bf00      	nop
 8001e72:	371c      	adds	r7, #28
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bc80      	pop	{r7}
 8001e78:	4770      	bx	lr

08001e7a <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be 
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8001e7a:	b480      	push	{r7}
 8001e7c:	b087      	sub	sp, #28
 8001e7e:	af00      	add	r7, sp, #0
 8001e80:	60f8      	str	r0, [r7, #12]
 8001e82:	60b9      	str	r1, [r7, #8]
 8001e84:	607a      	str	r2, [r7, #4]
 8001e86:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2 = 0U;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	6a1b      	ldr	r3, [r3, #32]
 8001e94:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	69db      	ldr	r3, [r3, #28]
 8001ea0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	6a1b      	ldr	r3, [r3, #32]
 8001ea6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8001ea8:	697b      	ldr	r3, [r7, #20]
 8001eaa:	f023 0303 	bic.w	r3, r3, #3
 8001eae:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8001eb0:	697a      	ldr	r2, [r7, #20]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001ebe:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	011b      	lsls	r3, r3, #4
 8001ec4:	b2db      	uxtb	r3, r3
 8001ec6:	697a      	ldr	r2, [r7, #20]
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8001ecc:	693b      	ldr	r3, [r7, #16]
 8001ece:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001ed2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P));
 8001ed4:	68bb      	ldr	r3, [r7, #8]
 8001ed6:	021b      	lsls	r3, r3, #8
 8001ed8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001edc:	693a      	ldr	r2, [r7, #16]
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	697a      	ldr	r2, [r7, #20]
 8001ee6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	693a      	ldr	r2, [r7, #16]
 8001eec:	621a      	str	r2, [r3, #32]
}
 8001eee:	bf00      	nop
 8001ef0:	371c      	adds	r7, #28
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bc80      	pop	{r7}
 8001ef6:	4770      	bx	lr

08001ef8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b087      	sub	sp, #28
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	60f8      	str	r0, [r7, #12]
 8001f00:	60b9      	str	r1, [r7, #8]
 8001f02:	607a      	str	r2, [r7, #4]
 8001f04:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2 = 0U;
 8001f06:	2300      	movs	r3, #0
 8001f08:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	6a1b      	ldr	r3, [r3, #32]
 8001f12:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	69db      	ldr	r3, [r3, #28]
 8001f1e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	6a1b      	ldr	r3, [r3, #32]
 8001f24:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f2c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	021b      	lsls	r3, r3, #8
 8001f32:	697a      	ldr	r2, [r7, #20]
 8001f34:	4313      	orrs	r3, r2
 8001f36:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001f3e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	031b      	lsls	r3, r3, #12
 8001f44:	b29b      	uxth	r3, r3
 8001f46:	697a      	ldr	r2, [r7, #20]
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~TIM_CCER_CC4P;
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001f52:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	031b      	lsls	r3, r3, #12
 8001f58:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f5c:	693a      	ldr	r2, [r7, #16]
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	697a      	ldr	r2, [r7, #20]
 8001f66:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	693a      	ldr	r2, [r7, #16]
 8001f6c:	621a      	str	r2, [r3, #32]
}
 8001f6e:	bf00      	nop
 8001f70:	371c      	adds	r7, #28
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bc80      	pop	{r7}
 8001f76:	4770      	bx	lr

08001f78 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2 : Filtered Timer Input 2
  *            @arg TIM_TS_ETRF : External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b085      	sub	sp, #20
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
 8001f80:	460b      	mov	r3, r1
 8001f82:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr = 0U;
 8001f84:	2300      	movs	r3, #0
 8001f86:	60fb      	str	r3, [r7, #12]

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	689b      	ldr	r3, [r3, #8]
 8001f8c:	60fb      	str	r3, [r7, #12]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f94:	60fb      	str	r3, [r7, #12]
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001f96:	887b      	ldrh	r3, [r7, #2]
 8001f98:	f043 0307 	orr.w	r3, r3, #7
 8001f9c:	b29b      	uxth	r3, r3
 8001f9e:	461a      	mov	r2, r3
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	60fb      	str	r3, [r7, #12]
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	68fa      	ldr	r2, [r7, #12]
 8001faa:	609a      	str	r2, [r3, #8]
}
 8001fac:	bf00      	nop
 8001fae:	3714      	adds	r7, #20
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bc80      	pop	{r7}
 8001fb4:	4770      	bx	lr

08001fb6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001fb6:	b480      	push	{r7}
 8001fb8:	b087      	sub	sp, #28
 8001fba:	af00      	add	r7, sp, #0
 8001fbc:	60f8      	str	r0, [r7, #12]
 8001fbe:	60b9      	str	r1, [r7, #8]
 8001fc0:	607a      	str	r2, [r7, #4]
 8001fc2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr = 0U;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	617b      	str	r3, [r7, #20]

  tmpsmcr = TIMx->SMCR;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	689b      	ldr	r3, [r3, #8]
 8001fcc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001fd4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	021a      	lsls	r2, r3, #8
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	431a      	orrs	r2, r3
 8001fde:	68bb      	ldr	r3, [r7, #8]
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	697a      	ldr	r2, [r7, #20]
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	697a      	ldr	r2, [r7, #20]
 8001fec:	609a      	str	r2, [r3, #8]
}
 8001fee:	bf00      	nop
 8001ff0:	371c      	adds	r7, #28
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bc80      	pop	{r7}
 8001ff6:	4770      	bx	lr

08001ff8 <TIM_CCxChannelCmd>:
  * @param  ChannelState : specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b087      	sub	sp, #28
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	60f8      	str	r0, [r7, #12]
 8002000:	60b9      	str	r1, [r7, #8]
 8002002:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8002004:	2300      	movs	r3, #0
 8002006:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 8002008:	2201      	movs	r2, #1
 800200a:	68bb      	ldr	r3, [r7, #8]
 800200c:	fa02 f303 	lsl.w	r3, r2, r3
 8002010:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	6a1a      	ldr	r2, [r3, #32]
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	43db      	mvns	r3, r3
 800201a:	401a      	ands	r2, r3
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	6a1a      	ldr	r2, [r3, #32]
 8002024:	6879      	ldr	r1, [r7, #4]
 8002026:	68bb      	ldr	r3, [r7, #8]
 8002028:	fa01 f303 	lsl.w	r3, r1, r3
 800202c:	431a      	orrs	r2, r3
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	621a      	str	r2, [r3, #32]
}
 8002032:	bf00      	nop
 8002034:	371c      	adds	r7, #28
 8002036:	46bd      	mov	sp, r7
 8002038:	bc80      	pop	{r7}
 800203a:	4770      	bx	lr

0800203c <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 800203c:	b480      	push	{r7}
 800203e:	b083      	sub	sp, #12
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
 8002044:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800204c:	2b01      	cmp	r3, #1
 800204e:	d101      	bne.n	8002054 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002050:	2302      	movs	r3, #2
 8002052:	e032      	b.n	80020ba <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2201      	movs	r2, #1
 8002058:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2202      	movs	r2, #2
 8002060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	685a      	ldr	r2, [r3, #4]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002072:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	6859      	ldr	r1, [r3, #4]
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	681a      	ldr	r2, [r3, #0]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	430a      	orrs	r2, r1
 8002084:	605a      	str	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	689a      	ldr	r2, [r3, #8]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002094:	609a      	str	r2, [r3, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	6899      	ldr	r1, [r3, #8]
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	685a      	ldr	r2, [r3, #4]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	430a      	orrs	r2, r1
 80020a6:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2201      	movs	r2, #1
 80020ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2200      	movs	r2, #0
 80020b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80020b8:	2300      	movs	r3, #0
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	370c      	adds	r7, #12
 80020be:	46bd      	mov	sp, r7
 80020c0:	bc80      	pop	{r7}
 80020c2:	4770      	bx	lr

080020c4 <HAL_TIMEx_CommutationCallback>:
  * @brief  Hall commutation changed callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b083      	sub	sp, #12
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 80020cc:	bf00      	nop
 80020ce:	370c      	adds	r7, #12
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bc80      	pop	{r7}
 80020d4:	4770      	bx	lr

080020d6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80020d6:	b480      	push	{r7}
 80020d8:	b083      	sub	sp, #12
 80020da:	af00      	add	r7, sp, #0
 80020dc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80020de:	bf00      	nop
 80020e0:	370c      	adds	r7, #12
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bc80      	pop	{r7}
 80020e6:	4770      	bx	lr

080020e8 <HAL_UART_Init>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b082      	sub	sp, #8
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d101      	bne.n	80020fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	e03f      	b.n	800217a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */
  
  if(huart->gState == HAL_UART_STATE_RESET)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002100:	b2db      	uxtb	r3, r3
 8002102:	2b00      	cmp	r3, #0
 8002104:	d106      	bne.n	8002114 <HAL_UART_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2200      	movs	r2, #0
 800210a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 800210e:	6878      	ldr	r0, [r7, #4]
 8002110:	f001 f93e 	bl	8003390 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2224      	movs	r2, #36	; 0x24
 8002118:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	68da      	ldr	r2, [r3, #12]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800212a:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800212c:	6878      	ldr	r0, [r7, #4]
 800212e:	f000 fb6b 	bl	8002808 <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	691a      	ldr	r2, [r3, #16]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002140:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	695a      	ldr	r2, [r3, #20]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002150:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	68da      	ldr	r2, [r3, #12]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002160:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2200      	movs	r2, #0
 8002166:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2220      	movs	r2, #32
 800216c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2220      	movs	r2, #32
 8002174:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  return HAL_OK;
 8002178:	2300      	movs	r3, #0
}
 800217a:	4618      	mov	r0, r3
 800217c:	3708      	adds	r7, #8
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}
	...

08002184 <HAL_UART_Transmit_DMA>:
  * @param  pData: Pointer to data buffer
  * @param  Size: Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b086      	sub	sp, #24
 8002188:	af00      	add	r7, sp, #0
 800218a:	60f8      	str	r0, [r7, #12]
 800218c:	60b9      	str	r1, [r7, #8]
 800218e:	4613      	mov	r3, r2
 8002190:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;
  
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002198:	b2db      	uxtb	r3, r3
 800219a:	2b20      	cmp	r3, #32
 800219c:	d153      	bne.n	8002246 <HAL_UART_Transmit_DMA+0xc2>
  {
    if((pData == NULL) || (Size == 0U))
 800219e:	68bb      	ldr	r3, [r7, #8]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d002      	beq.n	80021aa <HAL_UART_Transmit_DMA+0x26>
 80021a4:	88fb      	ldrh	r3, [r7, #6]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d101      	bne.n	80021ae <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80021aa:	2301      	movs	r3, #1
 80021ac:	e04c      	b.n	8002248 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80021b4:	2b01      	cmp	r3, #1
 80021b6:	d101      	bne.n	80021bc <HAL_UART_Transmit_DMA+0x38>
 80021b8:	2302      	movs	r3, #2
 80021ba:	e045      	b.n	8002248 <HAL_UART_Transmit_DMA+0xc4>
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	2201      	movs	r2, #1
 80021c0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 80021c4:	68ba      	ldr	r2, [r7, #8]
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	88fa      	ldrh	r2, [r7, #6]
 80021ce:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	88fa      	ldrh	r2, [r7, #6]
 80021d4:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	2200      	movs	r2, #0
 80021da:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	2221      	movs	r2, #33	; 0x21
 80021e0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e8:	4a19      	ldr	r2, [pc, #100]	; (8002250 <HAL_UART_Transmit_DMA+0xcc>)
 80021ea:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f0:	4a18      	ldr	r2, [pc, #96]	; (8002254 <HAL_UART_Transmit_DMA+0xd0>)
 80021f2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f8:	4a17      	ldr	r2, [pc, #92]	; (8002258 <HAL_UART_Transmit_DMA+0xd4>)
 80021fa:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002200:	2200      	movs	r2, #0
 8002202:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (uint32_t*)&pData;
 8002204:	f107 0308 	add.w	r3, r7, #8
 8002208:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t*)tmp, (uint32_t)&huart->Instance->DR, Size);
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	6819      	ldr	r1, [r3, #0]
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	3304      	adds	r3, #4
 8002218:	461a      	mov	r2, r3
 800221a:	88fb      	ldrh	r3, [r7, #6]
 800221c:	f7fe f97e 	bl	800051c <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002228:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	2200      	movs	r2, #0
 800222e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	695a      	ldr	r2, [r3, #20]
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002240:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8002242:	2300      	movs	r3, #0
 8002244:	e000      	b.n	8002248 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8002246:	2302      	movs	r3, #2
  }
}
 8002248:	4618      	mov	r0, r3
 800224a:	3718      	adds	r7, #24
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}
 8002250:	0800249d 	.word	0x0800249d
 8002254:	080024ef 	.word	0x080024ef
 8002258:	0800250b 	.word	0x0800250b

0800225c <HAL_UART_IRQHandler>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b088      	sub	sp, #32
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	61fb      	str	r3, [r7, #28]
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	68db      	ldr	r3, [r3, #12]
 8002272:	61bb      	str	r3, [r7, #24]
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	695b      	ldr	r3, [r3, #20]
 800227a:	617b      	str	r3, [r7, #20]
   uint32_t errorflags = 0x00U;
 800227c:	2300      	movs	r3, #0
 800227e:	613b      	str	r3, [r7, #16]
   uint32_t dmarequest = 0x00U;
 8002280:	2300      	movs	r3, #0
 8002282:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002284:	69fb      	ldr	r3, [r7, #28]
 8002286:	f003 030f 	and.w	r3, r3, #15
 800228a:	613b      	str	r3, [r7, #16]
  if(errorflags == RESET)
 800228c:	693b      	ldr	r3, [r7, #16]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d10d      	bne.n	80022ae <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002292:	69fb      	ldr	r3, [r7, #28]
 8002294:	f003 0320 	and.w	r3, r3, #32
 8002298:	2b00      	cmp	r3, #0
 800229a:	d008      	beq.n	80022ae <HAL_UART_IRQHandler+0x52>
 800229c:	69bb      	ldr	r3, [r7, #24]
 800229e:	f003 0320 	and.w	r3, r3, #32
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d003      	beq.n	80022ae <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80022a6:	6878      	ldr	r0, [r7, #4]
 80022a8:	f000 fa2c 	bl	8002704 <UART_Receive_IT>
      return;
 80022ac:	e0cc      	b.n	8002448 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	f000 80ab 	beq.w	800240c <HAL_UART_IRQHandler+0x1b0>
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	f003 0301 	and.w	r3, r3, #1
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d105      	bne.n	80022cc <HAL_UART_IRQHandler+0x70>
 80022c0:	69bb      	ldr	r3, [r7, #24]
 80022c2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	f000 80a0 	beq.w	800240c <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80022cc:	69fb      	ldr	r3, [r7, #28]
 80022ce:	f003 0301 	and.w	r3, r3, #1
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d00a      	beq.n	80022ec <HAL_UART_IRQHandler+0x90>
 80022d6:	69bb      	ldr	r3, [r7, #24]
 80022d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d005      	beq.n	80022ec <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022e4:	f043 0201 	orr.w	r2, r3, #1
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80022ec:	69fb      	ldr	r3, [r7, #28]
 80022ee:	f003 0304 	and.w	r3, r3, #4
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d00a      	beq.n	800230c <HAL_UART_IRQHandler+0xb0>
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	f003 0301 	and.w	r3, r3, #1
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d005      	beq.n	800230c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002304:	f043 0202 	orr.w	r2, r3, #2
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800230c:	69fb      	ldr	r3, [r7, #28]
 800230e:	f003 0302 	and.w	r3, r3, #2
 8002312:	2b00      	cmp	r3, #0
 8002314:	d00a      	beq.n	800232c <HAL_UART_IRQHandler+0xd0>
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	f003 0301 	and.w	r3, r3, #1
 800231c:	2b00      	cmp	r3, #0
 800231e:	d005      	beq.n	800232c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002324:	f043 0204 	orr.w	r2, r3, #4
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800232c:	69fb      	ldr	r3, [r7, #28]
 800232e:	f003 0308 	and.w	r3, r3, #8
 8002332:	2b00      	cmp	r3, #0
 8002334:	d00a      	beq.n	800234c <HAL_UART_IRQHandler+0xf0>
 8002336:	697b      	ldr	r3, [r7, #20]
 8002338:	f003 0301 	and.w	r3, r3, #1
 800233c:	2b00      	cmp	r3, #0
 800233e:	d005      	beq.n	800234c <HAL_UART_IRQHandler+0xf0>
    { 
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002344:	f043 0208 	orr.w	r2, r3, #8
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002350:	2b00      	cmp	r3, #0
 8002352:	d078      	beq.n	8002446 <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002354:	69fb      	ldr	r3, [r7, #28]
 8002356:	f003 0320 	and.w	r3, r3, #32
 800235a:	2b00      	cmp	r3, #0
 800235c:	d007      	beq.n	800236e <HAL_UART_IRQHandler+0x112>
 800235e:	69bb      	ldr	r3, [r7, #24]
 8002360:	f003 0320 	and.w	r3, r3, #32
 8002364:	2b00      	cmp	r3, #0
 8002366:	d002      	beq.n	800236e <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8002368:	6878      	ldr	r0, [r7, #4]
 800236a:	f000 f9cb 	bl	8002704 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	695b      	ldr	r3, [r3, #20]
 8002374:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002378:	2b00      	cmp	r3, #0
 800237a:	bf14      	ite	ne
 800237c:	2301      	movne	r3, #1
 800237e:	2300      	moveq	r3, #0
 8002380:	b2db      	uxtb	r3, r3
 8002382:	60fb      	str	r3, [r7, #12]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002388:	f003 0308 	and.w	r3, r3, #8
 800238c:	2b00      	cmp	r3, #0
 800238e:	d102      	bne.n	8002396 <HAL_UART_IRQHandler+0x13a>
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d031      	beq.n	80023fa <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002396:	6878      	ldr	r0, [r7, #4]
 8002398:	f000 f916 	bl	80025c8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	695b      	ldr	r3, [r3, #20]
 80023a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d023      	beq.n	80023f2 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	695a      	ldr	r2, [r3, #20]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80023b8:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if(huart->hdmarx != NULL)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d013      	beq.n	80023ea <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback : 
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023c6:	4a22      	ldr	r2, [pc, #136]	; (8002450 <HAL_UART_IRQHandler+0x1f4>)
 80023c8:	635a      	str	r2, [r3, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023ce:	4618      	mov	r0, r3
 80023d0:	f7fe f904 	bl	80005dc <HAL_DMA_Abort_IT>
 80023d4:	4603      	mov	r3, r0
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d016      	beq.n	8002408 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023e0:	687a      	ldr	r2, [r7, #4]
 80023e2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80023e4:	4610      	mov	r0, r2
 80023e6:	4798      	blx	r3
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80023e8:	e00e      	b.n	8002408 <HAL_UART_IRQHandler+0x1ac>
            }
          }
          else
          {
            /* Call user error callback */
            HAL_UART_ErrorCallback(huart);
 80023ea:	6878      	ldr	r0, [r7, #4]
 80023ec:	f000 f84d 	bl	800248a <HAL_UART_ErrorCallback>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80023f0:	e00a      	b.n	8002408 <HAL_UART_IRQHandler+0x1ac>
          }
        }
        else
        {
          /* Call user error callback */
          HAL_UART_ErrorCallback(huart);
 80023f2:	6878      	ldr	r0, [r7, #4]
 80023f4:	f000 f849 	bl	800248a <HAL_UART_ErrorCallback>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80023f8:	e006      	b.n	8002408 <HAL_UART_IRQHandler+0x1ac>
      }
      else
      {
        /* Non Blocking error : transfer could go on. 
           Error is notified to user through user error callback */
        HAL_UART_ErrorCallback(huart);
 80023fa:	6878      	ldr	r0, [r7, #4]
 80023fc:	f000 f845 	bl	800248a <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2200      	movs	r2, #0
 8002404:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8002406:	e01e      	b.n	8002446 <HAL_UART_IRQHandler+0x1ea>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002408:	bf00      	nop
    return;
 800240a:	e01c      	b.n	8002446 <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800240c:	69fb      	ldr	r3, [r7, #28]
 800240e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002412:	2b00      	cmp	r3, #0
 8002414:	d008      	beq.n	8002428 <HAL_UART_IRQHandler+0x1cc>
 8002416:	69bb      	ldr	r3, [r7, #24]
 8002418:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800241c:	2b00      	cmp	r3, #0
 800241e:	d003      	beq.n	8002428 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8002420:	6878      	ldr	r0, [r7, #4]
 8002422:	f000 f902 	bl	800262a <UART_Transmit_IT>
    return;
 8002426:	e00f      	b.n	8002448 <HAL_UART_IRQHandler+0x1ec>
  }
  
  /* UART in mode Transmitter end --------------------------------------------*/
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002428:	69fb      	ldr	r3, [r7, #28]
 800242a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800242e:	2b00      	cmp	r3, #0
 8002430:	d00a      	beq.n	8002448 <HAL_UART_IRQHandler+0x1ec>
 8002432:	69bb      	ldr	r3, [r7, #24]
 8002434:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002438:	2b00      	cmp	r3, #0
 800243a:	d005      	beq.n	8002448 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 800243c:	6878      	ldr	r0, [r7, #4]
 800243e:	f000 f949 	bl	80026d4 <UART_EndTransmit_IT>
    return;
 8002442:	bf00      	nop
 8002444:	e000      	b.n	8002448 <HAL_UART_IRQHandler+0x1ec>
    return;
 8002446:	bf00      	nop
  }
}
 8002448:	3720      	adds	r7, #32
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	08002603 	.word	0x08002603

08002454 <HAL_UART_TxCpltCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002454:	b480      	push	{r7}
 8002456:	b083      	sub	sp, #12
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */ 
}
 800245c:	bf00      	nop
 800245e:	370c      	adds	r7, #12
 8002460:	46bd      	mov	sp, r7
 8002462:	bc80      	pop	{r7}
 8002464:	4770      	bx	lr

08002466 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002466:	b480      	push	{r7}
 8002468:	b083      	sub	sp, #12
 800246a:	af00      	add	r7, sp, #0
 800246c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */ 
}
 800246e:	bf00      	nop
 8002470:	370c      	adds	r7, #12
 8002472:	46bd      	mov	sp, r7
 8002474:	bc80      	pop	{r7}
 8002476:	4770      	bx	lr

08002478 <HAL_UART_RxCpltCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002478:	b480      	push	{r7}
 800247a:	b083      	sub	sp, #12
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002480:	bf00      	nop
 8002482:	370c      	adds	r7, #12
 8002484:	46bd      	mov	sp, r7
 8002486:	bc80      	pop	{r7}
 8002488:	4770      	bx	lr

0800248a <HAL_UART_ErrorCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800248a:	b480      	push	{r7}
 800248c:	b083      	sub	sp, #12
 800248e:	af00      	add	r7, sp, #0
 8002490:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart); 
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */ 
}
 8002492:	bf00      	nop
 8002494:	370c      	adds	r7, #12
 8002496:	46bd      	mov	sp, r7
 8002498:	bc80      	pop	{r7}
 800249a:	4770      	bx	lr

0800249c <UART_DMATransmitCplt>:
  * @brief  DMA UART transmit process complete callback. 
  * @param  hdma: DMA handle
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b084      	sub	sp, #16
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a8:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f003 0320 	and.w	r3, r3, #32
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d113      	bne.n	80024e0 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0U;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	2200      	movs	r2, #0
 80024bc:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	695a      	ldr	r2, [r3, #20]
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80024cc:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	68da      	ldr	r2, [r3, #12]
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80024dc:	60da      	str	r2, [r3, #12]
  /* DMA Circular mode */
  else
  {
    HAL_UART_TxCpltCallback(huart);
  }
}
 80024de:	e002      	b.n	80024e6 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 80024e0:	68f8      	ldr	r0, [r7, #12]
 80024e2:	f7ff ffb7 	bl	8002454 <HAL_UART_TxCpltCallback>
}
 80024e6:	bf00      	nop
 80024e8:	3710      	adds	r7, #16
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}

080024ee <UART_DMATxHalfCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80024ee:	b580      	push	{r7, lr}
 80024f0:	b084      	sub	sp, #16
 80024f2:	af00      	add	r7, sp, #0
 80024f4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024fa:	60fb      	str	r3, [r7, #12]

  HAL_UART_TxHalfCpltCallback(huart);
 80024fc:	68f8      	ldr	r0, [r7, #12]
 80024fe:	f7ff ffb2 	bl	8002466 <HAL_UART_TxHalfCpltCallback>
}
 8002502:	bf00      	nop
 8002504:	3710      	adds	r7, #16
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}

0800250a <UART_DMAError>:
  * @brief  DMA UART communication error callback.
  * @param  hdma: DMA handle
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800250a:	b580      	push	{r7, lr}
 800250c:	b084      	sub	sp, #16
 800250e:	af00      	add	r7, sp, #0
 8002510:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8002512:	2300      	movs	r3, #0
 8002514:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800251a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	695b      	ldr	r3, [r3, #20]
 8002522:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002526:	2b00      	cmp	r3, #0
 8002528:	bf14      	ite	ne
 800252a:	2301      	movne	r3, #1
 800252c:	2300      	moveq	r3, #0
 800252e:	b2db      	uxtb	r3, r3
 8002530:	60fb      	str	r3, [r7, #12]
  if((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8002532:	68bb      	ldr	r3, [r7, #8]
 8002534:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002538:	b2db      	uxtb	r3, r3
 800253a:	2b21      	cmp	r3, #33	; 0x21
 800253c:	d108      	bne.n	8002550 <UART_DMAError+0x46>
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d005      	beq.n	8002550 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0U;
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	2200      	movs	r2, #0
 8002548:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800254a:	68b8      	ldr	r0, [r7, #8]
 800254c:	f000 f827 	bl	800259e <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR); 
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	695b      	ldr	r3, [r3, #20]
 8002556:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800255a:	2b00      	cmp	r3, #0
 800255c:	bf14      	ite	ne
 800255e:	2301      	movne	r3, #1
 8002560:	2300      	moveq	r3, #0
 8002562:	b2db      	uxtb	r3, r3
 8002564:	60fb      	str	r3, [r7, #12]
  if((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800256c:	b2db      	uxtb	r3, r3
 800256e:	2b22      	cmp	r3, #34	; 0x22
 8002570:	d108      	bne.n	8002584 <UART_DMAError+0x7a>
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d005      	beq.n	8002584 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0U;
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	2200      	movs	r2, #0
 800257c:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800257e:	68b8      	ldr	r0, [r7, #8]
 8002580:	f000 f822 	bl	80025c8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002588:	f043 0210 	orr.w	r2, r3, #16
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	63da      	str	r2, [r3, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 8002590:	68b8      	ldr	r0, [r7, #8]
 8002592:	f7ff ff7a 	bl	800248a <HAL_UART_ErrorCallback>
}
 8002596:	bf00      	nop
 8002598:	3710      	adds	r7, #16
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}

0800259e <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart: UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800259e:	b480      	push	{r7}
 80025a0:	b083      	sub	sp, #12
 80025a2:	af00      	add	r7, sp, #0
 80025a4:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	68da      	ldr	r2, [r3, #12]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80025b4:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2220      	movs	r2, #32
 80025ba:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 80025be:	bf00      	nop
 80025c0:	370c      	adds	r7, #12
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bc80      	pop	{r7}
 80025c6:	4770      	bx	lr

080025c8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart: UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b083      	sub	sp, #12
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	68da      	ldr	r2, [r3, #12]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80025de:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	695a      	ldr	r2, [r3, #20]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f022 0201 	bic.w	r2, r2, #1
 80025ee:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2220      	movs	r2, #32
 80025f4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80025f8:	bf00      	nop
 80025fa:	370c      	adds	r7, #12
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bc80      	pop	{r7}
 8002600:	4770      	bx	lr

08002602 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002602:	b580      	push	{r7, lr}
 8002604:	b084      	sub	sp, #16
 8002606:	af00      	add	r7, sp, #0
 8002608:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800260e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	2200      	movs	r2, #0
 8002614:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	2200      	movs	r2, #0
 800261a:	84da      	strh	r2, [r3, #38]	; 0x26

  HAL_UART_ErrorCallback(huart);
 800261c:	68f8      	ldr	r0, [r7, #12]
 800261e:	f7ff ff34 	bl	800248a <HAL_UART_ErrorCallback>
}
 8002622:	bf00      	nop
 8002624:	3710      	adds	r7, #16
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}

0800262a <UART_Transmit_IT>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800262a:	b480      	push	{r7}
 800262c:	b085      	sub	sp, #20
 800262e:	af00      	add	r7, sp, #0
 8002630:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  
  /* Check that a Tx process is ongoing */
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002638:	b2db      	uxtb	r3, r3
 800263a:	2b21      	cmp	r3, #33	; 0x21
 800263c:	d144      	bne.n	80026c8 <UART_Transmit_IT+0x9e>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	689b      	ldr	r3, [r3, #8]
 8002642:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002646:	d11a      	bne.n	800267e <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t*) huart->pTxBuffPtr;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6a1b      	ldr	r3, [r3, #32]
 800264c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	881b      	ldrh	r3, [r3, #0]
 8002652:	461a      	mov	r2, r3
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800265c:	605a      	str	r2, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	691b      	ldr	r3, [r3, #16]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d105      	bne.n	8002672 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6a1b      	ldr	r3, [r3, #32]
 800266a:	1c9a      	adds	r2, r3, #2
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	621a      	str	r2, [r3, #32]
 8002670:	e00e      	b.n	8002690 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6a1b      	ldr	r3, [r3, #32]
 8002676:	1c5a      	adds	r2, r3, #1
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	621a      	str	r2, [r3, #32]
 800267c:	e008      	b.n	8002690 <UART_Transmit_IT+0x66>
      }
    } 
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6a1b      	ldr	r3, [r3, #32]
 8002682:	1c59      	adds	r1, r3, #1
 8002684:	687a      	ldr	r2, [r7, #4]
 8002686:	6211      	str	r1, [r2, #32]
 8002688:	781a      	ldrb	r2, [r3, #0]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	605a      	str	r2, [r3, #4]
    }

    if(--huart->TxXferCount == 0U)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002694:	b29b      	uxth	r3, r3
 8002696:	3b01      	subs	r3, #1
 8002698:	b29b      	uxth	r3, r3
 800269a:	687a      	ldr	r2, [r7, #4]
 800269c:	4619      	mov	r1, r3
 800269e:	84d1      	strh	r1, [r2, #38]	; 0x26
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d10f      	bne.n	80026c4 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	68da      	ldr	r2, [r3, #12]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80026b2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */    
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	68da      	ldr	r2, [r3, #12]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80026c2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80026c4:	2300      	movs	r3, #0
 80026c6:	e000      	b.n	80026ca <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80026c8:	2302      	movs	r3, #2
  }
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	3714      	adds	r7, #20
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bc80      	pop	{r7}
 80026d2:	4770      	bx	lr

080026d4 <UART_EndTransmit_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b082      	sub	sp, #8
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */    
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	68da      	ldr	r2, [r3, #12]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80026ea:	60da      	str	r2, [r3, #12]
  
  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2220      	movs	r2, #32
 80026f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 80026f4:	6878      	ldr	r0, [r7, #4]
 80026f6:	f7ff fead 	bl	8002454 <HAL_UART_TxCpltCallback>
  
  return HAL_OK;
 80026fa:	2300      	movs	r3, #0
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	3708      	adds	r7, #8
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}

08002704 <UART_Receive_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b084      	sub	sp, #16
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  
  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002712:	b2db      	uxtb	r3, r3
 8002714:	2b22      	cmp	r3, #34	; 0x22
 8002716:	d171      	bne.n	80027fc <UART_Receive_IT+0xf8>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002720:	d123      	bne.n	800276a <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002726:	60fb      	str	r3, [r7, #12]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	691b      	ldr	r3, [r3, #16]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d10e      	bne.n	800274e <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	b29b      	uxth	r3, r3
 8002738:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800273c:	b29a      	uxth	r2, r3
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002746:	1c9a      	adds	r2, r3, #2
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	629a      	str	r2, [r3, #40]	; 0x28
 800274c:	e029      	b.n	80027a2 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	b29b      	uxth	r3, r3
 8002756:	b2db      	uxtb	r3, r3
 8002758:	b29a      	uxth	r2, r3
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002762:	1c5a      	adds	r2, r3, #1
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	629a      	str	r2, [r3, #40]	; 0x28
 8002768:	e01b      	b.n	80027a2 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if(huart->Init.Parity == UART_PARITY_NONE)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	691b      	ldr	r3, [r3, #16]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d10a      	bne.n	8002788 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	6858      	ldr	r0, [r3, #4]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800277c:	1c59      	adds	r1, r3, #1
 800277e:	687a      	ldr	r2, [r7, #4]
 8002780:	6291      	str	r1, [r2, #40]	; 0x28
 8002782:	b2c2      	uxtb	r2, r0
 8002784:	701a      	strb	r2, [r3, #0]
 8002786:	e00c      	b.n	80027a2 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	b2da      	uxtb	r2, r3
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002794:	1c58      	adds	r0, r3, #1
 8002796:	6879      	ldr	r1, [r7, #4]
 8002798:	6288      	str	r0, [r1, #40]	; 0x28
 800279a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800279e:	b2d2      	uxtb	r2, r2
 80027a0:	701a      	strb	r2, [r3, #0]
      }
    }

    if(--huart->RxXferCount == 0U)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80027a6:	b29b      	uxth	r3, r3
 80027a8:	3b01      	subs	r3, #1
 80027aa:	b29b      	uxth	r3, r3
 80027ac:	687a      	ldr	r2, [r7, #4]
 80027ae:	4619      	mov	r1, r3
 80027b0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d120      	bne.n	80027f8 <UART_Receive_IT+0xf4>
    {
      /* Disable the IRDA Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	68da      	ldr	r2, [r3, #12]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f022 0220 	bic.w	r2, r2, #32
 80027c4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	68da      	ldr	r2, [r3, #12]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80027d4:	60da      	str	r2, [r3, #12]
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	695a      	ldr	r2, [r3, #20]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f022 0201 	bic.w	r2, r2, #1
 80027e4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2220      	movs	r2, #32
 80027ea:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

      HAL_UART_RxCpltCallback(huart);
 80027ee:	6878      	ldr	r0, [r7, #4]
 80027f0:	f7ff fe42 	bl	8002478 <HAL_UART_RxCpltCallback>

      return HAL_OK;
 80027f4:	2300      	movs	r3, #0
 80027f6:	e002      	b.n	80027fe <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80027f8:	2300      	movs	r3, #0
 80027fa:	e000      	b.n	80027fe <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80027fc:	2302      	movs	r3, #2
  }
}
 80027fe:	4618      	mov	r0, r3
 8002800:	3710      	adds	r7, #16
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}
	...

08002808 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002808:	b5b0      	push	{r4, r5, r7, lr}
 800280a:	b084      	sub	sp, #16
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8002810:	2300      	movs	r3, #0
 8002812:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	691b      	ldr	r3, [r3, #16]
 800281a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	68da      	ldr	r2, [r3, #12]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	430a      	orrs	r2, r1
 8002828:	611a      	str	r2, [r3, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	689a      	ldr	r2, [r3, #8]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	691b      	ldr	r3, [r3, #16]
 8002832:	431a      	orrs	r2, r3
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	695b      	ldr	r3, [r3, #20]
 8002838:	4313      	orrs	r3, r2
 800283a:	68fa      	ldr	r2, [r7, #12]
 800283c:	4313      	orrs	r3, r2
 800283e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, 
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	68db      	ldr	r3, [r3, #12]
 8002846:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800284a:	f023 030c 	bic.w	r3, r3, #12
 800284e:	687a      	ldr	r2, [r7, #4]
 8002850:	6812      	ldr	r2, [r2, #0]
 8002852:	68f9      	ldr	r1, [r7, #12]
 8002854:	430b      	orrs	r3, r1
 8002856:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	695b      	ldr	r3, [r3, #20]
 800285e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	699a      	ldr	r2, [r3, #24]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	430a      	orrs	r2, r1
 800286c:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a6f      	ldr	r2, [pc, #444]	; (8002a30 <UART_SetConfig+0x228>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d16b      	bne.n	8002950 <UART_SetConfig+0x148>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002878:	f7fe fdf0 	bl	800145c <HAL_RCC_GetPCLK2Freq>
 800287c:	4602      	mov	r2, r0
 800287e:	4613      	mov	r3, r2
 8002880:	009b      	lsls	r3, r3, #2
 8002882:	4413      	add	r3, r2
 8002884:	009a      	lsls	r2, r3, #2
 8002886:	441a      	add	r2, r3
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	009b      	lsls	r3, r3, #2
 800288e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002892:	4a68      	ldr	r2, [pc, #416]	; (8002a34 <UART_SetConfig+0x22c>)
 8002894:	fba2 2303 	umull	r2, r3, r2, r3
 8002898:	095b      	lsrs	r3, r3, #5
 800289a:	011c      	lsls	r4, r3, #4
 800289c:	f7fe fdde 	bl	800145c <HAL_RCC_GetPCLK2Freq>
 80028a0:	4602      	mov	r2, r0
 80028a2:	4613      	mov	r3, r2
 80028a4:	009b      	lsls	r3, r3, #2
 80028a6:	4413      	add	r3, r2
 80028a8:	009a      	lsls	r2, r3, #2
 80028aa:	441a      	add	r2, r3
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	009b      	lsls	r3, r3, #2
 80028b2:	fbb2 f5f3 	udiv	r5, r2, r3
 80028b6:	f7fe fdd1 	bl	800145c <HAL_RCC_GetPCLK2Freq>
 80028ba:	4602      	mov	r2, r0
 80028bc:	4613      	mov	r3, r2
 80028be:	009b      	lsls	r3, r3, #2
 80028c0:	4413      	add	r3, r2
 80028c2:	009a      	lsls	r2, r3, #2
 80028c4:	441a      	add	r2, r3
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	009b      	lsls	r3, r3, #2
 80028cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80028d0:	4a58      	ldr	r2, [pc, #352]	; (8002a34 <UART_SetConfig+0x22c>)
 80028d2:	fba2 2303 	umull	r2, r3, r2, r3
 80028d6:	095b      	lsrs	r3, r3, #5
 80028d8:	2264      	movs	r2, #100	; 0x64
 80028da:	fb02 f303 	mul.w	r3, r2, r3
 80028de:	1aeb      	subs	r3, r5, r3
 80028e0:	011b      	lsls	r3, r3, #4
 80028e2:	3332      	adds	r3, #50	; 0x32
 80028e4:	4a53      	ldr	r2, [pc, #332]	; (8002a34 <UART_SetConfig+0x22c>)
 80028e6:	fba2 2303 	umull	r2, r3, r2, r3
 80028ea:	095b      	lsrs	r3, r3, #5
 80028ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80028f0:	441c      	add	r4, r3
 80028f2:	f7fe fdb3 	bl	800145c <HAL_RCC_GetPCLK2Freq>
 80028f6:	4602      	mov	r2, r0
 80028f8:	4613      	mov	r3, r2
 80028fa:	009b      	lsls	r3, r3, #2
 80028fc:	4413      	add	r3, r2
 80028fe:	009a      	lsls	r2, r3, #2
 8002900:	441a      	add	r2, r3
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	009b      	lsls	r3, r3, #2
 8002908:	fbb2 f5f3 	udiv	r5, r2, r3
 800290c:	f7fe fda6 	bl	800145c <HAL_RCC_GetPCLK2Freq>
 8002910:	4602      	mov	r2, r0
 8002912:	4613      	mov	r3, r2
 8002914:	009b      	lsls	r3, r3, #2
 8002916:	4413      	add	r3, r2
 8002918:	009a      	lsls	r2, r3, #2
 800291a:	441a      	add	r2, r3
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	009b      	lsls	r3, r3, #2
 8002922:	fbb2 f3f3 	udiv	r3, r2, r3
 8002926:	4a43      	ldr	r2, [pc, #268]	; (8002a34 <UART_SetConfig+0x22c>)
 8002928:	fba2 2303 	umull	r2, r3, r2, r3
 800292c:	095b      	lsrs	r3, r3, #5
 800292e:	2264      	movs	r2, #100	; 0x64
 8002930:	fb02 f303 	mul.w	r3, r2, r3
 8002934:	1aeb      	subs	r3, r5, r3
 8002936:	011b      	lsls	r3, r3, #4
 8002938:	3332      	adds	r3, #50	; 0x32
 800293a:	4a3e      	ldr	r2, [pc, #248]	; (8002a34 <UART_SetConfig+0x22c>)
 800293c:	fba2 2303 	umull	r2, r3, r2, r3
 8002940:	095b      	lsrs	r3, r3, #5
 8002942:	f003 020f 	and.w	r2, r3, #15
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4422      	add	r2, r4
 800294c:	609a      	str	r2, [r3, #8]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 800294e:	e06a      	b.n	8002a26 <UART_SetConfig+0x21e>
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002950:	f7fe fd70 	bl	8001434 <HAL_RCC_GetPCLK1Freq>
 8002954:	4602      	mov	r2, r0
 8002956:	4613      	mov	r3, r2
 8002958:	009b      	lsls	r3, r3, #2
 800295a:	4413      	add	r3, r2
 800295c:	009a      	lsls	r2, r3, #2
 800295e:	441a      	add	r2, r3
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	009b      	lsls	r3, r3, #2
 8002966:	fbb2 f3f3 	udiv	r3, r2, r3
 800296a:	4a32      	ldr	r2, [pc, #200]	; (8002a34 <UART_SetConfig+0x22c>)
 800296c:	fba2 2303 	umull	r2, r3, r2, r3
 8002970:	095b      	lsrs	r3, r3, #5
 8002972:	011c      	lsls	r4, r3, #4
 8002974:	f7fe fd5e 	bl	8001434 <HAL_RCC_GetPCLK1Freq>
 8002978:	4602      	mov	r2, r0
 800297a:	4613      	mov	r3, r2
 800297c:	009b      	lsls	r3, r3, #2
 800297e:	4413      	add	r3, r2
 8002980:	009a      	lsls	r2, r3, #2
 8002982:	441a      	add	r2, r3
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	009b      	lsls	r3, r3, #2
 800298a:	fbb2 f5f3 	udiv	r5, r2, r3
 800298e:	f7fe fd51 	bl	8001434 <HAL_RCC_GetPCLK1Freq>
 8002992:	4602      	mov	r2, r0
 8002994:	4613      	mov	r3, r2
 8002996:	009b      	lsls	r3, r3, #2
 8002998:	4413      	add	r3, r2
 800299a:	009a      	lsls	r2, r3, #2
 800299c:	441a      	add	r2, r3
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	009b      	lsls	r3, r3, #2
 80029a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80029a8:	4a22      	ldr	r2, [pc, #136]	; (8002a34 <UART_SetConfig+0x22c>)
 80029aa:	fba2 2303 	umull	r2, r3, r2, r3
 80029ae:	095b      	lsrs	r3, r3, #5
 80029b0:	2264      	movs	r2, #100	; 0x64
 80029b2:	fb02 f303 	mul.w	r3, r2, r3
 80029b6:	1aeb      	subs	r3, r5, r3
 80029b8:	011b      	lsls	r3, r3, #4
 80029ba:	3332      	adds	r3, #50	; 0x32
 80029bc:	4a1d      	ldr	r2, [pc, #116]	; (8002a34 <UART_SetConfig+0x22c>)
 80029be:	fba2 2303 	umull	r2, r3, r2, r3
 80029c2:	095b      	lsrs	r3, r3, #5
 80029c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80029c8:	441c      	add	r4, r3
 80029ca:	f7fe fd33 	bl	8001434 <HAL_RCC_GetPCLK1Freq>
 80029ce:	4602      	mov	r2, r0
 80029d0:	4613      	mov	r3, r2
 80029d2:	009b      	lsls	r3, r3, #2
 80029d4:	4413      	add	r3, r2
 80029d6:	009a      	lsls	r2, r3, #2
 80029d8:	441a      	add	r2, r3
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	009b      	lsls	r3, r3, #2
 80029e0:	fbb2 f5f3 	udiv	r5, r2, r3
 80029e4:	f7fe fd26 	bl	8001434 <HAL_RCC_GetPCLK1Freq>
 80029e8:	4602      	mov	r2, r0
 80029ea:	4613      	mov	r3, r2
 80029ec:	009b      	lsls	r3, r3, #2
 80029ee:	4413      	add	r3, r2
 80029f0:	009a      	lsls	r2, r3, #2
 80029f2:	441a      	add	r2, r3
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	009b      	lsls	r3, r3, #2
 80029fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80029fe:	4a0d      	ldr	r2, [pc, #52]	; (8002a34 <UART_SetConfig+0x22c>)
 8002a00:	fba2 2303 	umull	r2, r3, r2, r3
 8002a04:	095b      	lsrs	r3, r3, #5
 8002a06:	2264      	movs	r2, #100	; 0x64
 8002a08:	fb02 f303 	mul.w	r3, r2, r3
 8002a0c:	1aeb      	subs	r3, r5, r3
 8002a0e:	011b      	lsls	r3, r3, #4
 8002a10:	3332      	adds	r3, #50	; 0x32
 8002a12:	4a08      	ldr	r2, [pc, #32]	; (8002a34 <UART_SetConfig+0x22c>)
 8002a14:	fba2 2303 	umull	r2, r3, r2, r3
 8002a18:	095b      	lsrs	r3, r3, #5
 8002a1a:	f003 020f 	and.w	r2, r3, #15
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4422      	add	r2, r4
 8002a24:	609a      	str	r2, [r3, #8]
}
 8002a26:	bf00      	nop
 8002a28:	3710      	adds	r7, #16
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bdb0      	pop	{r4, r5, r7, pc}
 8002a2e:	bf00      	nop
 8002a30:	40013800 	.word	0x40013800
 8002a34:	51eb851f 	.word	0x51eb851f

08002a38 <CTL_Ini>:
*  Parameter(s)   :  
*  Return Value   :  
******************************************************************************/

void CTL_Ini (void)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	af00      	add	r7, sp, #0

}
 8002a3c:	bf00      	nop
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bc80      	pop	{r7}
 8002a42:	4770      	bx	lr

08002a44 <CTL_Main>:
*  Parameter(s)   :
*  Return Value   :
******************************************************************************/

void CTL_Main (void)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	af00      	add	r7, sp, #0


	HAL_Delay(100);
 8002a48:	2064      	movs	r0, #100	; 0x64
 8002a4a:	f7fd fbe1 	bl	8000210 <HAL_Delay>

	//sprintf((char*)SER1_au8SndBuf, "%d, %d, %d, %d, %d, %d, %d, %d\n", TIM2_u16Ch1_PulseTime, TIM2_u16Ch2_PulseTime, TIM2_u16Ch3_PulseTime, TIM2_u16Ch4_PulseTime, TIM3_u16Ch1_PulseTime, TIM3_u16Ch2_PulseTime, TIM3_u16Ch3_PulseTime, TIM3_u16Ch4_PulseTime);


	unAnyData.u16Data = TIM2_u16Ch1_PulseTime;
 8002a4e:	4b40      	ldr	r3, [pc, #256]	; (8002b50 <CTL_Main+0x10c>)
 8002a50:	881a      	ldrh	r2, [r3, #0]
 8002a52:	4b40      	ldr	r3, [pc, #256]	; (8002b54 <CTL_Main+0x110>)
 8002a54:	801a      	strh	r2, [r3, #0]
	au8Temp[0] = unAnyData.au8Data[0];
 8002a56:	4b3f      	ldr	r3, [pc, #252]	; (8002b54 <CTL_Main+0x110>)
 8002a58:	781a      	ldrb	r2, [r3, #0]
 8002a5a:	4b3f      	ldr	r3, [pc, #252]	; (8002b58 <CTL_Main+0x114>)
 8002a5c:	701a      	strb	r2, [r3, #0]
	au8Temp[1] = unAnyData.au8Data[1];
 8002a5e:	4b3d      	ldr	r3, [pc, #244]	; (8002b54 <CTL_Main+0x110>)
 8002a60:	785a      	ldrb	r2, [r3, #1]
 8002a62:	4b3d      	ldr	r3, [pc, #244]	; (8002b58 <CTL_Main+0x114>)
 8002a64:	705a      	strb	r2, [r3, #1]

	unAnyData.u16Data = TIM2_u16Ch2_PulseTime;
 8002a66:	4b3d      	ldr	r3, [pc, #244]	; (8002b5c <CTL_Main+0x118>)
 8002a68:	881a      	ldrh	r2, [r3, #0]
 8002a6a:	4b3a      	ldr	r3, [pc, #232]	; (8002b54 <CTL_Main+0x110>)
 8002a6c:	801a      	strh	r2, [r3, #0]
	au8Temp[2] = unAnyData.au8Data[0];
 8002a6e:	4b39      	ldr	r3, [pc, #228]	; (8002b54 <CTL_Main+0x110>)
 8002a70:	781a      	ldrb	r2, [r3, #0]
 8002a72:	4b39      	ldr	r3, [pc, #228]	; (8002b58 <CTL_Main+0x114>)
 8002a74:	709a      	strb	r2, [r3, #2]
	au8Temp[3] = unAnyData.au8Data[1];
 8002a76:	4b37      	ldr	r3, [pc, #220]	; (8002b54 <CTL_Main+0x110>)
 8002a78:	785a      	ldrb	r2, [r3, #1]
 8002a7a:	4b37      	ldr	r3, [pc, #220]	; (8002b58 <CTL_Main+0x114>)
 8002a7c:	70da      	strb	r2, [r3, #3]

	unAnyData.u16Data = TIM2_u16Ch3_PulseTime;
 8002a7e:	4b38      	ldr	r3, [pc, #224]	; (8002b60 <CTL_Main+0x11c>)
 8002a80:	881a      	ldrh	r2, [r3, #0]
 8002a82:	4b34      	ldr	r3, [pc, #208]	; (8002b54 <CTL_Main+0x110>)
 8002a84:	801a      	strh	r2, [r3, #0]
	au8Temp[4] = unAnyData.au8Data[0];
 8002a86:	4b33      	ldr	r3, [pc, #204]	; (8002b54 <CTL_Main+0x110>)
 8002a88:	781a      	ldrb	r2, [r3, #0]
 8002a8a:	4b33      	ldr	r3, [pc, #204]	; (8002b58 <CTL_Main+0x114>)
 8002a8c:	711a      	strb	r2, [r3, #4]
	au8Temp[5] = unAnyData.au8Data[1];
 8002a8e:	4b31      	ldr	r3, [pc, #196]	; (8002b54 <CTL_Main+0x110>)
 8002a90:	785a      	ldrb	r2, [r3, #1]
 8002a92:	4b31      	ldr	r3, [pc, #196]	; (8002b58 <CTL_Main+0x114>)
 8002a94:	715a      	strb	r2, [r3, #5]

	unAnyData.u16Data = TIM2_u16Ch4_PulseTime;
 8002a96:	4b33      	ldr	r3, [pc, #204]	; (8002b64 <CTL_Main+0x120>)
 8002a98:	881a      	ldrh	r2, [r3, #0]
 8002a9a:	4b2e      	ldr	r3, [pc, #184]	; (8002b54 <CTL_Main+0x110>)
 8002a9c:	801a      	strh	r2, [r3, #0]
	au8Temp[6] = unAnyData.au8Data[0];
 8002a9e:	4b2d      	ldr	r3, [pc, #180]	; (8002b54 <CTL_Main+0x110>)
 8002aa0:	781a      	ldrb	r2, [r3, #0]
 8002aa2:	4b2d      	ldr	r3, [pc, #180]	; (8002b58 <CTL_Main+0x114>)
 8002aa4:	719a      	strb	r2, [r3, #6]
	au8Temp[7] = unAnyData.au8Data[1];
 8002aa6:	4b2b      	ldr	r3, [pc, #172]	; (8002b54 <CTL_Main+0x110>)
 8002aa8:	785a      	ldrb	r2, [r3, #1]
 8002aaa:	4b2b      	ldr	r3, [pc, #172]	; (8002b58 <CTL_Main+0x114>)
 8002aac:	71da      	strb	r2, [r3, #7]




	unAnyData.u16Data = TIM3_u16Ch1_PulseTime;
 8002aae:	4b2e      	ldr	r3, [pc, #184]	; (8002b68 <CTL_Main+0x124>)
 8002ab0:	881a      	ldrh	r2, [r3, #0]
 8002ab2:	4b28      	ldr	r3, [pc, #160]	; (8002b54 <CTL_Main+0x110>)
 8002ab4:	801a      	strh	r2, [r3, #0]
	au8Temp[8] = unAnyData.au8Data[0];
 8002ab6:	4b27      	ldr	r3, [pc, #156]	; (8002b54 <CTL_Main+0x110>)
 8002ab8:	781a      	ldrb	r2, [r3, #0]
 8002aba:	4b27      	ldr	r3, [pc, #156]	; (8002b58 <CTL_Main+0x114>)
 8002abc:	721a      	strb	r2, [r3, #8]
	au8Temp[9] = unAnyData.au8Data[1];
 8002abe:	4b25      	ldr	r3, [pc, #148]	; (8002b54 <CTL_Main+0x110>)
 8002ac0:	785a      	ldrb	r2, [r3, #1]
 8002ac2:	4b25      	ldr	r3, [pc, #148]	; (8002b58 <CTL_Main+0x114>)
 8002ac4:	725a      	strb	r2, [r3, #9]

	unAnyData.u16Data = TIM3_u16Ch2_PulseTime;
 8002ac6:	4b29      	ldr	r3, [pc, #164]	; (8002b6c <CTL_Main+0x128>)
 8002ac8:	881a      	ldrh	r2, [r3, #0]
 8002aca:	4b22      	ldr	r3, [pc, #136]	; (8002b54 <CTL_Main+0x110>)
 8002acc:	801a      	strh	r2, [r3, #0]
	au8Temp[10] = unAnyData.au8Data[0];
 8002ace:	4b21      	ldr	r3, [pc, #132]	; (8002b54 <CTL_Main+0x110>)
 8002ad0:	781a      	ldrb	r2, [r3, #0]
 8002ad2:	4b21      	ldr	r3, [pc, #132]	; (8002b58 <CTL_Main+0x114>)
 8002ad4:	729a      	strb	r2, [r3, #10]
	au8Temp[11] = unAnyData.au8Data[1];
 8002ad6:	4b1f      	ldr	r3, [pc, #124]	; (8002b54 <CTL_Main+0x110>)
 8002ad8:	785a      	ldrb	r2, [r3, #1]
 8002ada:	4b1f      	ldr	r3, [pc, #124]	; (8002b58 <CTL_Main+0x114>)
 8002adc:	72da      	strb	r2, [r3, #11]

	unAnyData.u16Data = TIM3_u16Ch3_PulseTime;
 8002ade:	4b24      	ldr	r3, [pc, #144]	; (8002b70 <CTL_Main+0x12c>)
 8002ae0:	881a      	ldrh	r2, [r3, #0]
 8002ae2:	4b1c      	ldr	r3, [pc, #112]	; (8002b54 <CTL_Main+0x110>)
 8002ae4:	801a      	strh	r2, [r3, #0]
	au8Temp[12] = unAnyData.au8Data[0];
 8002ae6:	4b1b      	ldr	r3, [pc, #108]	; (8002b54 <CTL_Main+0x110>)
 8002ae8:	781a      	ldrb	r2, [r3, #0]
 8002aea:	4b1b      	ldr	r3, [pc, #108]	; (8002b58 <CTL_Main+0x114>)
 8002aec:	731a      	strb	r2, [r3, #12]
	au8Temp[13] = unAnyData.au8Data[1];
 8002aee:	4b19      	ldr	r3, [pc, #100]	; (8002b54 <CTL_Main+0x110>)
 8002af0:	785a      	ldrb	r2, [r3, #1]
 8002af2:	4b19      	ldr	r3, [pc, #100]	; (8002b58 <CTL_Main+0x114>)
 8002af4:	735a      	strb	r2, [r3, #13]

	unAnyData.u16Data = TIM3_u16Ch4_PulseTime;
 8002af6:	4b1f      	ldr	r3, [pc, #124]	; (8002b74 <CTL_Main+0x130>)
 8002af8:	881a      	ldrh	r2, [r3, #0]
 8002afa:	4b16      	ldr	r3, [pc, #88]	; (8002b54 <CTL_Main+0x110>)
 8002afc:	801a      	strh	r2, [r3, #0]
	au8Temp[14] = unAnyData.au8Data[0];
 8002afe:	4b15      	ldr	r3, [pc, #84]	; (8002b54 <CTL_Main+0x110>)
 8002b00:	781a      	ldrb	r2, [r3, #0]
 8002b02:	4b15      	ldr	r3, [pc, #84]	; (8002b58 <CTL_Main+0x114>)
 8002b04:	739a      	strb	r2, [r3, #14]
	au8Temp[15] = unAnyData.au8Data[1];
 8002b06:	4b13      	ldr	r3, [pc, #76]	; (8002b54 <CTL_Main+0x110>)
 8002b08:	785a      	ldrb	r2, [r3, #1]
 8002b0a:	4b13      	ldr	r3, [pc, #76]	; (8002b58 <CTL_Main+0x114>)
 8002b0c:	73da      	strb	r2, [r3, #15]

	au8Temp[16] = FSE_u8FailSafe_LEDisBlinking;
 8002b0e:	4b1a      	ldr	r3, [pc, #104]	; (8002b78 <CTL_Main+0x134>)
 8002b10:	781a      	ldrb	r2, [r3, #0]
 8002b12:	4b11      	ldr	r3, [pc, #68]	; (8002b58 <CTL_Main+0x114>)
 8002b14:	741a      	strb	r2, [r3, #16]


	au8Temp[17] = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) ? 0 : 1;
 8002b16:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002b1a:	4818      	ldr	r0, [pc, #96]	; (8002b7c <CTL_Main+0x138>)
 8002b1c:	f7fe f866 	bl	8000bec <HAL_GPIO_ReadPin>
 8002b20:	4603      	mov	r3, r0
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	bf0c      	ite	eq
 8002b26:	2301      	moveq	r3, #1
 8002b28:	2300      	movne	r3, #0
 8002b2a:	b2db      	uxtb	r3, r3
 8002b2c:	461a      	mov	r2, r3
 8002b2e:	4b0a      	ldr	r3, [pc, #40]	; (8002b58 <CTL_Main+0x114>)
 8002b30:	745a      	strb	r2, [r3, #17]


	SER1_Send_Protocol(au8Temp, 18);
 8002b32:	2112      	movs	r1, #18
 8002b34:	4808      	ldr	r0, [pc, #32]	; (8002b58 <CTL_Main+0x114>)
 8002b36:	f000 fb17 	bl	8003168 <SER1_Send_Protocol>


	HAL_UART_Transmit_DMA(&huart1, SER1_au8SndBuf, SER1_TransmitFrameLength) ;
 8002b3a:	4b11      	ldr	r3, [pc, #68]	; (8002b80 <CTL_Main+0x13c>)
 8002b3c:	781b      	ldrb	r3, [r3, #0]
 8002b3e:	b29b      	uxth	r3, r3
 8002b40:	461a      	mov	r2, r3
 8002b42:	4910      	ldr	r1, [pc, #64]	; (8002b84 <CTL_Main+0x140>)
 8002b44:	4810      	ldr	r0, [pc, #64]	; (8002b88 <CTL_Main+0x144>)
 8002b46:	f7ff fb1d 	bl	8002184 <HAL_UART_Transmit_DMA>





}
 8002b4a:	bf00      	nop
 8002b4c:	bd80      	pop	{r7, pc}
 8002b4e:	bf00      	nop
 8002b50:	200009ea 	.word	0x200009ea
 8002b54:	20000470 	.word	0x20000470
 8002b58:	20000478 	.word	0x20000478
 8002b5c:	200009f0 	.word	0x200009f0
 8002b60:	20000a00 	.word	0x20000a00
 8002b64:	200009f8 	.word	0x200009f8
 8002b68:	20000a18 	.word	0x20000a18
 8002b6c:	20000a06 	.word	0x20000a06
 8002b70:	20000a08 	.word	0x20000a08
 8002b74:	20000a0e 	.word	0x20000a0e
 8002b78:	200009e8 	.word	0x200009e8
 8002b7c:	40011000 	.word	0x40011000
 8002b80:	200004dc 	.word	0x200004dc
 8002b84:	200005a4 	.word	0x200005a4
 8002b88:	20000564 	.word	0x20000564

08002b8c <EXTI_HAL_GPIO_EXTI_Callback>:
*  Parameter(s)   :
*  Return Value   :
******************************************************************************/

void EXTI_HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b083      	sub	sp, #12
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	4603      	mov	r3, r0
 8002b94:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_13)
 8002b96:	88fb      	ldrh	r3, [r7, #6]
 8002b98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b9c:	d103      	bne.n	8002ba6 <EXTI_HAL_GPIO_EXTI_Callback+0x1a>
	{
		FSE_u16FailSafe_LEDisBlinkingCounter = 0;
 8002b9e:	4b06      	ldr	r3, [pc, #24]	; (8002bb8 <EXTI_HAL_GPIO_EXTI_Callback+0x2c>)
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	801a      	strh	r2, [r3, #0]
	{
		FSE_u16FailSafe_LEDisBlinkingCounter = 0;
	}


}
 8002ba4:	e002      	b.n	8002bac <EXTI_HAL_GPIO_EXTI_Callback+0x20>
		FSE_u16FailSafe_LEDisBlinkingCounter = 0;
 8002ba6:	4b04      	ldr	r3, [pc, #16]	; (8002bb8 <EXTI_HAL_GPIO_EXTI_Callback+0x2c>)
 8002ba8:	2200      	movs	r2, #0
 8002baa:	801a      	strh	r2, [r3, #0]
}
 8002bac:	bf00      	nop
 8002bae:	370c      	adds	r7, #12
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bc80      	pop	{r7}
 8002bb4:	4770      	bx	lr
 8002bb6:	bf00      	nop
 8002bb8:	200009e6 	.word	0x200009e6

08002bbc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002bc0:	f7fd fac4 	bl	800014c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002bc4:	f000 f817 	bl	8002bf6 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002bc8:	f000 fa12 	bl	8002ff0 <MX_GPIO_Init>
  MX_DMA_Init();
 8002bcc:	f000 f9f2 	bl	8002fb4 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8002bd0:	f000 f9c6 	bl	8002f60 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8002bd4:	f000 f854 	bl	8002c80 <MX_TIM2_Init>
  MX_TIM3_Init();
 8002bd8:	f000 f8e2 	bl	8002da0 <MX_TIM3_Init>
  MX_TIM4_Init();
 8002bdc:	f000 f972 	bl	8002ec4 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  TIM2_Ini();
 8002be0:	f000 fcec 	bl	80035bc <TIM2_Ini>
  TIM3_Ini();
 8002be4:	f000 fe68 	bl	80038b8 <TIM3_Ini>
  TIM4_Ini();
 8002be8:	f000 ffea 	bl	8003bc0 <TIM4_Ini>
  CTL_Ini();
 8002bec:	f7ff ff24 	bl	8002a38 <CTL_Ini>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  CTL_Main();
 8002bf0:	f7ff ff28 	bl	8002a44 <CTL_Main>
 8002bf4:	e7fc      	b.n	8002bf0 <main+0x34>

08002bf6 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002bf6:	b580      	push	{r7, lr}
 8002bf8:	b090      	sub	sp, #64	; 0x40
 8002bfa:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002bfc:	f107 0318 	add.w	r3, r7, #24
 8002c00:	2228      	movs	r2, #40	; 0x28
 8002c02:	2100      	movs	r1, #0
 8002c04:	4618      	mov	r0, r3
 8002c06:	f001 f91c 	bl	8003e42 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002c0a:	1d3b      	adds	r3, r7, #4
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	601a      	str	r2, [r3, #0]
 8002c10:	605a      	str	r2, [r3, #4]
 8002c12:	609a      	str	r2, [r3, #8]
 8002c14:	60da      	str	r2, [r3, #12]
 8002c16:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002c1c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002c20:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002c22:	2300      	movs	r3, #0
 8002c24:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002c26:	2301      	movs	r3, #1
 8002c28:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002c2a:	2302      	movs	r3, #2
 8002c2c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002c2e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002c32:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002c34:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002c38:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002c3a:	f107 0318 	add.w	r3, r7, #24
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f7fe f81c 	bl	8000c7c <HAL_RCC_OscConfig>
 8002c44:	4603      	mov	r3, r0
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d001      	beq.n	8002c4e <SystemClock_Config+0x58>
  {
    Error_Handler();
 8002c4a:	f000 fa67 	bl	800311c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002c4e:	230f      	movs	r3, #15
 8002c50:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002c52:	2302      	movs	r3, #2
 8002c54:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002c56:	2300      	movs	r3, #0
 8002c58:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002c5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c5e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002c60:	2300      	movs	r3, #0
 8002c62:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002c64:	1d3b      	adds	r3, r7, #4
 8002c66:	2102      	movs	r1, #2
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f7fe fa6b 	bl	8001144 <HAL_RCC_ClockConfig>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d001      	beq.n	8002c78 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8002c74:	f000 fa52 	bl	800311c <Error_Handler>
  }
}
 8002c78:	bf00      	nop
 8002c7a:	3740      	adds	r7, #64	; 0x40
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}

08002c80 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b08a      	sub	sp, #40	; 0x28
 8002c84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002c86:	f107 0318 	add.w	r3, r7, #24
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	601a      	str	r2, [r3, #0]
 8002c8e:	605a      	str	r2, [r3, #4]
 8002c90:	609a      	str	r2, [r3, #8]
 8002c92:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c94:	f107 0310 	add.w	r3, r7, #16
 8002c98:	2200      	movs	r2, #0
 8002c9a:	601a      	str	r2, [r3, #0]
 8002c9c:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002c9e:	463b      	mov	r3, r7
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	601a      	str	r2, [r3, #0]
 8002ca4:	605a      	str	r2, [r3, #4]
 8002ca6:	609a      	str	r2, [r3, #8]
 8002ca8:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002caa:	4b3c      	ldr	r3, [pc, #240]	; (8002d9c <MX_TIM2_Init+0x11c>)
 8002cac:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002cb0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8002cb2:	4b3a      	ldr	r3, [pc, #232]	; (8002d9c <MX_TIM2_Init+0x11c>)
 8002cb4:	2247      	movs	r2, #71	; 0x47
 8002cb6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002cb8:	4b38      	ldr	r3, [pc, #224]	; (8002d9c <MX_TIM2_Init+0x11c>)
 8002cba:	2200      	movs	r2, #0
 8002cbc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8002cbe:	4b37      	ldr	r3, [pc, #220]	; (8002d9c <MX_TIM2_Init+0x11c>)
 8002cc0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002cc4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002cc6:	4b35      	ldr	r3, [pc, #212]	; (8002d9c <MX_TIM2_Init+0x11c>)
 8002cc8:	2200      	movs	r2, #0
 8002cca:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ccc:	4b33      	ldr	r3, [pc, #204]	; (8002d9c <MX_TIM2_Init+0x11c>)
 8002cce:	2200      	movs	r2, #0
 8002cd0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002cd2:	4832      	ldr	r0, [pc, #200]	; (8002d9c <MX_TIM2_Init+0x11c>)
 8002cd4:	f7fe fbf4 	bl	80014c0 <HAL_TIM_Base_Init>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d001      	beq.n	8002ce2 <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 8002cde:	f000 fa1d 	bl	800311c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002ce2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ce6:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002ce8:	f107 0318 	add.w	r3, r7, #24
 8002cec:	4619      	mov	r1, r3
 8002cee:	482b      	ldr	r0, [pc, #172]	; (8002d9c <MX_TIM2_Init+0x11c>)
 8002cf0:	f7fe fe64 	bl	80019bc <HAL_TIM_ConfigClockSource>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d001      	beq.n	8002cfe <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8002cfa:	f000 fa0f 	bl	800311c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8002cfe:	4827      	ldr	r0, [pc, #156]	; (8002d9c <MX_TIM2_Init+0x11c>)
 8002d00:	f7fe fc23 	bl	800154a <HAL_TIM_IC_Init>
 8002d04:	4603      	mov	r3, r0
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d001      	beq.n	8002d0e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8002d0a:	f000 fa07 	bl	800311c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d12:	2300      	movs	r3, #0
 8002d14:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002d16:	f107 0310 	add.w	r3, r7, #16
 8002d1a:	4619      	mov	r1, r3
 8002d1c:	481f      	ldr	r0, [pc, #124]	; (8002d9c <MX_TIM2_Init+0x11c>)
 8002d1e:	f7ff f98d 	bl	800203c <HAL_TIMEx_MasterConfigSynchronization>
 8002d22:	4603      	mov	r3, r0
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d001      	beq.n	8002d2c <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 8002d28:	f000 f9f8 	bl	800311c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002d30:	2301      	movs	r3, #1
 8002d32:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002d34:	2300      	movs	r3, #0
 8002d36:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002d3c:	463b      	mov	r3, r7
 8002d3e:	2200      	movs	r2, #0
 8002d40:	4619      	mov	r1, r3
 8002d42:	4816      	ldr	r0, [pc, #88]	; (8002d9c <MX_TIM2_Init+0x11c>)
 8002d44:	f7fe fd9e 	bl	8001884 <HAL_TIM_IC_ConfigChannel>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d001      	beq.n	8002d52 <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 8002d4e:	f000 f9e5 	bl	800311c <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002d52:	463b      	mov	r3, r7
 8002d54:	2204      	movs	r2, #4
 8002d56:	4619      	mov	r1, r3
 8002d58:	4810      	ldr	r0, [pc, #64]	; (8002d9c <MX_TIM2_Init+0x11c>)
 8002d5a:	f7fe fd93 	bl	8001884 <HAL_TIM_IC_ConfigChannel>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d001      	beq.n	8002d68 <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 8002d64:	f000 f9da 	bl	800311c <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8002d68:	463b      	mov	r3, r7
 8002d6a:	2208      	movs	r2, #8
 8002d6c:	4619      	mov	r1, r3
 8002d6e:	480b      	ldr	r0, [pc, #44]	; (8002d9c <MX_TIM2_Init+0x11c>)
 8002d70:	f7fe fd88 	bl	8001884 <HAL_TIM_IC_ConfigChannel>
 8002d74:	4603      	mov	r3, r0
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d001      	beq.n	8002d7e <MX_TIM2_Init+0xfe>
  {
    Error_Handler();
 8002d7a:	f000 f9cf 	bl	800311c <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8002d7e:	463b      	mov	r3, r7
 8002d80:	220c      	movs	r2, #12
 8002d82:	4619      	mov	r1, r3
 8002d84:	4805      	ldr	r0, [pc, #20]	; (8002d9c <MX_TIM2_Init+0x11c>)
 8002d86:	f7fe fd7d 	bl	8001884 <HAL_TIM_IC_ConfigChannel>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d001      	beq.n	8002d94 <MX_TIM2_Init+0x114>
  {
    Error_Handler();
 8002d90:	f000 f9c4 	bl	800311c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002d94:	bf00      	nop
 8002d96:	3728      	adds	r7, #40	; 0x28
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}
 8002d9c:	200009a4 	.word	0x200009a4

08002da0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b08a      	sub	sp, #40	; 0x28
 8002da4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002da6:	f107 0318 	add.w	r3, r7, #24
 8002daa:	2200      	movs	r2, #0
 8002dac:	601a      	str	r2, [r3, #0]
 8002dae:	605a      	str	r2, [r3, #4]
 8002db0:	609a      	str	r2, [r3, #8]
 8002db2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002db4:	f107 0310 	add.w	r3, r7, #16
 8002db8:	2200      	movs	r2, #0
 8002dba:	601a      	str	r2, [r3, #0]
 8002dbc:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002dbe:	463b      	mov	r3, r7
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	601a      	str	r2, [r3, #0]
 8002dc4:	605a      	str	r2, [r3, #4]
 8002dc6:	609a      	str	r2, [r3, #8]
 8002dc8:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002dca:	4b3c      	ldr	r3, [pc, #240]	; (8002ebc <MX_TIM3_Init+0x11c>)
 8002dcc:	4a3c      	ldr	r2, [pc, #240]	; (8002ec0 <MX_TIM3_Init+0x120>)
 8002dce:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 8002dd0:	4b3a      	ldr	r3, [pc, #232]	; (8002ebc <MX_TIM3_Init+0x11c>)
 8002dd2:	2247      	movs	r2, #71	; 0x47
 8002dd4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002dd6:	4b39      	ldr	r3, [pc, #228]	; (8002ebc <MX_TIM3_Init+0x11c>)
 8002dd8:	2200      	movs	r2, #0
 8002dda:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002ddc:	4b37      	ldr	r3, [pc, #220]	; (8002ebc <MX_TIM3_Init+0x11c>)
 8002dde:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002de2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002de4:	4b35      	ldr	r3, [pc, #212]	; (8002ebc <MX_TIM3_Init+0x11c>)
 8002de6:	2200      	movs	r2, #0
 8002de8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002dea:	4b34      	ldr	r3, [pc, #208]	; (8002ebc <MX_TIM3_Init+0x11c>)
 8002dec:	2200      	movs	r2, #0
 8002dee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002df0:	4832      	ldr	r0, [pc, #200]	; (8002ebc <MX_TIM3_Init+0x11c>)
 8002df2:	f7fe fb65 	bl	80014c0 <HAL_TIM_Base_Init>
 8002df6:	4603      	mov	r3, r0
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d001      	beq.n	8002e00 <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 8002dfc:	f000 f98e 	bl	800311c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e04:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002e06:	f107 0318 	add.w	r3, r7, #24
 8002e0a:	4619      	mov	r1, r3
 8002e0c:	482b      	ldr	r0, [pc, #172]	; (8002ebc <MX_TIM3_Init+0x11c>)
 8002e0e:	f7fe fdd5 	bl	80019bc <HAL_TIM_ConfigClockSource>
 8002e12:	4603      	mov	r3, r0
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d001      	beq.n	8002e1c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8002e18:	f000 f980 	bl	800311c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8002e1c:	4827      	ldr	r0, [pc, #156]	; (8002ebc <MX_TIM3_Init+0x11c>)
 8002e1e:	f7fe fb94 	bl	800154a <HAL_TIM_IC_Init>
 8002e22:	4603      	mov	r3, r0
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d001      	beq.n	8002e2c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8002e28:	f000 f978 	bl	800311c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e30:	2300      	movs	r3, #0
 8002e32:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002e34:	f107 0310 	add.w	r3, r7, #16
 8002e38:	4619      	mov	r1, r3
 8002e3a:	4820      	ldr	r0, [pc, #128]	; (8002ebc <MX_TIM3_Init+0x11c>)
 8002e3c:	f7ff f8fe 	bl	800203c <HAL_TIMEx_MasterConfigSynchronization>
 8002e40:	4603      	mov	r3, r0
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d001      	beq.n	8002e4a <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 8002e46:	f000 f969 	bl	800311c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002e52:	2300      	movs	r3, #0
 8002e54:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8002e56:	2300      	movs	r3, #0
 8002e58:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002e5a:	463b      	mov	r3, r7
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	4619      	mov	r1, r3
 8002e60:	4816      	ldr	r0, [pc, #88]	; (8002ebc <MX_TIM3_Init+0x11c>)
 8002e62:	f7fe fd0f 	bl	8001884 <HAL_TIM_IC_ConfigChannel>
 8002e66:	4603      	mov	r3, r0
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d001      	beq.n	8002e70 <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 8002e6c:	f000 f956 	bl	800311c <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002e70:	463b      	mov	r3, r7
 8002e72:	2204      	movs	r2, #4
 8002e74:	4619      	mov	r1, r3
 8002e76:	4811      	ldr	r0, [pc, #68]	; (8002ebc <MX_TIM3_Init+0x11c>)
 8002e78:	f7fe fd04 	bl	8001884 <HAL_TIM_IC_ConfigChannel>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d001      	beq.n	8002e86 <MX_TIM3_Init+0xe6>
  {
    Error_Handler();
 8002e82:	f000 f94b 	bl	800311c <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8002e86:	463b      	mov	r3, r7
 8002e88:	2208      	movs	r2, #8
 8002e8a:	4619      	mov	r1, r3
 8002e8c:	480b      	ldr	r0, [pc, #44]	; (8002ebc <MX_TIM3_Init+0x11c>)
 8002e8e:	f7fe fcf9 	bl	8001884 <HAL_TIM_IC_ConfigChannel>
 8002e92:	4603      	mov	r3, r0
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d001      	beq.n	8002e9c <MX_TIM3_Init+0xfc>
  {
    Error_Handler();
 8002e98:	f000 f940 	bl	800311c <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8002e9c:	463b      	mov	r3, r7
 8002e9e:	220c      	movs	r2, #12
 8002ea0:	4619      	mov	r1, r3
 8002ea2:	4806      	ldr	r0, [pc, #24]	; (8002ebc <MX_TIM3_Init+0x11c>)
 8002ea4:	f7fe fcee 	bl	8001884 <HAL_TIM_IC_ConfigChannel>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d001      	beq.n	8002eb2 <MX_TIM3_Init+0x112>
  {
    Error_Handler();
 8002eae:	f000 f935 	bl	800311c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002eb2:	bf00      	nop
 8002eb4:	3728      	adds	r7, #40	; 0x28
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	bf00      	nop
 8002ebc:	200004e0 	.word	0x200004e0
 8002ec0:	40000400 	.word	0x40000400

08002ec4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b086      	sub	sp, #24
 8002ec8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002eca:	f107 0308 	add.w	r3, r7, #8
 8002ece:	2200      	movs	r2, #0
 8002ed0:	601a      	str	r2, [r3, #0]
 8002ed2:	605a      	str	r2, [r3, #4]
 8002ed4:	609a      	str	r2, [r3, #8]
 8002ed6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ed8:	463b      	mov	r3, r7
 8002eda:	2200      	movs	r2, #0
 8002edc:	601a      	str	r2, [r3, #0]
 8002ede:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002ee0:	4b1d      	ldr	r3, [pc, #116]	; (8002f58 <MX_TIM4_Init+0x94>)
 8002ee2:	4a1e      	ldr	r2, [pc, #120]	; (8002f5c <MX_TIM4_Init+0x98>)
 8002ee4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 71;
 8002ee6:	4b1c      	ldr	r3, [pc, #112]	; (8002f58 <MX_TIM4_Init+0x94>)
 8002ee8:	2247      	movs	r2, #71	; 0x47
 8002eea:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002eec:	4b1a      	ldr	r3, [pc, #104]	; (8002f58 <MX_TIM4_Init+0x94>)
 8002eee:	2200      	movs	r2, #0
 8002ef0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 499;
 8002ef2:	4b19      	ldr	r3, [pc, #100]	; (8002f58 <MX_TIM4_Init+0x94>)
 8002ef4:	f240 12f3 	movw	r2, #499	; 0x1f3
 8002ef8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002efa:	4b17      	ldr	r3, [pc, #92]	; (8002f58 <MX_TIM4_Init+0x94>)
 8002efc:	2200      	movs	r2, #0
 8002efe:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f00:	4b15      	ldr	r3, [pc, #84]	; (8002f58 <MX_TIM4_Init+0x94>)
 8002f02:	2200      	movs	r2, #0
 8002f04:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002f06:	4814      	ldr	r0, [pc, #80]	; (8002f58 <MX_TIM4_Init+0x94>)
 8002f08:	f7fe fada 	bl	80014c0 <HAL_TIM_Base_Init>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d001      	beq.n	8002f16 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8002f12:	f000 f903 	bl	800311c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002f16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f1a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002f1c:	f107 0308 	add.w	r3, r7, #8
 8002f20:	4619      	mov	r1, r3
 8002f22:	480d      	ldr	r0, [pc, #52]	; (8002f58 <MX_TIM4_Init+0x94>)
 8002f24:	f7fe fd4a 	bl	80019bc <HAL_TIM_ConfigClockSource>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d001      	beq.n	8002f32 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8002f2e:	f000 f8f5 	bl	800311c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f32:	2300      	movs	r3, #0
 8002f34:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f36:	2300      	movs	r3, #0
 8002f38:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002f3a:	463b      	mov	r3, r7
 8002f3c:	4619      	mov	r1, r3
 8002f3e:	4806      	ldr	r0, [pc, #24]	; (8002f58 <MX_TIM4_Init+0x94>)
 8002f40:	f7ff f87c 	bl	800203c <HAL_TIMEx_MasterConfigSynchronization>
 8002f44:	4603      	mov	r3, r0
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d001      	beq.n	8002f4e <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8002f4a:	f000 f8e7 	bl	800311c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002f4e:	bf00      	nop
 8002f50:	3718      	adds	r7, #24
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}
 8002f56:	bf00      	nop
 8002f58:	20000430 	.word	0x20000430
 8002f5c:	40000800 	.word	0x40000800

08002f60 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002f64:	4b11      	ldr	r3, [pc, #68]	; (8002fac <MX_USART1_UART_Init+0x4c>)
 8002f66:	4a12      	ldr	r2, [pc, #72]	; (8002fb0 <MX_USART1_UART_Init+0x50>)
 8002f68:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002f6a:	4b10      	ldr	r3, [pc, #64]	; (8002fac <MX_USART1_UART_Init+0x4c>)
 8002f6c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002f70:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002f72:	4b0e      	ldr	r3, [pc, #56]	; (8002fac <MX_USART1_UART_Init+0x4c>)
 8002f74:	2200      	movs	r2, #0
 8002f76:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002f78:	4b0c      	ldr	r3, [pc, #48]	; (8002fac <MX_USART1_UART_Init+0x4c>)
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002f7e:	4b0b      	ldr	r3, [pc, #44]	; (8002fac <MX_USART1_UART_Init+0x4c>)
 8002f80:	2200      	movs	r2, #0
 8002f82:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002f84:	4b09      	ldr	r3, [pc, #36]	; (8002fac <MX_USART1_UART_Init+0x4c>)
 8002f86:	220c      	movs	r2, #12
 8002f88:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f8a:	4b08      	ldr	r3, [pc, #32]	; (8002fac <MX_USART1_UART_Init+0x4c>)
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f90:	4b06      	ldr	r3, [pc, #24]	; (8002fac <MX_USART1_UART_Init+0x4c>)
 8002f92:	2200      	movs	r2, #0
 8002f94:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002f96:	4805      	ldr	r0, [pc, #20]	; (8002fac <MX_USART1_UART_Init+0x4c>)
 8002f98:	f7ff f8a6 	bl	80020e8 <HAL_UART_Init>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d001      	beq.n	8002fa6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002fa2:	f000 f8bb 	bl	800311c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002fa6:	bf00      	nop
 8002fa8:	bd80      	pop	{r7, pc}
 8002faa:	bf00      	nop
 8002fac:	20000564 	.word	0x20000564
 8002fb0:	40013800 	.word	0x40013800

08002fb4 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b082      	sub	sp, #8
 8002fb8:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002fba:	4b0c      	ldr	r3, [pc, #48]	; (8002fec <MX_DMA_Init+0x38>)
 8002fbc:	695b      	ldr	r3, [r3, #20]
 8002fbe:	4a0b      	ldr	r2, [pc, #44]	; (8002fec <MX_DMA_Init+0x38>)
 8002fc0:	f043 0301 	orr.w	r3, r3, #1
 8002fc4:	6153      	str	r3, [r2, #20]
 8002fc6:	4b09      	ldr	r3, [pc, #36]	; (8002fec <MX_DMA_Init+0x38>)
 8002fc8:	695b      	ldr	r3, [r3, #20]
 8002fca:	f003 0301 	and.w	r3, r3, #1
 8002fce:	607b      	str	r3, [r7, #4]
 8002fd0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	2100      	movs	r1, #0
 8002fd6:	200e      	movs	r0, #14
 8002fd8:	f7fd fa0f 	bl	80003fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8002fdc:	200e      	movs	r0, #14
 8002fde:	f7fd fa28 	bl	8000432 <HAL_NVIC_EnableIRQ>

}
 8002fe2:	bf00      	nop
 8002fe4:	3708      	adds	r7, #8
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}
 8002fea:	bf00      	nop
 8002fec:	40021000 	.word	0x40021000

08002ff0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b088      	sub	sp, #32
 8002ff4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ff6:	f107 0310 	add.w	r3, r7, #16
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	601a      	str	r2, [r3, #0]
 8002ffe:	605a      	str	r2, [r3, #4]
 8003000:	609a      	str	r2, [r3, #8]
 8003002:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003004:	4b2e      	ldr	r3, [pc, #184]	; (80030c0 <MX_GPIO_Init+0xd0>)
 8003006:	699b      	ldr	r3, [r3, #24]
 8003008:	4a2d      	ldr	r2, [pc, #180]	; (80030c0 <MX_GPIO_Init+0xd0>)
 800300a:	f043 0310 	orr.w	r3, r3, #16
 800300e:	6193      	str	r3, [r2, #24]
 8003010:	4b2b      	ldr	r3, [pc, #172]	; (80030c0 <MX_GPIO_Init+0xd0>)
 8003012:	699b      	ldr	r3, [r3, #24]
 8003014:	f003 0310 	and.w	r3, r3, #16
 8003018:	60fb      	str	r3, [r7, #12]
 800301a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800301c:	4b28      	ldr	r3, [pc, #160]	; (80030c0 <MX_GPIO_Init+0xd0>)
 800301e:	699b      	ldr	r3, [r3, #24]
 8003020:	4a27      	ldr	r2, [pc, #156]	; (80030c0 <MX_GPIO_Init+0xd0>)
 8003022:	f043 0320 	orr.w	r3, r3, #32
 8003026:	6193      	str	r3, [r2, #24]
 8003028:	4b25      	ldr	r3, [pc, #148]	; (80030c0 <MX_GPIO_Init+0xd0>)
 800302a:	699b      	ldr	r3, [r3, #24]
 800302c:	f003 0320 	and.w	r3, r3, #32
 8003030:	60bb      	str	r3, [r7, #8]
 8003032:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003034:	4b22      	ldr	r3, [pc, #136]	; (80030c0 <MX_GPIO_Init+0xd0>)
 8003036:	699b      	ldr	r3, [r3, #24]
 8003038:	4a21      	ldr	r2, [pc, #132]	; (80030c0 <MX_GPIO_Init+0xd0>)
 800303a:	f043 0304 	orr.w	r3, r3, #4
 800303e:	6193      	str	r3, [r2, #24]
 8003040:	4b1f      	ldr	r3, [pc, #124]	; (80030c0 <MX_GPIO_Init+0xd0>)
 8003042:	699b      	ldr	r3, [r3, #24]
 8003044:	f003 0304 	and.w	r3, r3, #4
 8003048:	607b      	str	r3, [r7, #4]
 800304a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800304c:	4b1c      	ldr	r3, [pc, #112]	; (80030c0 <MX_GPIO_Init+0xd0>)
 800304e:	699b      	ldr	r3, [r3, #24]
 8003050:	4a1b      	ldr	r2, [pc, #108]	; (80030c0 <MX_GPIO_Init+0xd0>)
 8003052:	f043 0308 	orr.w	r3, r3, #8
 8003056:	6193      	str	r3, [r2, #24]
 8003058:	4b19      	ldr	r3, [pc, #100]	; (80030c0 <MX_GPIO_Init+0xd0>)
 800305a:	699b      	ldr	r3, [r3, #24]
 800305c:	f003 0308 	and.w	r3, r3, #8
 8003060:	603b      	str	r3, [r7, #0]
 8003062:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8003064:	2200      	movs	r2, #0
 8003066:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800306a:	4816      	ldr	r0, [pc, #88]	; (80030c4 <MX_GPIO_Init+0xd4>)
 800306c:	f7fd fdd5 	bl	8000c1a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8003070:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003074:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8003076:	4b14      	ldr	r3, [pc, #80]	; (80030c8 <MX_GPIO_Init+0xd8>)
 8003078:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800307a:	2302      	movs	r3, #2
 800307c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800307e:	f107 0310 	add.w	r3, r7, #16
 8003082:	4619      	mov	r1, r3
 8003084:	4811      	ldr	r0, [pc, #68]	; (80030cc <MX_GPIO_Init+0xdc>)
 8003086:	f7fd fc53 	bl	8000930 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800308a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800308e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003090:	2301      	movs	r3, #1
 8003092:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003094:	2300      	movs	r3, #0
 8003096:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003098:	2302      	movs	r3, #2
 800309a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800309c:	f107 0310 	add.w	r3, r7, #16
 80030a0:	4619      	mov	r1, r3
 80030a2:	4808      	ldr	r0, [pc, #32]	; (80030c4 <MX_GPIO_Init+0xd4>)
 80030a4:	f7fd fc44 	bl	8000930 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80030a8:	2200      	movs	r2, #0
 80030aa:	2100      	movs	r1, #0
 80030ac:	2028      	movs	r0, #40	; 0x28
 80030ae:	f7fd f9a4 	bl	80003fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80030b2:	2028      	movs	r0, #40	; 0x28
 80030b4:	f7fd f9bd 	bl	8000432 <HAL_NVIC_EnableIRQ>

}
 80030b8:	bf00      	nop
 80030ba:	3720      	adds	r7, #32
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}
 80030c0:	40021000 	.word	0x40021000
 80030c4:	40010c00 	.word	0x40010c00
 80030c8:	10310000 	.word	0x10310000
 80030cc:	40011000 	.word	0x40011000

080030d0 <HAL_TIM_IC_CaptureCallback>:
*  Parameter(s)   :
*  Return Value   :
******************************************************************************/

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b082      	sub	sp, #8
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
	TIM2_HAL_TIM_IC_CaptureCallback(htim);
 80030d8:	6878      	ldr	r0, [r7, #4]
 80030da:	f000 fa8b 	bl	80035f4 <TIM2_HAL_TIM_IC_CaptureCallback>
	TIM3_HAL_TIM_IC_CaptureCallback(htim);
 80030de:	6878      	ldr	r0, [r7, #4]
 80030e0:	f000 fc06 	bl	80038f0 <TIM3_HAL_TIM_IC_CaptureCallback>
}
 80030e4:	bf00      	nop
 80030e6:	3708      	adds	r7, #8
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd80      	pop	{r7, pc}

080030ec <HAL_TIM_PeriodElapsedCallback>:
*  Parameter(s)   :
*  Return Value   :
******************************************************************************/

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b082      	sub	sp, #8
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
	TIM4_HAL_TIM_PeriodElapsedCallback(htim);
 80030f4:	6878      	ldr	r0, [r7, #4]
 80030f6:	f000 fd6f 	bl	8003bd8 <TIM4_HAL_TIM_PeriodElapsedCallback>

}
 80030fa:	bf00      	nop
 80030fc:	3708      	adds	r7, #8
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}

08003102 <HAL_GPIO_EXTI_Callback>:
*  Parameter(s)   :
*  Return Value   :
******************************************************************************/

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003102:	b580      	push	{r7, lr}
 8003104:	b082      	sub	sp, #8
 8003106:	af00      	add	r7, sp, #0
 8003108:	4603      	mov	r3, r0
 800310a:	80fb      	strh	r3, [r7, #6]

	EXTI_HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800310c:	88fb      	ldrh	r3, [r7, #6]
 800310e:	4618      	mov	r0, r3
 8003110:	f7ff fd3c 	bl	8002b8c <EXTI_HAL_GPIO_EXTI_Callback>

}
 8003114:	bf00      	nop
 8003116:	3708      	adds	r7, #8
 8003118:	46bd      	mov	sp, r7
 800311a:	bd80      	pop	{r7, pc}

0800311c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800311c:	b480      	push	{r7}
 800311e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003120:	bf00      	nop
 8003122:	46bd      	mov	sp, r7
 8003124:	bc80      	pop	{r7}
 8003126:	4770      	bx	lr

08003128 <ser1_XORChecksum>:
   Parameter      :
   Return-Value   :
******************************************************************************/   

TUINT8 ser1_XORChecksum(TUINT8* pu8Data, TUINT8 u8Len)
{
 8003128:	b480      	push	{r7}
 800312a:	b085      	sub	sp, #20
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
 8003130:	460b      	mov	r3, r1
 8003132:	70fb      	strb	r3, [r7, #3]
  TUINT8 u8XOR = 0;
 8003134:	2300      	movs	r3, #0
 8003136:	73fb      	strb	r3, [r7, #15]
  for(int i = 0; i < u8Len; i++) u8XOR ^= pu8Data[i];
 8003138:	2300      	movs	r3, #0
 800313a:	60bb      	str	r3, [r7, #8]
 800313c:	e009      	b.n	8003152 <ser1_XORChecksum+0x2a>
 800313e:	68bb      	ldr	r3, [r7, #8]
 8003140:	687a      	ldr	r2, [r7, #4]
 8003142:	4413      	add	r3, r2
 8003144:	781a      	ldrb	r2, [r3, #0]
 8003146:	7bfb      	ldrb	r3, [r7, #15]
 8003148:	4053      	eors	r3, r2
 800314a:	73fb      	strb	r3, [r7, #15]
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	3301      	adds	r3, #1
 8003150:	60bb      	str	r3, [r7, #8]
 8003152:	78fb      	ldrb	r3, [r7, #3]
 8003154:	68ba      	ldr	r2, [r7, #8]
 8003156:	429a      	cmp	r2, r3
 8003158:	dbf1      	blt.n	800313e <ser1_XORChecksum+0x16>
  return u8XOR;
 800315a:	7bfb      	ldrb	r3, [r7, #15]
}
 800315c:	4618      	mov	r0, r3
 800315e:	3714      	adds	r7, #20
 8003160:	46bd      	mov	sp, r7
 8003162:	bc80      	pop	{r7}
 8003164:	4770      	bx	lr
	...

08003168 <SER1_Send_Protocol>:
   Parameter      :
   Return-Value   :
******************************************************************************/   

void SER1_Send_Protocol (TUINT8* pu8Data, TUINT8 u8Len)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b084      	sub	sp, #16
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
 8003170:	460b      	mov	r3, r1
 8003172:	70fb      	strb	r3, [r7, #3]
  // STX, DLC, DATA
  SER1_au8SndBuf[0] = SER1_STX;
 8003174:	4b13      	ldr	r3, [pc, #76]	; (80031c4 <SER1_Send_Protocol+0x5c>)
 8003176:	2265      	movs	r2, #101	; 0x65
 8003178:	701a      	strb	r2, [r3, #0]
  SER1_au8SndBuf[1] = u8Len;
 800317a:	4a12      	ldr	r2, [pc, #72]	; (80031c4 <SER1_Send_Protocol+0x5c>)
 800317c:	78fb      	ldrb	r3, [r7, #3]
 800317e:	7053      	strb	r3, [r2, #1]
  memcpy((char*)&SER1_au8SndBuf[2], (char*)pu8Data, u8Len);
 8003180:	78fb      	ldrb	r3, [r7, #3]
 8003182:	461a      	mov	r2, r3
 8003184:	6879      	ldr	r1, [r7, #4]
 8003186:	4810      	ldr	r0, [pc, #64]	; (80031c8 <SER1_Send_Protocol+0x60>)
 8003188:	f000 fe50 	bl	8003e2c <memcpy>

#ifdef XOR_CHECKSUM
  TUINT8 u8Chk;
  u8Chk = ser1_XORChecksum(SER1_au8SndBuf, u8Len + 2);
 800318c:	78fb      	ldrb	r3, [r7, #3]
 800318e:	3302      	adds	r3, #2
 8003190:	b2db      	uxtb	r3, r3
 8003192:	4619      	mov	r1, r3
 8003194:	480b      	ldr	r0, [pc, #44]	; (80031c4 <SER1_Send_Protocol+0x5c>)
 8003196:	f7ff ffc7 	bl	8003128 <ser1_XORChecksum>
 800319a:	4603      	mov	r3, r0
 800319c:	73fb      	strb	r3, [r7, #15]
  ser1_Start_Sending();
#endif


#ifdef SER1_SENDING_MODE_DMA
  SER1_au8SndBuf[u8Len + 2] = u8Chk;
 800319e:	78fb      	ldrb	r3, [r7, #3]
 80031a0:	3302      	adds	r3, #2
 80031a2:	4908      	ldr	r1, [pc, #32]	; (80031c4 <SER1_Send_Protocol+0x5c>)
 80031a4:	7bfa      	ldrb	r2, [r7, #15]
 80031a6:	54ca      	strb	r2, [r1, r3]
  SER1_au8SndBuf[u8Len + 3] = SER1_ETX;
 80031a8:	78fb      	ldrb	r3, [r7, #3]
 80031aa:	3303      	adds	r3, #3
 80031ac:	4a05      	ldr	r2, [pc, #20]	; (80031c4 <SER1_Send_Protocol+0x5c>)
 80031ae:	210d      	movs	r1, #13
 80031b0:	54d1      	strb	r1, [r2, r3]

  SER1_TransmitFrameLength = u8Len + 4;
 80031b2:	78fb      	ldrb	r3, [r7, #3]
 80031b4:	3304      	adds	r3, #4
 80031b6:	b2da      	uxtb	r2, r3
 80031b8:	4b04      	ldr	r3, [pc, #16]	; (80031cc <SER1_Send_Protocol+0x64>)
 80031ba:	701a      	strb	r2, [r3, #0]
#endif
}
 80031bc:	bf00      	nop
 80031be:	3710      	adds	r7, #16
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd80      	pop	{r7, pc}
 80031c4:	200005a4 	.word	0x200005a4
 80031c8:	200005a6 	.word	0x200005a6
 80031cc:	200004dc 	.word	0x200004dc

080031d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b085      	sub	sp, #20
 80031d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80031d6:	4b15      	ldr	r3, [pc, #84]	; (800322c <HAL_MspInit+0x5c>)
 80031d8:	699b      	ldr	r3, [r3, #24]
 80031da:	4a14      	ldr	r2, [pc, #80]	; (800322c <HAL_MspInit+0x5c>)
 80031dc:	f043 0301 	orr.w	r3, r3, #1
 80031e0:	6193      	str	r3, [r2, #24]
 80031e2:	4b12      	ldr	r3, [pc, #72]	; (800322c <HAL_MspInit+0x5c>)
 80031e4:	699b      	ldr	r3, [r3, #24]
 80031e6:	f003 0301 	and.w	r3, r3, #1
 80031ea:	60bb      	str	r3, [r7, #8]
 80031ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80031ee:	4b0f      	ldr	r3, [pc, #60]	; (800322c <HAL_MspInit+0x5c>)
 80031f0:	69db      	ldr	r3, [r3, #28]
 80031f2:	4a0e      	ldr	r2, [pc, #56]	; (800322c <HAL_MspInit+0x5c>)
 80031f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031f8:	61d3      	str	r3, [r2, #28]
 80031fa:	4b0c      	ldr	r3, [pc, #48]	; (800322c <HAL_MspInit+0x5c>)
 80031fc:	69db      	ldr	r3, [r3, #28]
 80031fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003202:	607b      	str	r3, [r7, #4]
 8003204:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003206:	4b0a      	ldr	r3, [pc, #40]	; (8003230 <HAL_MspInit+0x60>)
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	60fb      	str	r3, [r7, #12]
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003212:	60fb      	str	r3, [r7, #12]
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800321a:	60fb      	str	r3, [r7, #12]
 800321c:	4a04      	ldr	r2, [pc, #16]	; (8003230 <HAL_MspInit+0x60>)
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003222:	bf00      	nop
 8003224:	3714      	adds	r7, #20
 8003226:	46bd      	mov	sp, r7
 8003228:	bc80      	pop	{r7}
 800322a:	4770      	bx	lr
 800322c:	40021000 	.word	0x40021000
 8003230:	40010000 	.word	0x40010000

08003234 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b08c      	sub	sp, #48	; 0x30
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800323c:	f107 0320 	add.w	r3, r7, #32
 8003240:	2200      	movs	r2, #0
 8003242:	601a      	str	r2, [r3, #0]
 8003244:	605a      	str	r2, [r3, #4]
 8003246:	609a      	str	r2, [r3, #8]
 8003248:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM2)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003252:	d12c      	bne.n	80032ae <HAL_TIM_Base_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003254:	4b49      	ldr	r3, [pc, #292]	; (800337c <HAL_TIM_Base_MspInit+0x148>)
 8003256:	69db      	ldr	r3, [r3, #28]
 8003258:	4a48      	ldr	r2, [pc, #288]	; (800337c <HAL_TIM_Base_MspInit+0x148>)
 800325a:	f043 0301 	orr.w	r3, r3, #1
 800325e:	61d3      	str	r3, [r2, #28]
 8003260:	4b46      	ldr	r3, [pc, #280]	; (800337c <HAL_TIM_Base_MspInit+0x148>)
 8003262:	69db      	ldr	r3, [r3, #28]
 8003264:	f003 0301 	and.w	r3, r3, #1
 8003268:	61fb      	str	r3, [r7, #28]
 800326a:	69fb      	ldr	r3, [r7, #28]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800326c:	4b43      	ldr	r3, [pc, #268]	; (800337c <HAL_TIM_Base_MspInit+0x148>)
 800326e:	699b      	ldr	r3, [r3, #24]
 8003270:	4a42      	ldr	r2, [pc, #264]	; (800337c <HAL_TIM_Base_MspInit+0x148>)
 8003272:	f043 0304 	orr.w	r3, r3, #4
 8003276:	6193      	str	r3, [r2, #24]
 8003278:	4b40      	ldr	r3, [pc, #256]	; (800337c <HAL_TIM_Base_MspInit+0x148>)
 800327a:	699b      	ldr	r3, [r3, #24]
 800327c:	f003 0304 	and.w	r3, r3, #4
 8003280:	61bb      	str	r3, [r7, #24]
 8003282:	69bb      	ldr	r3, [r7, #24]
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8003284:	230f      	movs	r3, #15
 8003286:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003288:	2300      	movs	r3, #0
 800328a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800328c:	2302      	movs	r3, #2
 800328e:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003290:	f107 0320 	add.w	r3, r7, #32
 8003294:	4619      	mov	r1, r3
 8003296:	483a      	ldr	r0, [pc, #232]	; (8003380 <HAL_TIM_Base_MspInit+0x14c>)
 8003298:	f7fd fb4a 	bl	8000930 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800329c:	2200      	movs	r2, #0
 800329e:	2100      	movs	r1, #0
 80032a0:	201c      	movs	r0, #28
 80032a2:	f7fd f8aa 	bl	80003fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80032a6:	201c      	movs	r0, #28
 80032a8:	f7fd f8c3 	bl	8000432 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80032ac:	e062      	b.n	8003374 <HAL_TIM_Base_MspInit+0x140>
  else if(htim_base->Instance==TIM3)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a34      	ldr	r2, [pc, #208]	; (8003384 <HAL_TIM_Base_MspInit+0x150>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d144      	bne.n	8003342 <HAL_TIM_Base_MspInit+0x10e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80032b8:	4b30      	ldr	r3, [pc, #192]	; (800337c <HAL_TIM_Base_MspInit+0x148>)
 80032ba:	69db      	ldr	r3, [r3, #28]
 80032bc:	4a2f      	ldr	r2, [pc, #188]	; (800337c <HAL_TIM_Base_MspInit+0x148>)
 80032be:	f043 0302 	orr.w	r3, r3, #2
 80032c2:	61d3      	str	r3, [r2, #28]
 80032c4:	4b2d      	ldr	r3, [pc, #180]	; (800337c <HAL_TIM_Base_MspInit+0x148>)
 80032c6:	69db      	ldr	r3, [r3, #28]
 80032c8:	f003 0302 	and.w	r3, r3, #2
 80032cc:	617b      	str	r3, [r7, #20]
 80032ce:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032d0:	4b2a      	ldr	r3, [pc, #168]	; (800337c <HAL_TIM_Base_MspInit+0x148>)
 80032d2:	699b      	ldr	r3, [r3, #24]
 80032d4:	4a29      	ldr	r2, [pc, #164]	; (800337c <HAL_TIM_Base_MspInit+0x148>)
 80032d6:	f043 0304 	orr.w	r3, r3, #4
 80032da:	6193      	str	r3, [r2, #24]
 80032dc:	4b27      	ldr	r3, [pc, #156]	; (800337c <HAL_TIM_Base_MspInit+0x148>)
 80032de:	699b      	ldr	r3, [r3, #24]
 80032e0:	f003 0304 	and.w	r3, r3, #4
 80032e4:	613b      	str	r3, [r7, #16]
 80032e6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032e8:	4b24      	ldr	r3, [pc, #144]	; (800337c <HAL_TIM_Base_MspInit+0x148>)
 80032ea:	699b      	ldr	r3, [r3, #24]
 80032ec:	4a23      	ldr	r2, [pc, #140]	; (800337c <HAL_TIM_Base_MspInit+0x148>)
 80032ee:	f043 0308 	orr.w	r3, r3, #8
 80032f2:	6193      	str	r3, [r2, #24]
 80032f4:	4b21      	ldr	r3, [pc, #132]	; (800337c <HAL_TIM_Base_MspInit+0x148>)
 80032f6:	699b      	ldr	r3, [r3, #24]
 80032f8:	f003 0308 	and.w	r3, r3, #8
 80032fc:	60fb      	str	r3, [r7, #12]
 80032fe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003300:	23c0      	movs	r3, #192	; 0xc0
 8003302:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003304:	2300      	movs	r3, #0
 8003306:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003308:	2302      	movs	r3, #2
 800330a:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800330c:	f107 0320 	add.w	r3, r7, #32
 8003310:	4619      	mov	r1, r3
 8003312:	481b      	ldr	r0, [pc, #108]	; (8003380 <HAL_TIM_Base_MspInit+0x14c>)
 8003314:	f7fd fb0c 	bl	8000930 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003318:	2303      	movs	r3, #3
 800331a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800331c:	2300      	movs	r3, #0
 800331e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003320:	2302      	movs	r3, #2
 8003322:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003324:	f107 0320 	add.w	r3, r7, #32
 8003328:	4619      	mov	r1, r3
 800332a:	4817      	ldr	r0, [pc, #92]	; (8003388 <HAL_TIM_Base_MspInit+0x154>)
 800332c:	f7fd fb00 	bl	8000930 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003330:	2200      	movs	r2, #0
 8003332:	2100      	movs	r1, #0
 8003334:	201d      	movs	r0, #29
 8003336:	f7fd f860 	bl	80003fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800333a:	201d      	movs	r0, #29
 800333c:	f7fd f879 	bl	8000432 <HAL_NVIC_EnableIRQ>
}
 8003340:	e018      	b.n	8003374 <HAL_TIM_Base_MspInit+0x140>
  else if(htim_base->Instance==TIM4)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a11      	ldr	r2, [pc, #68]	; (800338c <HAL_TIM_Base_MspInit+0x158>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d113      	bne.n	8003374 <HAL_TIM_Base_MspInit+0x140>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800334c:	4b0b      	ldr	r3, [pc, #44]	; (800337c <HAL_TIM_Base_MspInit+0x148>)
 800334e:	69db      	ldr	r3, [r3, #28]
 8003350:	4a0a      	ldr	r2, [pc, #40]	; (800337c <HAL_TIM_Base_MspInit+0x148>)
 8003352:	f043 0304 	orr.w	r3, r3, #4
 8003356:	61d3      	str	r3, [r2, #28]
 8003358:	4b08      	ldr	r3, [pc, #32]	; (800337c <HAL_TIM_Base_MspInit+0x148>)
 800335a:	69db      	ldr	r3, [r3, #28]
 800335c:	f003 0304 	and.w	r3, r3, #4
 8003360:	60bb      	str	r3, [r7, #8]
 8003362:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8003364:	2200      	movs	r2, #0
 8003366:	2100      	movs	r1, #0
 8003368:	201e      	movs	r0, #30
 800336a:	f7fd f846 	bl	80003fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800336e:	201e      	movs	r0, #30
 8003370:	f7fd f85f 	bl	8000432 <HAL_NVIC_EnableIRQ>
}
 8003374:	bf00      	nop
 8003376:	3730      	adds	r7, #48	; 0x30
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}
 800337c:	40021000 	.word	0x40021000
 8003380:	40010800 	.word	0x40010800
 8003384:	40000400 	.word	0x40000400
 8003388:	40010c00 	.word	0x40010c00
 800338c:	40000800 	.word	0x40000800

08003390 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b088      	sub	sp, #32
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003398:	f107 0310 	add.w	r3, r7, #16
 800339c:	2200      	movs	r2, #0
 800339e:	601a      	str	r2, [r3, #0]
 80033a0:	605a      	str	r2, [r3, #4]
 80033a2:	609a      	str	r2, [r3, #8]
 80033a4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a33      	ldr	r2, [pc, #204]	; (8003478 <HAL_UART_MspInit+0xe8>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d15f      	bne.n	8003470 <HAL_UART_MspInit+0xe0>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80033b0:	4b32      	ldr	r3, [pc, #200]	; (800347c <HAL_UART_MspInit+0xec>)
 80033b2:	699b      	ldr	r3, [r3, #24]
 80033b4:	4a31      	ldr	r2, [pc, #196]	; (800347c <HAL_UART_MspInit+0xec>)
 80033b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80033ba:	6193      	str	r3, [r2, #24]
 80033bc:	4b2f      	ldr	r3, [pc, #188]	; (800347c <HAL_UART_MspInit+0xec>)
 80033be:	699b      	ldr	r3, [r3, #24]
 80033c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033c4:	60fb      	str	r3, [r7, #12]
 80033c6:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033c8:	4b2c      	ldr	r3, [pc, #176]	; (800347c <HAL_UART_MspInit+0xec>)
 80033ca:	699b      	ldr	r3, [r3, #24]
 80033cc:	4a2b      	ldr	r2, [pc, #172]	; (800347c <HAL_UART_MspInit+0xec>)
 80033ce:	f043 0304 	orr.w	r3, r3, #4
 80033d2:	6193      	str	r3, [r2, #24]
 80033d4:	4b29      	ldr	r3, [pc, #164]	; (800347c <HAL_UART_MspInit+0xec>)
 80033d6:	699b      	ldr	r3, [r3, #24]
 80033d8:	f003 0304 	and.w	r3, r3, #4
 80033dc:	60bb      	str	r3, [r7, #8]
 80033de:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80033e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80033e4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033e6:	2302      	movs	r3, #2
 80033e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80033ea:	2303      	movs	r3, #3
 80033ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033ee:	f107 0310 	add.w	r3, r7, #16
 80033f2:	4619      	mov	r1, r3
 80033f4:	4822      	ldr	r0, [pc, #136]	; (8003480 <HAL_UART_MspInit+0xf0>)
 80033f6:	f7fd fa9b 	bl	8000930 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80033fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80033fe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003400:	2300      	movs	r3, #0
 8003402:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003404:	2300      	movs	r3, #0
 8003406:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003408:	f107 0310 	add.w	r3, r7, #16
 800340c:	4619      	mov	r1, r3
 800340e:	481c      	ldr	r0, [pc, #112]	; (8003480 <HAL_UART_MspInit+0xf0>)
 8003410:	f7fd fa8e 	bl	8000930 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8003414:	4b1b      	ldr	r3, [pc, #108]	; (8003484 <HAL_UART_MspInit+0xf4>)
 8003416:	4a1c      	ldr	r2, [pc, #112]	; (8003488 <HAL_UART_MspInit+0xf8>)
 8003418:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800341a:	4b1a      	ldr	r3, [pc, #104]	; (8003484 <HAL_UART_MspInit+0xf4>)
 800341c:	2210      	movs	r2, #16
 800341e:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003420:	4b18      	ldr	r3, [pc, #96]	; (8003484 <HAL_UART_MspInit+0xf4>)
 8003422:	2200      	movs	r2, #0
 8003424:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003426:	4b17      	ldr	r3, [pc, #92]	; (8003484 <HAL_UART_MspInit+0xf4>)
 8003428:	2280      	movs	r2, #128	; 0x80
 800342a:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800342c:	4b15      	ldr	r3, [pc, #84]	; (8003484 <HAL_UART_MspInit+0xf4>)
 800342e:	2200      	movs	r2, #0
 8003430:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003432:	4b14      	ldr	r3, [pc, #80]	; (8003484 <HAL_UART_MspInit+0xf4>)
 8003434:	2200      	movs	r2, #0
 8003436:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8003438:	4b12      	ldr	r3, [pc, #72]	; (8003484 <HAL_UART_MspInit+0xf4>)
 800343a:	2200      	movs	r2, #0
 800343c:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800343e:	4b11      	ldr	r3, [pc, #68]	; (8003484 <HAL_UART_MspInit+0xf4>)
 8003440:	2200      	movs	r2, #0
 8003442:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003444:	480f      	ldr	r0, [pc, #60]	; (8003484 <HAL_UART_MspInit+0xf4>)
 8003446:	f7fd f80f 	bl	8000468 <HAL_DMA_Init>
 800344a:	4603      	mov	r3, r0
 800344c:	2b00      	cmp	r3, #0
 800344e:	d001      	beq.n	8003454 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 8003450:	f7ff fe64 	bl	800311c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	4a0b      	ldr	r2, [pc, #44]	; (8003484 <HAL_UART_MspInit+0xf4>)
 8003458:	631a      	str	r2, [r3, #48]	; 0x30
 800345a:	4a0a      	ldr	r2, [pc, #40]	; (8003484 <HAL_UART_MspInit+0xf4>)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003460:	2200      	movs	r2, #0
 8003462:	2100      	movs	r1, #0
 8003464:	2025      	movs	r0, #37	; 0x25
 8003466:	f7fc ffc8 	bl	80003fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800346a:	2025      	movs	r0, #37	; 0x25
 800346c:	f7fc ffe1 	bl	8000432 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003470:	bf00      	nop
 8003472:	3720      	adds	r7, #32
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}
 8003478:	40013800 	.word	0x40013800
 800347c:	40021000 	.word	0x40021000
 8003480:	40010800 	.word	0x40010800
 8003484:	20000520 	.word	0x20000520
 8003488:	40020044 	.word	0x40020044

0800348c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800348c:	b480      	push	{r7}
 800348e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003490:	bf00      	nop
 8003492:	46bd      	mov	sp, r7
 8003494:	bc80      	pop	{r7}
 8003496:	4770      	bx	lr

08003498 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003498:	b480      	push	{r7}
 800349a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800349c:	e7fe      	b.n	800349c <HardFault_Handler+0x4>

0800349e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800349e:	b480      	push	{r7}
 80034a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80034a2:	e7fe      	b.n	80034a2 <MemManage_Handler+0x4>

080034a4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80034a4:	b480      	push	{r7}
 80034a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80034a8:	e7fe      	b.n	80034a8 <BusFault_Handler+0x4>

080034aa <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80034aa:	b480      	push	{r7}
 80034ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80034ae:	e7fe      	b.n	80034ae <UsageFault_Handler+0x4>

080034b0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80034b0:	b480      	push	{r7}
 80034b2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80034b4:	bf00      	nop
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bc80      	pop	{r7}
 80034ba:	4770      	bx	lr

080034bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80034bc:	b480      	push	{r7}
 80034be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80034c0:	bf00      	nop
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bc80      	pop	{r7}
 80034c6:	4770      	bx	lr

080034c8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80034c8:	b480      	push	{r7}
 80034ca:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80034cc:	bf00      	nop
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bc80      	pop	{r7}
 80034d2:	4770      	bx	lr

080034d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80034d8:	f7fc fe7e 	bl	80001d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80034dc:	bf00      	nop
 80034de:	bd80      	pop	{r7, pc}

080034e0 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80034e4:	4802      	ldr	r0, [pc, #8]	; (80034f0 <DMA1_Channel4_IRQHandler+0x10>)
 80034e6:	f7fd f8ef 	bl	80006c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80034ea:	bf00      	nop
 80034ec:	bd80      	pop	{r7, pc}
 80034ee:	bf00      	nop
 80034f0:	20000520 	.word	0x20000520

080034f4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80034f8:	4802      	ldr	r0, [pc, #8]	; (8003504 <TIM2_IRQHandler+0x10>)
 80034fa:	f7fe f8bb 	bl	8001674 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80034fe:	bf00      	nop
 8003500:	bd80      	pop	{r7, pc}
 8003502:	bf00      	nop
 8003504:	200009a4 	.word	0x200009a4

08003508 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800350c:	4802      	ldr	r0, [pc, #8]	; (8003518 <TIM3_IRQHandler+0x10>)
 800350e:	f7fe f8b1 	bl	8001674 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003512:	bf00      	nop
 8003514:	bd80      	pop	{r7, pc}
 8003516:	bf00      	nop
 8003518:	200004e0 	.word	0x200004e0

0800351c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003520:	4802      	ldr	r0, [pc, #8]	; (800352c <TIM4_IRQHandler+0x10>)
 8003522:	f7fe f8a7 	bl	8001674 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003526:	bf00      	nop
 8003528:	bd80      	pop	{r7, pc}
 800352a:	bf00      	nop
 800352c:	20000430 	.word	0x20000430

08003530 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003534:	4802      	ldr	r0, [pc, #8]	; (8003540 <USART1_IRQHandler+0x10>)
 8003536:	f7fe fe91 	bl	800225c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800353a:	bf00      	nop
 800353c:	bd80      	pop	{r7, pc}
 800353e:	bf00      	nop
 8003540:	20000564 	.word	0x20000564

08003544 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8003548:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800354c:	f7fd fb7e 	bl	8000c4c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003550:	bf00      	nop
 8003552:	bd80      	pop	{r7, pc}

08003554 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003554:	b480      	push	{r7}
 8003556:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8003558:	4b15      	ldr	r3, [pc, #84]	; (80035b0 <SystemInit+0x5c>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a14      	ldr	r2, [pc, #80]	; (80035b0 <SystemInit+0x5c>)
 800355e:	f043 0301 	orr.w	r3, r3, #1
 8003562:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8003564:	4b12      	ldr	r3, [pc, #72]	; (80035b0 <SystemInit+0x5c>)
 8003566:	685a      	ldr	r2, [r3, #4]
 8003568:	4911      	ldr	r1, [pc, #68]	; (80035b0 <SystemInit+0x5c>)
 800356a:	4b12      	ldr	r3, [pc, #72]	; (80035b4 <SystemInit+0x60>)
 800356c:	4013      	ands	r3, r2
 800356e:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8003570:	4b0f      	ldr	r3, [pc, #60]	; (80035b0 <SystemInit+0x5c>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a0e      	ldr	r2, [pc, #56]	; (80035b0 <SystemInit+0x5c>)
 8003576:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800357a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800357e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003580:	4b0b      	ldr	r3, [pc, #44]	; (80035b0 <SystemInit+0x5c>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a0a      	ldr	r2, [pc, #40]	; (80035b0 <SystemInit+0x5c>)
 8003586:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800358a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800358c:	4b08      	ldr	r3, [pc, #32]	; (80035b0 <SystemInit+0x5c>)
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	4a07      	ldr	r2, [pc, #28]	; (80035b0 <SystemInit+0x5c>)
 8003592:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8003596:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8003598:	4b05      	ldr	r3, [pc, #20]	; (80035b0 <SystemInit+0x5c>)
 800359a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800359e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80035a0:	4b05      	ldr	r3, [pc, #20]	; (80035b8 <SystemInit+0x64>)
 80035a2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80035a6:	609a      	str	r2, [r3, #8]
#endif 
}
 80035a8:	bf00      	nop
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bc80      	pop	{r7}
 80035ae:	4770      	bx	lr
 80035b0:	40021000 	.word	0x40021000
 80035b4:	f8ff0000 	.word	0xf8ff0000
 80035b8:	e000ed00 	.word	0xe000ed00

080035bc <TIM2_Ini>:
*  Parameter(s)   :  
*  Return Value   :  
******************************************************************************/

void TIM2_Ini (void)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	af00      	add	r7, sp, #0
	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 80035c0:	2100      	movs	r1, #0
 80035c2:	480b      	ldr	r0, [pc, #44]	; (80035f0 <TIM2_Ini+0x34>)
 80035c4:	f7fd fff6 	bl	80015b4 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_2);
 80035c8:	2104      	movs	r1, #4
 80035ca:	4809      	ldr	r0, [pc, #36]	; (80035f0 <TIM2_Ini+0x34>)
 80035cc:	f7fd fff2 	bl	80015b4 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_3);
 80035d0:	2108      	movs	r1, #8
 80035d2:	4807      	ldr	r0, [pc, #28]	; (80035f0 <TIM2_Ini+0x34>)
 80035d4:	f7fd ffee 	bl	80015b4 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_4);
 80035d8:	210c      	movs	r1, #12
 80035da:	4805      	ldr	r0, [pc, #20]	; (80035f0 <TIM2_Ini+0x34>)
 80035dc:	f7fd ffea 	bl	80015b4 <HAL_TIM_IC_Start_IT>

	HAL_TIM_Base_Start_IT(&htim2);
 80035e0:	4803      	ldr	r0, [pc, #12]	; (80035f0 <TIM2_Ini+0x34>)
 80035e2:	f7fd ff98 	bl	8001516 <HAL_TIM_Base_Start_IT>
	HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80035e6:	201c      	movs	r0, #28
 80035e8:	f7fc ff23 	bl	8000432 <HAL_NVIC_EnableIRQ>
}
 80035ec:	bf00      	nop
 80035ee:	bd80      	pop	{r7, pc}
 80035f0:	200009a4 	.word	0x200009a4

080035f4 <TIM2_HAL_TIM_IC_CaptureCallback>:
*  Parameter(s)   :
*  Return Value   :
******************************************************************************/

void TIM2_HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b082      	sub	sp, #8
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
	if (htim->Instance==TIM2)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003604:	f040 8130 	bne.w	8003868 <TIM2_HAL_TIM_IC_CaptureCallback+0x274>
	{
		if (htim->Channel==HAL_TIM_ACTIVE_CHANNEL_1)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	7f1b      	ldrb	r3, [r3, #28]
 800360c:	2b01      	cmp	r3, #1
 800360e:	d144      	bne.n	800369a <TIM2_HAL_TIM_IC_CaptureCallback+0xa6>
		{
			if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0))
 8003610:	2101      	movs	r1, #1
 8003612:	4897      	ldr	r0, [pc, #604]	; (8003870 <TIM2_HAL_TIM_IC_CaptureCallback+0x27c>)
 8003614:	f7fd faea 	bl	8000bec <HAL_GPIO_ReadPin>
 8003618:	4603      	mov	r3, r0
 800361a:	2b00      	cmp	r3, #0
 800361c:	d016      	beq.n	800364c <TIM2_HAL_TIM_IC_CaptureCallback+0x58>
			{
				__HAL_TIM_SET_CAPTUREPOLARITY(&htim2, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 800361e:	4b95      	ldr	r3, [pc, #596]	; (8003874 <TIM2_HAL_TIM_IC_CaptureCallback+0x280>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	6a19      	ldr	r1, [r3, #32]
 8003624:	4b93      	ldr	r3, [pc, #588]	; (8003874 <TIM2_HAL_TIM_IC_CaptureCallback+0x280>)
 8003626:	681a      	ldr	r2, [r3, #0]
 8003628:	f64f 73f5 	movw	r3, #65525	; 0xfff5
 800362c:	400b      	ands	r3, r1
 800362e:	6213      	str	r3, [r2, #32]
 8003630:	4b90      	ldr	r3, [pc, #576]	; (8003874 <TIM2_HAL_TIM_IC_CaptureCallback+0x280>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	6a1a      	ldr	r2, [r3, #32]
 8003636:	4b8f      	ldr	r3, [pc, #572]	; (8003874 <TIM2_HAL_TIM_IC_CaptureCallback+0x280>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f042 0202 	orr.w	r2, r2, #2
 800363e:	621a      	str	r2, [r3, #32]

				tim2_u16Ch1_Capture_Rising_Edge = __HAL_TIM_GET_COMPARE(&htim2, TIM_CHANNEL_1);
 8003640:	4b8c      	ldr	r3, [pc, #560]	; (8003874 <TIM2_HAL_TIM_IC_CaptureCallback+0x280>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003646:	b29a      	uxth	r2, r3
 8003648:	4b8b      	ldr	r3, [pc, #556]	; (8003878 <TIM2_HAL_TIM_IC_CaptureCallback+0x284>)
 800364a:	801a      	strh	r2, [r3, #0]
			}

			if (!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0))
 800364c:	2101      	movs	r1, #1
 800364e:	4888      	ldr	r0, [pc, #544]	; (8003870 <TIM2_HAL_TIM_IC_CaptureCallback+0x27c>)
 8003650:	f7fd facc 	bl	8000bec <HAL_GPIO_ReadPin>
 8003654:	4603      	mov	r3, r0
 8003656:	2b00      	cmp	r3, #0
 8003658:	d11c      	bne.n	8003694 <TIM2_HAL_TIM_IC_CaptureCallback+0xa0>
			{
				__HAL_TIM_SET_CAPTUREPOLARITY(&htim2, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 800365a:	4b86      	ldr	r3, [pc, #536]	; (8003874 <TIM2_HAL_TIM_IC_CaptureCallback+0x280>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	6a19      	ldr	r1, [r3, #32]
 8003660:	4b84      	ldr	r3, [pc, #528]	; (8003874 <TIM2_HAL_TIM_IC_CaptureCallback+0x280>)
 8003662:	681a      	ldr	r2, [r3, #0]
 8003664:	f64f 73f5 	movw	r3, #65525	; 0xfff5
 8003668:	400b      	ands	r3, r1
 800366a:	6213      	str	r3, [r2, #32]
 800366c:	4b81      	ldr	r3, [pc, #516]	; (8003874 <TIM2_HAL_TIM_IC_CaptureCallback+0x280>)
 800366e:	681a      	ldr	r2, [r3, #0]
 8003670:	4b80      	ldr	r3, [pc, #512]	; (8003874 <TIM2_HAL_TIM_IC_CaptureCallback+0x280>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	6a12      	ldr	r2, [r2, #32]
 8003676:	621a      	str	r2, [r3, #32]

				tim2_u16Ch1_Capture_Falling_Edge = __HAL_TIM_GET_COMPARE(&htim2, TIM_CHANNEL_1);
 8003678:	4b7e      	ldr	r3, [pc, #504]	; (8003874 <TIM2_HAL_TIM_IC_CaptureCallback+0x280>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800367e:	b29a      	uxth	r2, r3
 8003680:	4b7e      	ldr	r3, [pc, #504]	; (800387c <TIM2_HAL_TIM_IC_CaptureCallback+0x288>)
 8003682:	801a      	strh	r2, [r3, #0]

				TIM2_u16Ch1_PulseTime = tim2_u16Ch1_Capture_Falling_Edge - tim2_u16Ch1_Capture_Rising_Edge;
 8003684:	4b7d      	ldr	r3, [pc, #500]	; (800387c <TIM2_HAL_TIM_IC_CaptureCallback+0x288>)
 8003686:	881a      	ldrh	r2, [r3, #0]
 8003688:	4b7b      	ldr	r3, [pc, #492]	; (8003878 <TIM2_HAL_TIM_IC_CaptureCallback+0x284>)
 800368a:	881b      	ldrh	r3, [r3, #0]
 800368c:	1ad3      	subs	r3, r2, r3
 800368e:	b29a      	uxth	r2, r3
 8003690:	4b7b      	ldr	r3, [pc, #492]	; (8003880 <TIM2_HAL_TIM_IC_CaptureCallback+0x28c>)
 8003692:	801a      	strh	r2, [r3, #0]
			}

			TIM4_TIM2_u16Ch1_Counter = 0;
 8003694:	4b7b      	ldr	r3, [pc, #492]	; (8003884 <TIM2_HAL_TIM_IC_CaptureCallback+0x290>)
 8003696:	2200      	movs	r2, #0
 8003698:	801a      	strh	r2, [r3, #0]
		}


		if (htim->Channel==HAL_TIM_ACTIVE_CHANNEL_2)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	7f1b      	ldrb	r3, [r3, #28]
 800369e:	2b02      	cmp	r3, #2
 80036a0:	d148      	bne.n	8003734 <TIM2_HAL_TIM_IC_CaptureCallback+0x140>
		{
			if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1))
 80036a2:	2102      	movs	r1, #2
 80036a4:	4872      	ldr	r0, [pc, #456]	; (8003870 <TIM2_HAL_TIM_IC_CaptureCallback+0x27c>)
 80036a6:	f7fd faa1 	bl	8000bec <HAL_GPIO_ReadPin>
 80036aa:	4603      	mov	r3, r0
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d018      	beq.n	80036e2 <TIM2_HAL_TIM_IC_CaptureCallback+0xee>
			{
				__HAL_TIM_SET_CAPTUREPOLARITY(&htim2, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_FALLING);
 80036b0:	4b70      	ldr	r3, [pc, #448]	; (8003874 <TIM2_HAL_TIM_IC_CaptureCallback+0x280>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	6a19      	ldr	r1, [r3, #32]
 80036b6:	4b6f      	ldr	r3, [pc, #444]	; (8003874 <TIM2_HAL_TIM_IC_CaptureCallback+0x280>)
 80036b8:	681a      	ldr	r2, [r3, #0]
 80036ba:	f64f 735f 	movw	r3, #65375	; 0xff5f
 80036be:	400b      	ands	r3, r1
 80036c0:	6213      	str	r3, [r2, #32]
 80036c2:	4b6c      	ldr	r3, [pc, #432]	; (8003874 <TIM2_HAL_TIM_IC_CaptureCallback+0x280>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	6a1a      	ldr	r2, [r3, #32]
 80036c8:	4b6a      	ldr	r3, [pc, #424]	; (8003874 <TIM2_HAL_TIM_IC_CaptureCallback+0x280>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f042 0220 	orr.w	r2, r2, #32
 80036d0:	621a      	str	r2, [r3, #32]

				tim2_u16Ch2_Capture_Rising_Edge = __HAL_TIM_GET_COMPARE(&htim2, TIM_CHANNEL_2);
 80036d2:	4b68      	ldr	r3, [pc, #416]	; (8003874 <TIM2_HAL_TIM_IC_CaptureCallback+0x280>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	3334      	adds	r3, #52	; 0x34
 80036d8:	3304      	adds	r3, #4
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	b29a      	uxth	r2, r3
 80036de:	4b6a      	ldr	r3, [pc, #424]	; (8003888 <TIM2_HAL_TIM_IC_CaptureCallback+0x294>)
 80036e0:	801a      	strh	r2, [r3, #0]

			}

			if (!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1))
 80036e2:	2102      	movs	r1, #2
 80036e4:	4862      	ldr	r0, [pc, #392]	; (8003870 <TIM2_HAL_TIM_IC_CaptureCallback+0x27c>)
 80036e6:	f7fd fa81 	bl	8000bec <HAL_GPIO_ReadPin>
 80036ea:	4603      	mov	r3, r0
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d11e      	bne.n	800372e <TIM2_HAL_TIM_IC_CaptureCallback+0x13a>
			{
				__HAL_TIM_SET_CAPTUREPOLARITY(&htim2, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_RISING);
 80036f0:	4b60      	ldr	r3, [pc, #384]	; (8003874 <TIM2_HAL_TIM_IC_CaptureCallback+0x280>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	6a19      	ldr	r1, [r3, #32]
 80036f6:	4b5f      	ldr	r3, [pc, #380]	; (8003874 <TIM2_HAL_TIM_IC_CaptureCallback+0x280>)
 80036f8:	681a      	ldr	r2, [r3, #0]
 80036fa:	f64f 735f 	movw	r3, #65375	; 0xff5f
 80036fe:	400b      	ands	r3, r1
 8003700:	6213      	str	r3, [r2, #32]
 8003702:	4b5c      	ldr	r3, [pc, #368]	; (8003874 <TIM2_HAL_TIM_IC_CaptureCallback+0x280>)
 8003704:	681a      	ldr	r2, [r3, #0]
 8003706:	4b5b      	ldr	r3, [pc, #364]	; (8003874 <TIM2_HAL_TIM_IC_CaptureCallback+0x280>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	6a12      	ldr	r2, [r2, #32]
 800370c:	621a      	str	r2, [r3, #32]

				tim2_u16Ch2_Capture_Falling_Edge = __HAL_TIM_GET_COMPARE(&htim2, TIM_CHANNEL_2);
 800370e:	4b59      	ldr	r3, [pc, #356]	; (8003874 <TIM2_HAL_TIM_IC_CaptureCallback+0x280>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	3334      	adds	r3, #52	; 0x34
 8003714:	3304      	adds	r3, #4
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	b29a      	uxth	r2, r3
 800371a:	4b5c      	ldr	r3, [pc, #368]	; (800388c <TIM2_HAL_TIM_IC_CaptureCallback+0x298>)
 800371c:	801a      	strh	r2, [r3, #0]

				TIM2_u16Ch2_PulseTime = tim2_u16Ch2_Capture_Falling_Edge - tim2_u16Ch2_Capture_Rising_Edge;
 800371e:	4b5b      	ldr	r3, [pc, #364]	; (800388c <TIM2_HAL_TIM_IC_CaptureCallback+0x298>)
 8003720:	881a      	ldrh	r2, [r3, #0]
 8003722:	4b59      	ldr	r3, [pc, #356]	; (8003888 <TIM2_HAL_TIM_IC_CaptureCallback+0x294>)
 8003724:	881b      	ldrh	r3, [r3, #0]
 8003726:	1ad3      	subs	r3, r2, r3
 8003728:	b29a      	uxth	r2, r3
 800372a:	4b59      	ldr	r3, [pc, #356]	; (8003890 <TIM2_HAL_TIM_IC_CaptureCallback+0x29c>)
 800372c:	801a      	strh	r2, [r3, #0]
			}

			TIM4_TIM2_u16Ch2_Counter = 0;
 800372e:	4b59      	ldr	r3, [pc, #356]	; (8003894 <TIM2_HAL_TIM_IC_CaptureCallback+0x2a0>)
 8003730:	2200      	movs	r2, #0
 8003732:	801a      	strh	r2, [r3, #0]
		}


		if (htim->Channel==HAL_TIM_ACTIVE_CHANNEL_3)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	7f1b      	ldrb	r3, [r3, #28]
 8003738:	2b04      	cmp	r3, #4
 800373a:	d148      	bne.n	80037ce <TIM2_HAL_TIM_IC_CaptureCallback+0x1da>
		{
			if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2))
 800373c:	2104      	movs	r1, #4
 800373e:	484c      	ldr	r0, [pc, #304]	; (8003870 <TIM2_HAL_TIM_IC_CaptureCallback+0x27c>)
 8003740:	f7fd fa54 	bl	8000bec <HAL_GPIO_ReadPin>
 8003744:	4603      	mov	r3, r0
 8003746:	2b00      	cmp	r3, #0
 8003748:	d018      	beq.n	800377c <TIM2_HAL_TIM_IC_CaptureCallback+0x188>
			{
				__HAL_TIM_SET_CAPTUREPOLARITY(&htim2, TIM_CHANNEL_3, TIM_INPUTCHANNELPOLARITY_FALLING);
 800374a:	4b4a      	ldr	r3, [pc, #296]	; (8003874 <TIM2_HAL_TIM_IC_CaptureCallback+0x280>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	6a19      	ldr	r1, [r3, #32]
 8003750:	4b48      	ldr	r3, [pc, #288]	; (8003874 <TIM2_HAL_TIM_IC_CaptureCallback+0x280>)
 8003752:	681a      	ldr	r2, [r3, #0]
 8003754:	f24f 53ff 	movw	r3, #62975	; 0xf5ff
 8003758:	400b      	ands	r3, r1
 800375a:	6213      	str	r3, [r2, #32]
 800375c:	4b45      	ldr	r3, [pc, #276]	; (8003874 <TIM2_HAL_TIM_IC_CaptureCallback+0x280>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	6a1a      	ldr	r2, [r3, #32]
 8003762:	4b44      	ldr	r3, [pc, #272]	; (8003874 <TIM2_HAL_TIM_IC_CaptureCallback+0x280>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800376a:	621a      	str	r2, [r3, #32]

				tim2_u16Ch3_Capture_Rising_Edge = __HAL_TIM_GET_COMPARE(&htim2, TIM_CHANNEL_3);
 800376c:	4b41      	ldr	r3, [pc, #260]	; (8003874 <TIM2_HAL_TIM_IC_CaptureCallback+0x280>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	3334      	adds	r3, #52	; 0x34
 8003772:	3308      	adds	r3, #8
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	b29a      	uxth	r2, r3
 8003778:	4b47      	ldr	r3, [pc, #284]	; (8003898 <TIM2_HAL_TIM_IC_CaptureCallback+0x2a4>)
 800377a:	801a      	strh	r2, [r3, #0]
			}

			if (!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2))
 800377c:	2104      	movs	r1, #4
 800377e:	483c      	ldr	r0, [pc, #240]	; (8003870 <TIM2_HAL_TIM_IC_CaptureCallback+0x27c>)
 8003780:	f7fd fa34 	bl	8000bec <HAL_GPIO_ReadPin>
 8003784:	4603      	mov	r3, r0
 8003786:	2b00      	cmp	r3, #0
 8003788:	d11e      	bne.n	80037c8 <TIM2_HAL_TIM_IC_CaptureCallback+0x1d4>
			{
				__HAL_TIM_SET_CAPTUREPOLARITY(&htim2, TIM_CHANNEL_3, TIM_INPUTCHANNELPOLARITY_RISING);
 800378a:	4b3a      	ldr	r3, [pc, #232]	; (8003874 <TIM2_HAL_TIM_IC_CaptureCallback+0x280>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	6a19      	ldr	r1, [r3, #32]
 8003790:	4b38      	ldr	r3, [pc, #224]	; (8003874 <TIM2_HAL_TIM_IC_CaptureCallback+0x280>)
 8003792:	681a      	ldr	r2, [r3, #0]
 8003794:	f24f 53ff 	movw	r3, #62975	; 0xf5ff
 8003798:	400b      	ands	r3, r1
 800379a:	6213      	str	r3, [r2, #32]
 800379c:	4b35      	ldr	r3, [pc, #212]	; (8003874 <TIM2_HAL_TIM_IC_CaptureCallback+0x280>)
 800379e:	681a      	ldr	r2, [r3, #0]
 80037a0:	4b34      	ldr	r3, [pc, #208]	; (8003874 <TIM2_HAL_TIM_IC_CaptureCallback+0x280>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	6a12      	ldr	r2, [r2, #32]
 80037a6:	621a      	str	r2, [r3, #32]

				tim2_u16Ch3_Capture_Falling_Edge = __HAL_TIM_GET_COMPARE(&htim2, TIM_CHANNEL_3);
 80037a8:	4b32      	ldr	r3, [pc, #200]	; (8003874 <TIM2_HAL_TIM_IC_CaptureCallback+0x280>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	3334      	adds	r3, #52	; 0x34
 80037ae:	3308      	adds	r3, #8
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	b29a      	uxth	r2, r3
 80037b4:	4b39      	ldr	r3, [pc, #228]	; (800389c <TIM2_HAL_TIM_IC_CaptureCallback+0x2a8>)
 80037b6:	801a      	strh	r2, [r3, #0]

				TIM2_u16Ch3_PulseTime = tim2_u16Ch3_Capture_Falling_Edge - tim2_u16Ch3_Capture_Rising_Edge;
 80037b8:	4b38      	ldr	r3, [pc, #224]	; (800389c <TIM2_HAL_TIM_IC_CaptureCallback+0x2a8>)
 80037ba:	881a      	ldrh	r2, [r3, #0]
 80037bc:	4b36      	ldr	r3, [pc, #216]	; (8003898 <TIM2_HAL_TIM_IC_CaptureCallback+0x2a4>)
 80037be:	881b      	ldrh	r3, [r3, #0]
 80037c0:	1ad3      	subs	r3, r2, r3
 80037c2:	b29a      	uxth	r2, r3
 80037c4:	4b36      	ldr	r3, [pc, #216]	; (80038a0 <TIM2_HAL_TIM_IC_CaptureCallback+0x2ac>)
 80037c6:	801a      	strh	r2, [r3, #0]
			}

			TIM4_TIM2_u16Ch3_Counter = 0;
 80037c8:	4b36      	ldr	r3, [pc, #216]	; (80038a4 <TIM2_HAL_TIM_IC_CaptureCallback+0x2b0>)
 80037ca:	2200      	movs	r2, #0
 80037cc:	801a      	strh	r2, [r3, #0]
		}


		if (htim->Channel==HAL_TIM_ACTIVE_CHANNEL_4)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	7f1b      	ldrb	r3, [r3, #28]
 80037d2:	2b08      	cmp	r3, #8
 80037d4:	d148      	bne.n	8003868 <TIM2_HAL_TIM_IC_CaptureCallback+0x274>
		{
			if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3))
 80037d6:	2108      	movs	r1, #8
 80037d8:	4825      	ldr	r0, [pc, #148]	; (8003870 <TIM2_HAL_TIM_IC_CaptureCallback+0x27c>)
 80037da:	f7fd fa07 	bl	8000bec <HAL_GPIO_ReadPin>
 80037de:	4603      	mov	r3, r0
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d018      	beq.n	8003816 <TIM2_HAL_TIM_IC_CaptureCallback+0x222>
			{
				__HAL_TIM_SET_CAPTUREPOLARITY(&htim2, TIM_CHANNEL_4, TIM_INPUTCHANNELPOLARITY_FALLING);
 80037e4:	4b23      	ldr	r3, [pc, #140]	; (8003874 <TIM2_HAL_TIM_IC_CaptureCallback+0x280>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	6a19      	ldr	r1, [r3, #32]
 80037ea:	4b22      	ldr	r3, [pc, #136]	; (8003874 <TIM2_HAL_TIM_IC_CaptureCallback+0x280>)
 80037ec:	681a      	ldr	r2, [r3, #0]
 80037ee:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 80037f2:	400b      	ands	r3, r1
 80037f4:	6213      	str	r3, [r2, #32]
 80037f6:	4b1f      	ldr	r3, [pc, #124]	; (8003874 <TIM2_HAL_TIM_IC_CaptureCallback+0x280>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	6a1a      	ldr	r2, [r3, #32]
 80037fc:	4b1d      	ldr	r3, [pc, #116]	; (8003874 <TIM2_HAL_TIM_IC_CaptureCallback+0x280>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003804:	621a      	str	r2, [r3, #32]

				tim2_u16Ch4_Capture_Rising_Edge = __HAL_TIM_GET_COMPARE(&htim2, TIM_CHANNEL_4);
 8003806:	4b1b      	ldr	r3, [pc, #108]	; (8003874 <TIM2_HAL_TIM_IC_CaptureCallback+0x280>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	3334      	adds	r3, #52	; 0x34
 800380c:	330c      	adds	r3, #12
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	b29a      	uxth	r2, r3
 8003812:	4b25      	ldr	r3, [pc, #148]	; (80038a8 <TIM2_HAL_TIM_IC_CaptureCallback+0x2b4>)
 8003814:	801a      	strh	r2, [r3, #0]
			}

			if (!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3))
 8003816:	2108      	movs	r1, #8
 8003818:	4815      	ldr	r0, [pc, #84]	; (8003870 <TIM2_HAL_TIM_IC_CaptureCallback+0x27c>)
 800381a:	f7fd f9e7 	bl	8000bec <HAL_GPIO_ReadPin>
 800381e:	4603      	mov	r3, r0
 8003820:	2b00      	cmp	r3, #0
 8003822:	d11e      	bne.n	8003862 <TIM2_HAL_TIM_IC_CaptureCallback+0x26e>
			{
				__HAL_TIM_SET_CAPTUREPOLARITY(&htim2, TIM_CHANNEL_4, TIM_INPUTCHANNELPOLARITY_RISING);
 8003824:	4b13      	ldr	r3, [pc, #76]	; (8003874 <TIM2_HAL_TIM_IC_CaptureCallback+0x280>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	6a19      	ldr	r1, [r3, #32]
 800382a:	4b12      	ldr	r3, [pc, #72]	; (8003874 <TIM2_HAL_TIM_IC_CaptureCallback+0x280>)
 800382c:	681a      	ldr	r2, [r3, #0]
 800382e:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 8003832:	400b      	ands	r3, r1
 8003834:	6213      	str	r3, [r2, #32]
 8003836:	4b0f      	ldr	r3, [pc, #60]	; (8003874 <TIM2_HAL_TIM_IC_CaptureCallback+0x280>)
 8003838:	681a      	ldr	r2, [r3, #0]
 800383a:	4b0e      	ldr	r3, [pc, #56]	; (8003874 <TIM2_HAL_TIM_IC_CaptureCallback+0x280>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	6a12      	ldr	r2, [r2, #32]
 8003840:	621a      	str	r2, [r3, #32]

				tim2_u16Ch4_Capture_Falling_Edge = __HAL_TIM_GET_COMPARE(&htim2, TIM_CHANNEL_4);
 8003842:	4b0c      	ldr	r3, [pc, #48]	; (8003874 <TIM2_HAL_TIM_IC_CaptureCallback+0x280>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	3334      	adds	r3, #52	; 0x34
 8003848:	330c      	adds	r3, #12
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	b29a      	uxth	r2, r3
 800384e:	4b17      	ldr	r3, [pc, #92]	; (80038ac <TIM2_HAL_TIM_IC_CaptureCallback+0x2b8>)
 8003850:	801a      	strh	r2, [r3, #0]

				TIM2_u16Ch4_PulseTime = tim2_u16Ch4_Capture_Falling_Edge - tim2_u16Ch4_Capture_Rising_Edge;
 8003852:	4b16      	ldr	r3, [pc, #88]	; (80038ac <TIM2_HAL_TIM_IC_CaptureCallback+0x2b8>)
 8003854:	881a      	ldrh	r2, [r3, #0]
 8003856:	4b14      	ldr	r3, [pc, #80]	; (80038a8 <TIM2_HAL_TIM_IC_CaptureCallback+0x2b4>)
 8003858:	881b      	ldrh	r3, [r3, #0]
 800385a:	1ad3      	subs	r3, r2, r3
 800385c:	b29a      	uxth	r2, r3
 800385e:	4b14      	ldr	r3, [pc, #80]	; (80038b0 <TIM2_HAL_TIM_IC_CaptureCallback+0x2bc>)
 8003860:	801a      	strh	r2, [r3, #0]
			}

			TIM4_TIM2_u16Ch4_Counter = 0;
 8003862:	4b14      	ldr	r3, [pc, #80]	; (80038b4 <TIM2_HAL_TIM_IC_CaptureCallback+0x2c0>)
 8003864:	2200      	movs	r2, #0
 8003866:	801a      	strh	r2, [r3, #0]
		}

	  }
}
 8003868:	bf00      	nop
 800386a:	3708      	adds	r7, #8
 800386c:	46bd      	mov	sp, r7
 800386e:	bd80      	pop	{r7, pc}
 8003870:	40010800 	.word	0x40010800
 8003874:	200009a4 	.word	0x200009a4
 8003878:	200009fc 	.word	0x200009fc
 800387c:	200009f4 	.word	0x200009f4
 8003880:	200009ea 	.word	0x200009ea
 8003884:	20000a22 	.word	0x20000a22
 8003888:	200009f6 	.word	0x200009f6
 800388c:	200009ec 	.word	0x200009ec
 8003890:	200009f0 	.word	0x200009f0
 8003894:	20000a26 	.word	0x20000a26
 8003898:	200009f2 	.word	0x200009f2
 800389c:	200009fa 	.word	0x200009fa
 80038a0:	20000a00 	.word	0x20000a00
 80038a4:	20000a1e 	.word	0x20000a1e
 80038a8:	200009fe 	.word	0x200009fe
 80038ac:	200009ee 	.word	0x200009ee
 80038b0:	200009f8 	.word	0x200009f8
 80038b4:	20000a28 	.word	0x20000a28

080038b8 <TIM3_Ini>:
*  Parameter(s)   :  
*  Return Value   :  
******************************************************************************/

void TIM3_Ini (void)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	af00      	add	r7, sp, #0
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 80038bc:	2100      	movs	r1, #0
 80038be:	480b      	ldr	r0, [pc, #44]	; (80038ec <TIM3_Ini+0x34>)
 80038c0:	f7fd fe78 	bl	80015b4 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
 80038c4:	2104      	movs	r1, #4
 80038c6:	4809      	ldr	r0, [pc, #36]	; (80038ec <TIM3_Ini+0x34>)
 80038c8:	f7fd fe74 	bl	80015b4 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_3);
 80038cc:	2108      	movs	r1, #8
 80038ce:	4807      	ldr	r0, [pc, #28]	; (80038ec <TIM3_Ini+0x34>)
 80038d0:	f7fd fe70 	bl	80015b4 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_4);
 80038d4:	210c      	movs	r1, #12
 80038d6:	4805      	ldr	r0, [pc, #20]	; (80038ec <TIM3_Ini+0x34>)
 80038d8:	f7fd fe6c 	bl	80015b4 <HAL_TIM_IC_Start_IT>

	HAL_TIM_Base_Start_IT(&htim3);
 80038dc:	4803      	ldr	r0, [pc, #12]	; (80038ec <TIM3_Ini+0x34>)
 80038de:	f7fd fe1a 	bl	8001516 <HAL_TIM_Base_Start_IT>
	HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80038e2:	201d      	movs	r0, #29
 80038e4:	f7fc fda5 	bl	8000432 <HAL_NVIC_EnableIRQ>
}
 80038e8:	bf00      	nop
 80038ea:	bd80      	pop	{r7, pc}
 80038ec:	200004e0 	.word	0x200004e0

080038f0 <TIM3_HAL_TIM_IC_CaptureCallback>:
*  Parameter(s)   :
*  Return Value   :
******************************************************************************/

void TIM3_HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b082      	sub	sp, #8
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
	if (htim->Instance==TIM3)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a97      	ldr	r2, [pc, #604]	; (8003b5c <TIM3_HAL_TIM_IC_CaptureCallback+0x26c>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	f040 8155 	bne.w	8003bae <TIM3_HAL_TIM_IC_CaptureCallback+0x2be>
	{
		if (htim->Channel==HAL_TIM_ACTIVE_CHANNEL_1)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	7f1b      	ldrb	r3, [r3, #28]
 8003908:	2b01      	cmp	r3, #1
 800390a:	d144      	bne.n	8003996 <TIM3_HAL_TIM_IC_CaptureCallback+0xa6>
		{
			if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6))
 800390c:	2140      	movs	r1, #64	; 0x40
 800390e:	4894      	ldr	r0, [pc, #592]	; (8003b60 <TIM3_HAL_TIM_IC_CaptureCallback+0x270>)
 8003910:	f7fd f96c 	bl	8000bec <HAL_GPIO_ReadPin>
 8003914:	4603      	mov	r3, r0
 8003916:	2b00      	cmp	r3, #0
 8003918:	d016      	beq.n	8003948 <TIM3_HAL_TIM_IC_CaptureCallback+0x58>
			{
				__HAL_TIM_SET_CAPTUREPOLARITY(&htim3, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 800391a:	4b92      	ldr	r3, [pc, #584]	; (8003b64 <TIM3_HAL_TIM_IC_CaptureCallback+0x274>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	6a19      	ldr	r1, [r3, #32]
 8003920:	4b90      	ldr	r3, [pc, #576]	; (8003b64 <TIM3_HAL_TIM_IC_CaptureCallback+0x274>)
 8003922:	681a      	ldr	r2, [r3, #0]
 8003924:	f64f 73f5 	movw	r3, #65525	; 0xfff5
 8003928:	400b      	ands	r3, r1
 800392a:	6213      	str	r3, [r2, #32]
 800392c:	4b8d      	ldr	r3, [pc, #564]	; (8003b64 <TIM3_HAL_TIM_IC_CaptureCallback+0x274>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	6a1a      	ldr	r2, [r3, #32]
 8003932:	4b8c      	ldr	r3, [pc, #560]	; (8003b64 <TIM3_HAL_TIM_IC_CaptureCallback+0x274>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f042 0202 	orr.w	r2, r2, #2
 800393a:	621a      	str	r2, [r3, #32]

				tim3_u16Ch1_Capture_Rising_Edge = __HAL_TIM_GET_COMPARE(&htim3, TIM_CHANNEL_1);
 800393c:	4b89      	ldr	r3, [pc, #548]	; (8003b64 <TIM3_HAL_TIM_IC_CaptureCallback+0x274>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003942:	b29a      	uxth	r2, r3
 8003944:	4b88      	ldr	r3, [pc, #544]	; (8003b68 <TIM3_HAL_TIM_IC_CaptureCallback+0x278>)
 8003946:	801a      	strh	r2, [r3, #0]
			}

			if (!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6))
 8003948:	2140      	movs	r1, #64	; 0x40
 800394a:	4885      	ldr	r0, [pc, #532]	; (8003b60 <TIM3_HAL_TIM_IC_CaptureCallback+0x270>)
 800394c:	f7fd f94e 	bl	8000bec <HAL_GPIO_ReadPin>
 8003950:	4603      	mov	r3, r0
 8003952:	2b00      	cmp	r3, #0
 8003954:	d11c      	bne.n	8003990 <TIM3_HAL_TIM_IC_CaptureCallback+0xa0>
			{
				__HAL_TIM_SET_CAPTUREPOLARITY(&htim3, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8003956:	4b83      	ldr	r3, [pc, #524]	; (8003b64 <TIM3_HAL_TIM_IC_CaptureCallback+0x274>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	6a19      	ldr	r1, [r3, #32]
 800395c:	4b81      	ldr	r3, [pc, #516]	; (8003b64 <TIM3_HAL_TIM_IC_CaptureCallback+0x274>)
 800395e:	681a      	ldr	r2, [r3, #0]
 8003960:	f64f 73f5 	movw	r3, #65525	; 0xfff5
 8003964:	400b      	ands	r3, r1
 8003966:	6213      	str	r3, [r2, #32]
 8003968:	4b7e      	ldr	r3, [pc, #504]	; (8003b64 <TIM3_HAL_TIM_IC_CaptureCallback+0x274>)
 800396a:	681a      	ldr	r2, [r3, #0]
 800396c:	4b7d      	ldr	r3, [pc, #500]	; (8003b64 <TIM3_HAL_TIM_IC_CaptureCallback+0x274>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	6a12      	ldr	r2, [r2, #32]
 8003972:	621a      	str	r2, [r3, #32]

				tim3_u16Ch1_Capture_Falling_Edge = __HAL_TIM_GET_COMPARE(&htim3, TIM_CHANNEL_1);
 8003974:	4b7b      	ldr	r3, [pc, #492]	; (8003b64 <TIM3_HAL_TIM_IC_CaptureCallback+0x274>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800397a:	b29a      	uxth	r2, r3
 800397c:	4b7b      	ldr	r3, [pc, #492]	; (8003b6c <TIM3_HAL_TIM_IC_CaptureCallback+0x27c>)
 800397e:	801a      	strh	r2, [r3, #0]

				TIM3_u16Ch1_PulseTime = tim3_u16Ch1_Capture_Falling_Edge - tim3_u16Ch1_Capture_Rising_Edge;
 8003980:	4b7a      	ldr	r3, [pc, #488]	; (8003b6c <TIM3_HAL_TIM_IC_CaptureCallback+0x27c>)
 8003982:	881a      	ldrh	r2, [r3, #0]
 8003984:	4b78      	ldr	r3, [pc, #480]	; (8003b68 <TIM3_HAL_TIM_IC_CaptureCallback+0x278>)
 8003986:	881b      	ldrh	r3, [r3, #0]
 8003988:	1ad3      	subs	r3, r2, r3
 800398a:	b29a      	uxth	r2, r3
 800398c:	4b78      	ldr	r3, [pc, #480]	; (8003b70 <TIM3_HAL_TIM_IC_CaptureCallback+0x280>)
 800398e:	801a      	strh	r2, [r3, #0]
			}

			TIM4_TIM3_u16Ch1_Counter = 0;
 8003990:	4b78      	ldr	r3, [pc, #480]	; (8003b74 <TIM3_HAL_TIM_IC_CaptureCallback+0x284>)
 8003992:	2200      	movs	r2, #0
 8003994:	801a      	strh	r2, [r3, #0]
		}


		if (htim->Channel==HAL_TIM_ACTIVE_CHANNEL_2)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	7f1b      	ldrb	r3, [r3, #28]
 800399a:	2b02      	cmp	r3, #2
 800399c:	d148      	bne.n	8003a30 <TIM3_HAL_TIM_IC_CaptureCallback+0x140>
		{
			if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7))
 800399e:	2180      	movs	r1, #128	; 0x80
 80039a0:	486f      	ldr	r0, [pc, #444]	; (8003b60 <TIM3_HAL_TIM_IC_CaptureCallback+0x270>)
 80039a2:	f7fd f923 	bl	8000bec <HAL_GPIO_ReadPin>
 80039a6:	4603      	mov	r3, r0
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d018      	beq.n	80039de <TIM3_HAL_TIM_IC_CaptureCallback+0xee>
			{
				__HAL_TIM_SET_CAPTUREPOLARITY(&htim3, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_FALLING);
 80039ac:	4b6d      	ldr	r3, [pc, #436]	; (8003b64 <TIM3_HAL_TIM_IC_CaptureCallback+0x274>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	6a19      	ldr	r1, [r3, #32]
 80039b2:	4b6c      	ldr	r3, [pc, #432]	; (8003b64 <TIM3_HAL_TIM_IC_CaptureCallback+0x274>)
 80039b4:	681a      	ldr	r2, [r3, #0]
 80039b6:	f64f 735f 	movw	r3, #65375	; 0xff5f
 80039ba:	400b      	ands	r3, r1
 80039bc:	6213      	str	r3, [r2, #32]
 80039be:	4b69      	ldr	r3, [pc, #420]	; (8003b64 <TIM3_HAL_TIM_IC_CaptureCallback+0x274>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	6a1a      	ldr	r2, [r3, #32]
 80039c4:	4b67      	ldr	r3, [pc, #412]	; (8003b64 <TIM3_HAL_TIM_IC_CaptureCallback+0x274>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f042 0220 	orr.w	r2, r2, #32
 80039cc:	621a      	str	r2, [r3, #32]

				tim3_u16Ch2_Capture_Rising_Edge = __HAL_TIM_GET_COMPARE(&htim3, TIM_CHANNEL_2);
 80039ce:	4b65      	ldr	r3, [pc, #404]	; (8003b64 <TIM3_HAL_TIM_IC_CaptureCallback+0x274>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	3334      	adds	r3, #52	; 0x34
 80039d4:	3304      	adds	r3, #4
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	b29a      	uxth	r2, r3
 80039da:	4b67      	ldr	r3, [pc, #412]	; (8003b78 <TIM3_HAL_TIM_IC_CaptureCallback+0x288>)
 80039dc:	801a      	strh	r2, [r3, #0]

			}

			if (!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7))
 80039de:	2180      	movs	r1, #128	; 0x80
 80039e0:	485f      	ldr	r0, [pc, #380]	; (8003b60 <TIM3_HAL_TIM_IC_CaptureCallback+0x270>)
 80039e2:	f7fd f903 	bl	8000bec <HAL_GPIO_ReadPin>
 80039e6:	4603      	mov	r3, r0
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d11e      	bne.n	8003a2a <TIM3_HAL_TIM_IC_CaptureCallback+0x13a>
			{
				__HAL_TIM_SET_CAPTUREPOLARITY(&htim3, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_RISING);
 80039ec:	4b5d      	ldr	r3, [pc, #372]	; (8003b64 <TIM3_HAL_TIM_IC_CaptureCallback+0x274>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	6a19      	ldr	r1, [r3, #32]
 80039f2:	4b5c      	ldr	r3, [pc, #368]	; (8003b64 <TIM3_HAL_TIM_IC_CaptureCallback+0x274>)
 80039f4:	681a      	ldr	r2, [r3, #0]
 80039f6:	f64f 735f 	movw	r3, #65375	; 0xff5f
 80039fa:	400b      	ands	r3, r1
 80039fc:	6213      	str	r3, [r2, #32]
 80039fe:	4b59      	ldr	r3, [pc, #356]	; (8003b64 <TIM3_HAL_TIM_IC_CaptureCallback+0x274>)
 8003a00:	681a      	ldr	r2, [r3, #0]
 8003a02:	4b58      	ldr	r3, [pc, #352]	; (8003b64 <TIM3_HAL_TIM_IC_CaptureCallback+0x274>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	6a12      	ldr	r2, [r2, #32]
 8003a08:	621a      	str	r2, [r3, #32]

				tim3_u16Ch2_Capture_Falling_Edge = __HAL_TIM_GET_COMPARE(&htim3, TIM_CHANNEL_2);
 8003a0a:	4b56      	ldr	r3, [pc, #344]	; (8003b64 <TIM3_HAL_TIM_IC_CaptureCallback+0x274>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	3334      	adds	r3, #52	; 0x34
 8003a10:	3304      	adds	r3, #4
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	b29a      	uxth	r2, r3
 8003a16:	4b59      	ldr	r3, [pc, #356]	; (8003b7c <TIM3_HAL_TIM_IC_CaptureCallback+0x28c>)
 8003a18:	801a      	strh	r2, [r3, #0]

				TIM3_u16Ch2_PulseTime = tim3_u16Ch2_Capture_Falling_Edge - tim3_u16Ch2_Capture_Rising_Edge;
 8003a1a:	4b58      	ldr	r3, [pc, #352]	; (8003b7c <TIM3_HAL_TIM_IC_CaptureCallback+0x28c>)
 8003a1c:	881a      	ldrh	r2, [r3, #0]
 8003a1e:	4b56      	ldr	r3, [pc, #344]	; (8003b78 <TIM3_HAL_TIM_IC_CaptureCallback+0x288>)
 8003a20:	881b      	ldrh	r3, [r3, #0]
 8003a22:	1ad3      	subs	r3, r2, r3
 8003a24:	b29a      	uxth	r2, r3
 8003a26:	4b56      	ldr	r3, [pc, #344]	; (8003b80 <TIM3_HAL_TIM_IC_CaptureCallback+0x290>)
 8003a28:	801a      	strh	r2, [r3, #0]
			}

			TIM4_TIM3_u16Ch2_Counter = 0;
 8003a2a:	4b56      	ldr	r3, [pc, #344]	; (8003b84 <TIM3_HAL_TIM_IC_CaptureCallback+0x294>)
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	801a      	strh	r2, [r3, #0]
		}


		if (htim->Channel==HAL_TIM_ACTIVE_CHANNEL_3)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	7f1b      	ldrb	r3, [r3, #28]
 8003a34:	2b04      	cmp	r3, #4
 8003a36:	d148      	bne.n	8003aca <TIM3_HAL_TIM_IC_CaptureCallback+0x1da>
		{
			if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0))
 8003a38:	2101      	movs	r1, #1
 8003a3a:	4853      	ldr	r0, [pc, #332]	; (8003b88 <TIM3_HAL_TIM_IC_CaptureCallback+0x298>)
 8003a3c:	f7fd f8d6 	bl	8000bec <HAL_GPIO_ReadPin>
 8003a40:	4603      	mov	r3, r0
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d018      	beq.n	8003a78 <TIM3_HAL_TIM_IC_CaptureCallback+0x188>
			{
				__HAL_TIM_SET_CAPTUREPOLARITY(&htim3, TIM_CHANNEL_3, TIM_INPUTCHANNELPOLARITY_FALLING);
 8003a46:	4b47      	ldr	r3, [pc, #284]	; (8003b64 <TIM3_HAL_TIM_IC_CaptureCallback+0x274>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	6a19      	ldr	r1, [r3, #32]
 8003a4c:	4b45      	ldr	r3, [pc, #276]	; (8003b64 <TIM3_HAL_TIM_IC_CaptureCallback+0x274>)
 8003a4e:	681a      	ldr	r2, [r3, #0]
 8003a50:	f24f 53ff 	movw	r3, #62975	; 0xf5ff
 8003a54:	400b      	ands	r3, r1
 8003a56:	6213      	str	r3, [r2, #32]
 8003a58:	4b42      	ldr	r3, [pc, #264]	; (8003b64 <TIM3_HAL_TIM_IC_CaptureCallback+0x274>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	6a1a      	ldr	r2, [r3, #32]
 8003a5e:	4b41      	ldr	r3, [pc, #260]	; (8003b64 <TIM3_HAL_TIM_IC_CaptureCallback+0x274>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a66:	621a      	str	r2, [r3, #32]

				tim3_u16Ch3_Capture_Rising_Edge = __HAL_TIM_GET_COMPARE(&htim3, TIM_CHANNEL_3);
 8003a68:	4b3e      	ldr	r3, [pc, #248]	; (8003b64 <TIM3_HAL_TIM_IC_CaptureCallback+0x274>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	3334      	adds	r3, #52	; 0x34
 8003a6e:	3308      	adds	r3, #8
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	b29a      	uxth	r2, r3
 8003a74:	4b45      	ldr	r3, [pc, #276]	; (8003b8c <TIM3_HAL_TIM_IC_CaptureCallback+0x29c>)
 8003a76:	801a      	strh	r2, [r3, #0]
			}

			if (!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0))
 8003a78:	2101      	movs	r1, #1
 8003a7a:	4843      	ldr	r0, [pc, #268]	; (8003b88 <TIM3_HAL_TIM_IC_CaptureCallback+0x298>)
 8003a7c:	f7fd f8b6 	bl	8000bec <HAL_GPIO_ReadPin>
 8003a80:	4603      	mov	r3, r0
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d11e      	bne.n	8003ac4 <TIM3_HAL_TIM_IC_CaptureCallback+0x1d4>
			{
				__HAL_TIM_SET_CAPTUREPOLARITY(&htim3, TIM_CHANNEL_3, TIM_INPUTCHANNELPOLARITY_RISING);
 8003a86:	4b37      	ldr	r3, [pc, #220]	; (8003b64 <TIM3_HAL_TIM_IC_CaptureCallback+0x274>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	6a19      	ldr	r1, [r3, #32]
 8003a8c:	4b35      	ldr	r3, [pc, #212]	; (8003b64 <TIM3_HAL_TIM_IC_CaptureCallback+0x274>)
 8003a8e:	681a      	ldr	r2, [r3, #0]
 8003a90:	f24f 53ff 	movw	r3, #62975	; 0xf5ff
 8003a94:	400b      	ands	r3, r1
 8003a96:	6213      	str	r3, [r2, #32]
 8003a98:	4b32      	ldr	r3, [pc, #200]	; (8003b64 <TIM3_HAL_TIM_IC_CaptureCallback+0x274>)
 8003a9a:	681a      	ldr	r2, [r3, #0]
 8003a9c:	4b31      	ldr	r3, [pc, #196]	; (8003b64 <TIM3_HAL_TIM_IC_CaptureCallback+0x274>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	6a12      	ldr	r2, [r2, #32]
 8003aa2:	621a      	str	r2, [r3, #32]

				tim3_u16Ch3_Capture_Falling_Edge = __HAL_TIM_GET_COMPARE(&htim3, TIM_CHANNEL_3);
 8003aa4:	4b2f      	ldr	r3, [pc, #188]	; (8003b64 <TIM3_HAL_TIM_IC_CaptureCallback+0x274>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	3334      	adds	r3, #52	; 0x34
 8003aaa:	3308      	adds	r3, #8
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	b29a      	uxth	r2, r3
 8003ab0:	4b37      	ldr	r3, [pc, #220]	; (8003b90 <TIM3_HAL_TIM_IC_CaptureCallback+0x2a0>)
 8003ab2:	801a      	strh	r2, [r3, #0]

				TIM3_u16Ch3_PulseTime = tim3_u16Ch3_Capture_Falling_Edge - tim3_u16Ch3_Capture_Rising_Edge;
 8003ab4:	4b36      	ldr	r3, [pc, #216]	; (8003b90 <TIM3_HAL_TIM_IC_CaptureCallback+0x2a0>)
 8003ab6:	881a      	ldrh	r2, [r3, #0]
 8003ab8:	4b34      	ldr	r3, [pc, #208]	; (8003b8c <TIM3_HAL_TIM_IC_CaptureCallback+0x29c>)
 8003aba:	881b      	ldrh	r3, [r3, #0]
 8003abc:	1ad3      	subs	r3, r2, r3
 8003abe:	b29a      	uxth	r2, r3
 8003ac0:	4b34      	ldr	r3, [pc, #208]	; (8003b94 <TIM3_HAL_TIM_IC_CaptureCallback+0x2a4>)
 8003ac2:	801a      	strh	r2, [r3, #0]
			}

			TIM4_TIM3_u16Ch3_Counter = 0;
 8003ac4:	4b34      	ldr	r3, [pc, #208]	; (8003b98 <TIM3_HAL_TIM_IC_CaptureCallback+0x2a8>)
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	801a      	strh	r2, [r3, #0]
		}


		if (htim->Channel==HAL_TIM_ACTIVE_CHANNEL_4)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	7f1b      	ldrb	r3, [r3, #28]
 8003ace:	2b08      	cmp	r3, #8
 8003ad0:	d16d      	bne.n	8003bae <TIM3_HAL_TIM_IC_CaptureCallback+0x2be>
		{
			if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1))
 8003ad2:	2102      	movs	r1, #2
 8003ad4:	482c      	ldr	r0, [pc, #176]	; (8003b88 <TIM3_HAL_TIM_IC_CaptureCallback+0x298>)
 8003ad6:	f7fd f889 	bl	8000bec <HAL_GPIO_ReadPin>
 8003ada:	4603      	mov	r3, r0
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d018      	beq.n	8003b12 <TIM3_HAL_TIM_IC_CaptureCallback+0x222>
			{
				__HAL_TIM_SET_CAPTUREPOLARITY(&htim3, TIM_CHANNEL_4, TIM_INPUTCHANNELPOLARITY_FALLING);
 8003ae0:	4b20      	ldr	r3, [pc, #128]	; (8003b64 <TIM3_HAL_TIM_IC_CaptureCallback+0x274>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	6a19      	ldr	r1, [r3, #32]
 8003ae6:	4b1f      	ldr	r3, [pc, #124]	; (8003b64 <TIM3_HAL_TIM_IC_CaptureCallback+0x274>)
 8003ae8:	681a      	ldr	r2, [r3, #0]
 8003aea:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 8003aee:	400b      	ands	r3, r1
 8003af0:	6213      	str	r3, [r2, #32]
 8003af2:	4b1c      	ldr	r3, [pc, #112]	; (8003b64 <TIM3_HAL_TIM_IC_CaptureCallback+0x274>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	6a1a      	ldr	r2, [r3, #32]
 8003af8:	4b1a      	ldr	r3, [pc, #104]	; (8003b64 <TIM3_HAL_TIM_IC_CaptureCallback+0x274>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b00:	621a      	str	r2, [r3, #32]

				tim3_u16Ch4_Capture_Rising_Edge = __HAL_TIM_GET_COMPARE(&htim3, TIM_CHANNEL_4);
 8003b02:	4b18      	ldr	r3, [pc, #96]	; (8003b64 <TIM3_HAL_TIM_IC_CaptureCallback+0x274>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	3334      	adds	r3, #52	; 0x34
 8003b08:	330c      	adds	r3, #12
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	b29a      	uxth	r2, r3
 8003b0e:	4b23      	ldr	r3, [pc, #140]	; (8003b9c <TIM3_HAL_TIM_IC_CaptureCallback+0x2ac>)
 8003b10:	801a      	strh	r2, [r3, #0]
			}

			if (!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1))
 8003b12:	2102      	movs	r1, #2
 8003b14:	481c      	ldr	r0, [pc, #112]	; (8003b88 <TIM3_HAL_TIM_IC_CaptureCallback+0x298>)
 8003b16:	f7fd f869 	bl	8000bec <HAL_GPIO_ReadPin>
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d143      	bne.n	8003ba8 <TIM3_HAL_TIM_IC_CaptureCallback+0x2b8>
			{
				__HAL_TIM_SET_CAPTUREPOLARITY(&htim3, TIM_CHANNEL_4, TIM_INPUTCHANNELPOLARITY_RISING);
 8003b20:	4b10      	ldr	r3, [pc, #64]	; (8003b64 <TIM3_HAL_TIM_IC_CaptureCallback+0x274>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	6a19      	ldr	r1, [r3, #32]
 8003b26:	4b0f      	ldr	r3, [pc, #60]	; (8003b64 <TIM3_HAL_TIM_IC_CaptureCallback+0x274>)
 8003b28:	681a      	ldr	r2, [r3, #0]
 8003b2a:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 8003b2e:	400b      	ands	r3, r1
 8003b30:	6213      	str	r3, [r2, #32]
 8003b32:	4b0c      	ldr	r3, [pc, #48]	; (8003b64 <TIM3_HAL_TIM_IC_CaptureCallback+0x274>)
 8003b34:	681a      	ldr	r2, [r3, #0]
 8003b36:	4b0b      	ldr	r3, [pc, #44]	; (8003b64 <TIM3_HAL_TIM_IC_CaptureCallback+0x274>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	6a12      	ldr	r2, [r2, #32]
 8003b3c:	621a      	str	r2, [r3, #32]

				tim3_u16Ch4_Capture_Falling_Edge = __HAL_TIM_GET_COMPARE(&htim3, TIM_CHANNEL_4);
 8003b3e:	4b09      	ldr	r3, [pc, #36]	; (8003b64 <TIM3_HAL_TIM_IC_CaptureCallback+0x274>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	3334      	adds	r3, #52	; 0x34
 8003b44:	330c      	adds	r3, #12
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	b29a      	uxth	r2, r3
 8003b4a:	4b15      	ldr	r3, [pc, #84]	; (8003ba0 <TIM3_HAL_TIM_IC_CaptureCallback+0x2b0>)
 8003b4c:	801a      	strh	r2, [r3, #0]

				TIM3_u16Ch4_PulseTime = tim3_u16Ch4_Capture_Falling_Edge - tim3_u16Ch4_Capture_Rising_Edge;
 8003b4e:	4b14      	ldr	r3, [pc, #80]	; (8003ba0 <TIM3_HAL_TIM_IC_CaptureCallback+0x2b0>)
 8003b50:	881a      	ldrh	r2, [r3, #0]
 8003b52:	4b12      	ldr	r3, [pc, #72]	; (8003b9c <TIM3_HAL_TIM_IC_CaptureCallback+0x2ac>)
 8003b54:	881b      	ldrh	r3, [r3, #0]
 8003b56:	1ad3      	subs	r3, r2, r3
 8003b58:	b29a      	uxth	r2, r3
 8003b5a:	e023      	b.n	8003ba4 <TIM3_HAL_TIM_IC_CaptureCallback+0x2b4>
 8003b5c:	40000400 	.word	0x40000400
 8003b60:	40010800 	.word	0x40010800
 8003b64:	200004e0 	.word	0x200004e0
 8003b68:	20000a14 	.word	0x20000a14
 8003b6c:	20000a0c 	.word	0x20000a0c
 8003b70:	20000a18 	.word	0x20000a18
 8003b74:	20000a1c 	.word	0x20000a1c
 8003b78:	20000a16 	.word	0x20000a16
 8003b7c:	20000a02 	.word	0x20000a02
 8003b80:	20000a06 	.word	0x20000a06
 8003b84:	20000a20 	.word	0x20000a20
 8003b88:	40010c00 	.word	0x40010c00
 8003b8c:	20000a10 	.word	0x20000a10
 8003b90:	20000a12 	.word	0x20000a12
 8003b94:	20000a08 	.word	0x20000a08
 8003b98:	20000a1a 	.word	0x20000a1a
 8003b9c:	20000a04 	.word	0x20000a04
 8003ba0:	20000a0a 	.word	0x20000a0a
 8003ba4:	4b04      	ldr	r3, [pc, #16]	; (8003bb8 <TIM3_HAL_TIM_IC_CaptureCallback+0x2c8>)
 8003ba6:	801a      	strh	r2, [r3, #0]
			}

			TIM4_TIM3_u16Ch4_Counter = 0;
 8003ba8:	4b04      	ldr	r3, [pc, #16]	; (8003bbc <TIM3_HAL_TIM_IC_CaptureCallback+0x2cc>)
 8003baa:	2200      	movs	r2, #0
 8003bac:	801a      	strh	r2, [r3, #0]
		}

	  }
}
 8003bae:	bf00      	nop
 8003bb0:	3708      	adds	r7, #8
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}
 8003bb6:	bf00      	nop
 8003bb8:	20000a0e 	.word	0x20000a0e
 8003bbc:	20000a24 	.word	0x20000a24

08003bc0 <TIM4_Ini>:
*  Parameter(s)   :  
*  Return Value   :  
******************************************************************************/

void TIM4_Ini (void)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim4);
 8003bc4:	4803      	ldr	r0, [pc, #12]	; (8003bd4 <TIM4_Ini+0x14>)
 8003bc6:	f7fd fca6 	bl	8001516 <HAL_TIM_Base_Start_IT>
	HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003bca:	201e      	movs	r0, #30
 8003bcc:	f7fc fc31 	bl	8000432 <HAL_NVIC_EnableIRQ>
}
 8003bd0:	bf00      	nop
 8003bd2:	bd80      	pop	{r7, pc}
 8003bd4:	20000430 	.word	0x20000430

08003bd8 <TIM4_HAL_TIM_PeriodElapsedCallback>:
*  Parameter(s)   :
*  Return Value   :
******************************************************************************/

void TIM4_HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b083      	sub	sp, #12
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]

	// Fail Safe Detection
	if (FSE_u16FailSafe_LEDisBlinkingCounter < 1000)
 8003be0:	4b5b      	ldr	r3, [pc, #364]	; (8003d50 <TIM4_HAL_TIM_PeriodElapsedCallback+0x178>)
 8003be2:	881b      	ldrh	r3, [r3, #0]
 8003be4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003be8:	d209      	bcs.n	8003bfe <TIM4_HAL_TIM_PeriodElapsedCallback+0x26>
	{
		FSE_u16FailSafe_LEDisBlinkingCounter++;
 8003bea:	4b59      	ldr	r3, [pc, #356]	; (8003d50 <TIM4_HAL_TIM_PeriodElapsedCallback+0x178>)
 8003bec:	881b      	ldrh	r3, [r3, #0]
 8003bee:	3301      	adds	r3, #1
 8003bf0:	b29a      	uxth	r2, r3
 8003bf2:	4b57      	ldr	r3, [pc, #348]	; (8003d50 <TIM4_HAL_TIM_PeriodElapsedCallback+0x178>)
 8003bf4:	801a      	strh	r2, [r3, #0]
		FSE_u8FailSafe_LEDisBlinking = 1;
 8003bf6:	4b57      	ldr	r3, [pc, #348]	; (8003d54 <TIM4_HAL_TIM_PeriodElapsedCallback+0x17c>)
 8003bf8:	2201      	movs	r2, #1
 8003bfa:	701a      	strb	r2, [r3, #0]
 8003bfc:	e002      	b.n	8003c04 <TIM4_HAL_TIM_PeriodElapsedCallback+0x2c>
	}
	else
	{
		FSE_u8FailSafe_LEDisBlinking = 0;
 8003bfe:	4b55      	ldr	r3, [pc, #340]	; (8003d54 <TIM4_HAL_TIM_PeriodElapsedCallback+0x17c>)
 8003c00:	2200      	movs	r2, #0
 8003c02:	701a      	strb	r2, [r3, #0]




	// Channels
	TIM4_TIM2_u16Ch1_Counter++;
 8003c04:	4b54      	ldr	r3, [pc, #336]	; (8003d58 <TIM4_HAL_TIM_PeriodElapsedCallback+0x180>)
 8003c06:	881b      	ldrh	r3, [r3, #0]
 8003c08:	3301      	adds	r3, #1
 8003c0a:	b29a      	uxth	r2, r3
 8003c0c:	4b52      	ldr	r3, [pc, #328]	; (8003d58 <TIM4_HAL_TIM_PeriodElapsedCallback+0x180>)
 8003c0e:	801a      	strh	r2, [r3, #0]
	TIM4_TIM2_u16Ch2_Counter++;
 8003c10:	4b52      	ldr	r3, [pc, #328]	; (8003d5c <TIM4_HAL_TIM_PeriodElapsedCallback+0x184>)
 8003c12:	881b      	ldrh	r3, [r3, #0]
 8003c14:	3301      	adds	r3, #1
 8003c16:	b29a      	uxth	r2, r3
 8003c18:	4b50      	ldr	r3, [pc, #320]	; (8003d5c <TIM4_HAL_TIM_PeriodElapsedCallback+0x184>)
 8003c1a:	801a      	strh	r2, [r3, #0]
	TIM4_TIM2_u16Ch3_Counter++;
 8003c1c:	4b50      	ldr	r3, [pc, #320]	; (8003d60 <TIM4_HAL_TIM_PeriodElapsedCallback+0x188>)
 8003c1e:	881b      	ldrh	r3, [r3, #0]
 8003c20:	3301      	adds	r3, #1
 8003c22:	b29a      	uxth	r2, r3
 8003c24:	4b4e      	ldr	r3, [pc, #312]	; (8003d60 <TIM4_HAL_TIM_PeriodElapsedCallback+0x188>)
 8003c26:	801a      	strh	r2, [r3, #0]
	TIM4_TIM2_u16Ch4_Counter++;
 8003c28:	4b4e      	ldr	r3, [pc, #312]	; (8003d64 <TIM4_HAL_TIM_PeriodElapsedCallback+0x18c>)
 8003c2a:	881b      	ldrh	r3, [r3, #0]
 8003c2c:	3301      	adds	r3, #1
 8003c2e:	b29a      	uxth	r2, r3
 8003c30:	4b4c      	ldr	r3, [pc, #304]	; (8003d64 <TIM4_HAL_TIM_PeriodElapsedCallback+0x18c>)
 8003c32:	801a      	strh	r2, [r3, #0]

	if (TIM4_TIM2_u16Ch1_Counter < TIMEOUT_TICKS)
 8003c34:	4b48      	ldr	r3, [pc, #288]	; (8003d58 <TIM4_HAL_TIM_PeriodElapsedCallback+0x180>)
 8003c36:	881b      	ldrh	r3, [r3, #0]
 8003c38:	2b63      	cmp	r3, #99	; 0x63
 8003c3a:	d806      	bhi.n	8003c4a <TIM4_HAL_TIM_PeriodElapsedCallback+0x72>
	{
		TIM4_TIM2_u16Ch1_Counter++;
 8003c3c:	4b46      	ldr	r3, [pc, #280]	; (8003d58 <TIM4_HAL_TIM_PeriodElapsedCallback+0x180>)
 8003c3e:	881b      	ldrh	r3, [r3, #0]
 8003c40:	3301      	adds	r3, #1
 8003c42:	b29a      	uxth	r2, r3
 8003c44:	4b44      	ldr	r3, [pc, #272]	; (8003d58 <TIM4_HAL_TIM_PeriodElapsedCallback+0x180>)
 8003c46:	801a      	strh	r2, [r3, #0]
 8003c48:	e002      	b.n	8003c50 <TIM4_HAL_TIM_PeriodElapsedCallback+0x78>
	}
	else
	{
		TIM2_u16Ch1_PulseTime = 0;
 8003c4a:	4b47      	ldr	r3, [pc, #284]	; (8003d68 <TIM4_HAL_TIM_PeriodElapsedCallback+0x190>)
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	801a      	strh	r2, [r3, #0]
	}


	if (TIM4_TIM2_u16Ch2_Counter < TIMEOUT_TICKS)
 8003c50:	4b42      	ldr	r3, [pc, #264]	; (8003d5c <TIM4_HAL_TIM_PeriodElapsedCallback+0x184>)
 8003c52:	881b      	ldrh	r3, [r3, #0]
 8003c54:	2b63      	cmp	r3, #99	; 0x63
 8003c56:	d806      	bhi.n	8003c66 <TIM4_HAL_TIM_PeriodElapsedCallback+0x8e>
	{
		TIM4_TIM2_u16Ch2_Counter++;
 8003c58:	4b40      	ldr	r3, [pc, #256]	; (8003d5c <TIM4_HAL_TIM_PeriodElapsedCallback+0x184>)
 8003c5a:	881b      	ldrh	r3, [r3, #0]
 8003c5c:	3301      	adds	r3, #1
 8003c5e:	b29a      	uxth	r2, r3
 8003c60:	4b3e      	ldr	r3, [pc, #248]	; (8003d5c <TIM4_HAL_TIM_PeriodElapsedCallback+0x184>)
 8003c62:	801a      	strh	r2, [r3, #0]
 8003c64:	e002      	b.n	8003c6c <TIM4_HAL_TIM_PeriodElapsedCallback+0x94>
	}
	else
	{
		TIM2_u16Ch2_PulseTime = 0;
 8003c66:	4b41      	ldr	r3, [pc, #260]	; (8003d6c <TIM4_HAL_TIM_PeriodElapsedCallback+0x194>)
 8003c68:	2200      	movs	r2, #0
 8003c6a:	801a      	strh	r2, [r3, #0]
	}


	if (TIM4_TIM2_u16Ch3_Counter < TIMEOUT_TICKS)
 8003c6c:	4b3c      	ldr	r3, [pc, #240]	; (8003d60 <TIM4_HAL_TIM_PeriodElapsedCallback+0x188>)
 8003c6e:	881b      	ldrh	r3, [r3, #0]
 8003c70:	2b63      	cmp	r3, #99	; 0x63
 8003c72:	d806      	bhi.n	8003c82 <TIM4_HAL_TIM_PeriodElapsedCallback+0xaa>
	{
		TIM4_TIM2_u16Ch3_Counter++;
 8003c74:	4b3a      	ldr	r3, [pc, #232]	; (8003d60 <TIM4_HAL_TIM_PeriodElapsedCallback+0x188>)
 8003c76:	881b      	ldrh	r3, [r3, #0]
 8003c78:	3301      	adds	r3, #1
 8003c7a:	b29a      	uxth	r2, r3
 8003c7c:	4b38      	ldr	r3, [pc, #224]	; (8003d60 <TIM4_HAL_TIM_PeriodElapsedCallback+0x188>)
 8003c7e:	801a      	strh	r2, [r3, #0]
 8003c80:	e002      	b.n	8003c88 <TIM4_HAL_TIM_PeriodElapsedCallback+0xb0>
	}
	else
	{
		TIM2_u16Ch3_PulseTime = 0;
 8003c82:	4b3b      	ldr	r3, [pc, #236]	; (8003d70 <TIM4_HAL_TIM_PeriodElapsedCallback+0x198>)
 8003c84:	2200      	movs	r2, #0
 8003c86:	801a      	strh	r2, [r3, #0]
	}


	if (TIM4_TIM2_u16Ch4_Counter < TIMEOUT_TICKS)
 8003c88:	4b36      	ldr	r3, [pc, #216]	; (8003d64 <TIM4_HAL_TIM_PeriodElapsedCallback+0x18c>)
 8003c8a:	881b      	ldrh	r3, [r3, #0]
 8003c8c:	2b63      	cmp	r3, #99	; 0x63
 8003c8e:	d806      	bhi.n	8003c9e <TIM4_HAL_TIM_PeriodElapsedCallback+0xc6>
	{
		TIM4_TIM2_u16Ch4_Counter++;
 8003c90:	4b34      	ldr	r3, [pc, #208]	; (8003d64 <TIM4_HAL_TIM_PeriodElapsedCallback+0x18c>)
 8003c92:	881b      	ldrh	r3, [r3, #0]
 8003c94:	3301      	adds	r3, #1
 8003c96:	b29a      	uxth	r2, r3
 8003c98:	4b32      	ldr	r3, [pc, #200]	; (8003d64 <TIM4_HAL_TIM_PeriodElapsedCallback+0x18c>)
 8003c9a:	801a      	strh	r2, [r3, #0]
 8003c9c:	e002      	b.n	8003ca4 <TIM4_HAL_TIM_PeriodElapsedCallback+0xcc>
	}
	else
	{
		TIM2_u16Ch4_PulseTime = 0;
 8003c9e:	4b35      	ldr	r3, [pc, #212]	; (8003d74 <TIM4_HAL_TIM_PeriodElapsedCallback+0x19c>)
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	801a      	strh	r2, [r3, #0]
	}


	TIM4_TIM3_u16Ch1_Counter++;
 8003ca4:	4b34      	ldr	r3, [pc, #208]	; (8003d78 <TIM4_HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8003ca6:	881b      	ldrh	r3, [r3, #0]
 8003ca8:	3301      	adds	r3, #1
 8003caa:	b29a      	uxth	r2, r3
 8003cac:	4b32      	ldr	r3, [pc, #200]	; (8003d78 <TIM4_HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8003cae:	801a      	strh	r2, [r3, #0]
	TIM4_TIM3_u16Ch2_Counter++;
 8003cb0:	4b32      	ldr	r3, [pc, #200]	; (8003d7c <TIM4_HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8003cb2:	881b      	ldrh	r3, [r3, #0]
 8003cb4:	3301      	adds	r3, #1
 8003cb6:	b29a      	uxth	r2, r3
 8003cb8:	4b30      	ldr	r3, [pc, #192]	; (8003d7c <TIM4_HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8003cba:	801a      	strh	r2, [r3, #0]
	TIM4_TIM3_u16Ch3_Counter++;
 8003cbc:	4b30      	ldr	r3, [pc, #192]	; (8003d80 <TIM4_HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8003cbe:	881b      	ldrh	r3, [r3, #0]
 8003cc0:	3301      	adds	r3, #1
 8003cc2:	b29a      	uxth	r2, r3
 8003cc4:	4b2e      	ldr	r3, [pc, #184]	; (8003d80 <TIM4_HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8003cc6:	801a      	strh	r2, [r3, #0]
	TIM4_TIM3_u16Ch4_Counter++;
 8003cc8:	4b2e      	ldr	r3, [pc, #184]	; (8003d84 <TIM4_HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8003cca:	881b      	ldrh	r3, [r3, #0]
 8003ccc:	3301      	adds	r3, #1
 8003cce:	b29a      	uxth	r2, r3
 8003cd0:	4b2c      	ldr	r3, [pc, #176]	; (8003d84 <TIM4_HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8003cd2:	801a      	strh	r2, [r3, #0]

	if (TIM4_TIM3_u16Ch1_Counter < TIMEOUT_TICKS)
 8003cd4:	4b28      	ldr	r3, [pc, #160]	; (8003d78 <TIM4_HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8003cd6:	881b      	ldrh	r3, [r3, #0]
 8003cd8:	2b63      	cmp	r3, #99	; 0x63
 8003cda:	d806      	bhi.n	8003cea <TIM4_HAL_TIM_PeriodElapsedCallback+0x112>
	{
		TIM4_TIM3_u16Ch1_Counter++;
 8003cdc:	4b26      	ldr	r3, [pc, #152]	; (8003d78 <TIM4_HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8003cde:	881b      	ldrh	r3, [r3, #0]
 8003ce0:	3301      	adds	r3, #1
 8003ce2:	b29a      	uxth	r2, r3
 8003ce4:	4b24      	ldr	r3, [pc, #144]	; (8003d78 <TIM4_HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8003ce6:	801a      	strh	r2, [r3, #0]
 8003ce8:	e002      	b.n	8003cf0 <TIM4_HAL_TIM_PeriodElapsedCallback+0x118>
	}
	else
	{
		TIM3_u16Ch1_PulseTime = 0;
 8003cea:	4b27      	ldr	r3, [pc, #156]	; (8003d88 <TIM4_HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8003cec:	2200      	movs	r2, #0
 8003cee:	801a      	strh	r2, [r3, #0]
	}


	if (TIM4_TIM3_u16Ch2_Counter < TIMEOUT_TICKS)
 8003cf0:	4b22      	ldr	r3, [pc, #136]	; (8003d7c <TIM4_HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8003cf2:	881b      	ldrh	r3, [r3, #0]
 8003cf4:	2b63      	cmp	r3, #99	; 0x63
 8003cf6:	d806      	bhi.n	8003d06 <TIM4_HAL_TIM_PeriodElapsedCallback+0x12e>
	{
		TIM4_TIM3_u16Ch2_Counter++;
 8003cf8:	4b20      	ldr	r3, [pc, #128]	; (8003d7c <TIM4_HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8003cfa:	881b      	ldrh	r3, [r3, #0]
 8003cfc:	3301      	adds	r3, #1
 8003cfe:	b29a      	uxth	r2, r3
 8003d00:	4b1e      	ldr	r3, [pc, #120]	; (8003d7c <TIM4_HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8003d02:	801a      	strh	r2, [r3, #0]
 8003d04:	e002      	b.n	8003d0c <TIM4_HAL_TIM_PeriodElapsedCallback+0x134>
	}
	else
	{
		TIM3_u16Ch2_PulseTime = 0;
 8003d06:	4b21      	ldr	r3, [pc, #132]	; (8003d8c <TIM4_HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8003d08:	2200      	movs	r2, #0
 8003d0a:	801a      	strh	r2, [r3, #0]
	}


	if (TIM4_TIM3_u16Ch3_Counter < TIMEOUT_TICKS)
 8003d0c:	4b1c      	ldr	r3, [pc, #112]	; (8003d80 <TIM4_HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8003d0e:	881b      	ldrh	r3, [r3, #0]
 8003d10:	2b63      	cmp	r3, #99	; 0x63
 8003d12:	d806      	bhi.n	8003d22 <TIM4_HAL_TIM_PeriodElapsedCallback+0x14a>
	{
		TIM4_TIM3_u16Ch3_Counter++;
 8003d14:	4b1a      	ldr	r3, [pc, #104]	; (8003d80 <TIM4_HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8003d16:	881b      	ldrh	r3, [r3, #0]
 8003d18:	3301      	adds	r3, #1
 8003d1a:	b29a      	uxth	r2, r3
 8003d1c:	4b18      	ldr	r3, [pc, #96]	; (8003d80 <TIM4_HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8003d1e:	801a      	strh	r2, [r3, #0]
 8003d20:	e002      	b.n	8003d28 <TIM4_HAL_TIM_PeriodElapsedCallback+0x150>
	}
	else
	{
		TIM3_u16Ch3_PulseTime = 0;
 8003d22:	4b1b      	ldr	r3, [pc, #108]	; (8003d90 <TIM4_HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8003d24:	2200      	movs	r2, #0
 8003d26:	801a      	strh	r2, [r3, #0]
	}


	if (TIM4_TIM3_u16Ch4_Counter < TIMEOUT_TICKS)
 8003d28:	4b16      	ldr	r3, [pc, #88]	; (8003d84 <TIM4_HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8003d2a:	881b      	ldrh	r3, [r3, #0]
 8003d2c:	2b63      	cmp	r3, #99	; 0x63
 8003d2e:	d806      	bhi.n	8003d3e <TIM4_HAL_TIM_PeriodElapsedCallback+0x166>
	{
		TIM4_TIM3_u16Ch4_Counter++;
 8003d30:	4b14      	ldr	r3, [pc, #80]	; (8003d84 <TIM4_HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8003d32:	881b      	ldrh	r3, [r3, #0]
 8003d34:	3301      	adds	r3, #1
 8003d36:	b29a      	uxth	r2, r3
 8003d38:	4b12      	ldr	r3, [pc, #72]	; (8003d84 <TIM4_HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8003d3a:	801a      	strh	r2, [r3, #0]
	}
	else
	{
		TIM3_u16Ch4_PulseTime = 0;
	}
}
 8003d3c:	e002      	b.n	8003d44 <TIM4_HAL_TIM_PeriodElapsedCallback+0x16c>
		TIM3_u16Ch4_PulseTime = 0;
 8003d3e:	4b15      	ldr	r3, [pc, #84]	; (8003d94 <TIM4_HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8003d40:	2200      	movs	r2, #0
 8003d42:	801a      	strh	r2, [r3, #0]
}
 8003d44:	bf00      	nop
 8003d46:	370c      	adds	r7, #12
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bc80      	pop	{r7}
 8003d4c:	4770      	bx	lr
 8003d4e:	bf00      	nop
 8003d50:	200009e6 	.word	0x200009e6
 8003d54:	200009e8 	.word	0x200009e8
 8003d58:	20000a22 	.word	0x20000a22
 8003d5c:	20000a26 	.word	0x20000a26
 8003d60:	20000a1e 	.word	0x20000a1e
 8003d64:	20000a28 	.word	0x20000a28
 8003d68:	200009ea 	.word	0x200009ea
 8003d6c:	200009f0 	.word	0x200009f0
 8003d70:	20000a00 	.word	0x20000a00
 8003d74:	200009f8 	.word	0x200009f8
 8003d78:	20000a1c 	.word	0x20000a1c
 8003d7c:	20000a20 	.word	0x20000a20
 8003d80:	20000a1a 	.word	0x20000a1a
 8003d84:	20000a24 	.word	0x20000a24
 8003d88:	20000a18 	.word	0x20000a18
 8003d8c:	20000a06 	.word	0x20000a06
 8003d90:	20000a08 	.word	0x20000a08
 8003d94:	20000a0e 	.word	0x20000a0e

08003d98 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8003d98:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8003d9a:	e003      	b.n	8003da4 <LoopCopyDataInit>

08003d9c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8003d9c:	4b0b      	ldr	r3, [pc, #44]	; (8003dcc <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8003d9e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8003da0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8003da2:	3104      	adds	r1, #4

08003da4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8003da4:	480a      	ldr	r0, [pc, #40]	; (8003dd0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8003da6:	4b0b      	ldr	r3, [pc, #44]	; (8003dd4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8003da8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8003daa:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8003dac:	d3f6      	bcc.n	8003d9c <CopyDataInit>
  ldr r2, =_sbss
 8003dae:	4a0a      	ldr	r2, [pc, #40]	; (8003dd8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8003db0:	e002      	b.n	8003db8 <LoopFillZerobss>

08003db2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8003db2:	2300      	movs	r3, #0
  str r3, [r2], #4
 8003db4:	f842 3b04 	str.w	r3, [r2], #4

08003db8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8003db8:	4b08      	ldr	r3, [pc, #32]	; (8003ddc <LoopFillZerobss+0x24>)
  cmp r2, r3
 8003dba:	429a      	cmp	r2, r3
  bcc FillZerobss
 8003dbc:	d3f9      	bcc.n	8003db2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003dbe:	f7ff fbc9 	bl	8003554 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003dc2:	f000 f80f 	bl	8003de4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003dc6:	f7fe fef9 	bl	8002bbc <main>
  bx lr
 8003dca:	4770      	bx	lr
  ldr r3, =_sidata
 8003dcc:	08003ea0 	.word	0x08003ea0
  ldr r0, =_sdata
 8003dd0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8003dd4:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8003dd8:	20000010 	.word	0x20000010
  ldr r3, = _ebss
 8003ddc:	20000a2c 	.word	0x20000a2c

08003de0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003de0:	e7fe      	b.n	8003de0 <ADC1_2_IRQHandler>
	...

08003de4 <__libc_init_array>:
 8003de4:	b570      	push	{r4, r5, r6, lr}
 8003de6:	2500      	movs	r5, #0
 8003de8:	4e0c      	ldr	r6, [pc, #48]	; (8003e1c <__libc_init_array+0x38>)
 8003dea:	4c0d      	ldr	r4, [pc, #52]	; (8003e20 <__libc_init_array+0x3c>)
 8003dec:	1ba4      	subs	r4, r4, r6
 8003dee:	10a4      	asrs	r4, r4, #2
 8003df0:	42a5      	cmp	r5, r4
 8003df2:	d109      	bne.n	8003e08 <__libc_init_array+0x24>
 8003df4:	f000 f82e 	bl	8003e54 <_init>
 8003df8:	2500      	movs	r5, #0
 8003dfa:	4e0a      	ldr	r6, [pc, #40]	; (8003e24 <__libc_init_array+0x40>)
 8003dfc:	4c0a      	ldr	r4, [pc, #40]	; (8003e28 <__libc_init_array+0x44>)
 8003dfe:	1ba4      	subs	r4, r4, r6
 8003e00:	10a4      	asrs	r4, r4, #2
 8003e02:	42a5      	cmp	r5, r4
 8003e04:	d105      	bne.n	8003e12 <__libc_init_array+0x2e>
 8003e06:	bd70      	pop	{r4, r5, r6, pc}
 8003e08:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003e0c:	4798      	blx	r3
 8003e0e:	3501      	adds	r5, #1
 8003e10:	e7ee      	b.n	8003df0 <__libc_init_array+0xc>
 8003e12:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003e16:	4798      	blx	r3
 8003e18:	3501      	adds	r5, #1
 8003e1a:	e7f2      	b.n	8003e02 <__libc_init_array+0x1e>
 8003e1c:	08003e98 	.word	0x08003e98
 8003e20:	08003e98 	.word	0x08003e98
 8003e24:	08003e98 	.word	0x08003e98
 8003e28:	08003e9c 	.word	0x08003e9c

08003e2c <memcpy>:
 8003e2c:	b510      	push	{r4, lr}
 8003e2e:	1e43      	subs	r3, r0, #1
 8003e30:	440a      	add	r2, r1
 8003e32:	4291      	cmp	r1, r2
 8003e34:	d100      	bne.n	8003e38 <memcpy+0xc>
 8003e36:	bd10      	pop	{r4, pc}
 8003e38:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003e3c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003e40:	e7f7      	b.n	8003e32 <memcpy+0x6>

08003e42 <memset>:
 8003e42:	4603      	mov	r3, r0
 8003e44:	4402      	add	r2, r0
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d100      	bne.n	8003e4c <memset+0xa>
 8003e4a:	4770      	bx	lr
 8003e4c:	f803 1b01 	strb.w	r1, [r3], #1
 8003e50:	e7f9      	b.n	8003e46 <memset+0x4>
	...

08003e54 <_init>:
 8003e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e56:	bf00      	nop
 8003e58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e5a:	bc08      	pop	{r3}
 8003e5c:	469e      	mov	lr, r3
 8003e5e:	4770      	bx	lr

08003e60 <_fini>:
 8003e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e62:	bf00      	nop
 8003e64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e66:	bc08      	pop	{r3}
 8003e68:	469e      	mov	lr, r3
 8003e6a:	4770      	bx	lr
